
16:33 2015-03-29
----------------
容器的软硬件协同

容器的SLA（QoS）.

需求: 不修改IO驱动的同时实现容器对IO操作的带宽控制.

需求分析
-------

不修改IO驱动. 已知所有IO都会经过SMMU, 如果在SMMU层面做控制. IO驱动不可见, 也无法绕过. 所以软件做的事情应该是SMMU可见的.
同时SMMU如果是自研的, 容易加入定制化需求.

哪些软件可配置的东西可以从cpu发出去？
------------------------------------

armv8下面有哪些可以影响memory属性的手段:
页表属性: asid, vmid

*   ASID
asid: application specific ID. 在ttbr0_el1配置. 在非global地址空间, ASID+地址作为cache和tlb匹配依据. 由于不同进程共享同一个地址空间, 如果我们给每个进程唯一的ASID, 进程切换时cache和tlb不需要刷. 目前arm64 kernel是每个进程的每个cpu一个ASID. 对于16核系统来说, 8位或16位ASID显得都很少. 目前armv8架构上ASID位于由寄存器确定, 所以自研CPU可以增加ASID. 从内核代码看, 基本只考虑了8位或16位ASID的情况.
asid在el1的页表配置.

*   VMID
在EL2页表配置, cache/tlb: VMID+ASID+地址.
这个没法直接用在容器上. 但是如果不同容器只是相同内核(EL1相同)但不同VMID: 相当于每个容器是一个虚拟机. 但是这样会带来虚拟机切换时flush cache和tlb的额外开销.

*   tagged address
tagged address: 功能，原理待学习. SMMU如果可以做地址的mask, 可能可以实现更为精确的控制。
原理上是利用软件用不到的地址作特殊用途, 软硬件协同做些事情. 常用的有利用低地址或高地址两种情况. 例如不允许非对齐访问的32位系统, 可以用低2位作tag address. arm支持非对齐访问, 所以没法这样用.
另一个思路是利用软件不用的高地址, 例如64位系统中, 高地址是全1或全0表示内核或用户空间. 完全可以拿出部分地址做tag address. 具体arm64架构和实践中是怎么用的有待学习. (貌似内核已经有人用了?)

ASID用于容器的SLA
-----------------

如果把ASID全部或部分用于标示不同容器(简称container_ASID). SMMU针对这些bit做带宽控制(SMMU支持mask).

软件实现
-------

cgroup: 增加一个新的subsys: asids. 管理container_ASID. 容器对应的ASID由subsys asids分配. 用户可以通过cgroup接口设置带宽控制.

container_ASID如果和process_ASID共存, 各占部分bit. 每个进程有唯一的ASID没有变化, 不影响只有的用户空间cache和tlb代码. 内核空间cache和tlb操作, 如果默认只针对global. 需要增加NG的操作, 开销会不会有变化?(虽然增加了一个函数, 但是cache和/或tlb中需要flush的区域不会变.


可能存在的问题
--------------

*   内核态, ASID能否带出去?
*   如果整个内核的页表都不使用global属性. 设备中断可能会算在某个容器的带宽里面.
    解决方法是把内核页表分为global和NG两个区域, 所有的中断都放在global区域里面. 这样中断不会占容器的带宽, 但是IO接收到的请求没法做SLA.
    如果可以接受修改驱动, 可以在识别出请求和容器对应关系后, 修改页表为对应ASID. 这样要考虑刷页表的开销.

*   ASID用于容器SLA, 对于进程切换性能开销的影响.
    增加ASID?
    问题1: 需要改CPU. 只能是自研CPU?
    问题2: 总线上user域bit数量有限, 增加会加大硬件设计难度, 需要评估权衡增加多少ASID合适.

*   容器数量如果多于contain_ASID范围怎么办?
    假设只是不用容器会用到加速器, 只给活动的容器分配container_ASID(这个业务使用容器的方式有关, 如果是无状态的"小"容器, 可能会大量起停; 如果是有状态的容器, 相对来说起停次数会少一些. 问题是无状态的容器是发展方向, 怎么办?), 容器停止时回收(需要改大量页表属性, 开销? 考虑lazy回收: 先改成fault, 容器重启引发缺页时再处理?)

其他可能的方案
-------------
*   vmid
*   tagged address

容器的安全性
------------
如果容器+内核作为容器, 也许有机会实现一定程度的硬隔离?

下一步
------

在P660上实现? 至少两个容器, 以网卡或硬盘为对象测试.
未流片的芯片有没有可能修改? IO die?
能不能写篇专利?

