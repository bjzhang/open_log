
0:26 2009-11-2
VC1600, VC0882, VC0718, arm, cortex-a8, 65nm工艺
"36: Linux\doc\arm soc\arm体系结构\Cortex\ARM Cortex-A8.txt"有a8在65nm LP, GP工艺的频率, 面积, 功耗:
                        Speed Opt   Speed Opt 
Process                 65nm (LP)   65nm (GP) 
Frequency* (MHz)        650+        1100+ 
Area with cache (mm2)   <4          <4 
Area without cache (mm2) <3         <3 
Power with cache (mW/MHz)<0.59     <0.45 
The 65nm (LP) dynamic power measured is at 1.2 V nominal and hence is higher than the 65nm(GP) dynamic power which is at 1.0V. 

上面功耗的差异是由于LP的功耗在1.2v测试, GP功耗在1.0v测试. 如果GP在1.2v测试, 直接用P=UxU/R估算, GP(@1.2v)=0.648功耗比LP大9.8%. 
从tsmc下面资料看, 这里的LP表示low power, GP表示general purpose. 
65nm Technology
自: http://www.tsmc.com/chinese/b_technology/b01_platform/b010101_65nm.htm
The 65nm process offers cost-effective benefits superior to the 90nm node. It features two times the 90nm gate density and boasts a speed improvement of between 30 to 50 percent. The 65nm process also provides the smallest SRAM cell and reduces power with a multiple Vt architecture and other process innovation.
TSMC's 65nm logic family includes general purpose (GP), low power (LP) and LPG options. Each process supports low, standard and high Vt options. Operating voltages range from 0.9V to 1.26V. I/O voltages include 1.8V, 2.5V and 3.3V (5V tolerant). Raw gate density is around 854 Kgate/mm2, based on TSMC's standard cell library. SRAM cells range from 0.499μm2 (6T) to 1.158μm2 (8T/10T).
The 65nm process provides a combination of general purpose (G) and low power (LP) core transistors together with a 2.5V I/O transistor as a Triple Gate Oxide (LPG) process for optimizing speed, power, and leakage for wireless/consumer applications.

(9:49 2009-11-13)bamvor: 特征线宽是MOS栅宽, 载流子流动方向是长. 下图中上下是宽, 左右是长. 
    ___
 ___|_|__
 |D     S|
 ---------
    | |
    ---

12:33 2009-11-2
时间管理
0, 9:45-21:34

1, 计划
1), 下午memory会议;
2), sdio mas review. 本来应该明天下午16:30之前回复, 时间紧, 只能是明天晚上做. 
3), 晚上sd ppt;
4), 明天下午arm调试, 明天上午之前都看arm11的东西. 尤其是huangweid的"arm1176.doc"

2, 执行
1), 9:50-11:30 面试. 
2), 午饭. 12:34,午休, 13:45.
3), 13:45-16:39 linchuan memory总结. 
4), -17:37 家里有事. 
5), 17:38-18:06 sdio mas review: 中断是否清楚. 看到第五章. 
6), 午饭;
7), 19:03-19:42 邮件.
8), 20:44-21:34 830 sd代码整理

12:38 2009-11-2
VC1600, VC0882, VC0882 area estimation 0.3, 疑问
为什么chip cost=costx良率(good rate)?, 我感觉是除. 
Memory block SubTotal为什么没有计算cif部分? 

13:50 2009-11-2
VC0830, SV, clkrst, clkswitch和memory问题总结
1, "13:28 2009-6-3": 问题1就是2的"VC0830 切频bug", 问题2(memory配置不正确时0x0和0x40000000数据不同)原因未知, 给linchuan看过. 难道是marb问题? 
2, "11:16 2009-8-3"VC0830 切频bug(sdrc_mode无shadow寄存器, 未发MRS和EMRS), 这个问题linchuan已总结. 
3, "16:04 2009-10-29"切频时即使代码不再sdrc中也需要lock sdrc.

19:20 2009-11-2
VC1600, VC0882, VC0718, arm1176, 札记
1, precise, imprecise data abort
后者是在module端(附近?)才发生的data abort, 这时相应指令已经执行完了. 

2, jtag1149.1-2001

3, monitor mode允许在arm运行时通过Debug TAP与arm通信, 可以用于运行实时任务的arm(此时arm没法停止). 

9:50 2009-11-3
时间管理
0, 上下班时间: 9:34-
1, 计划:
1), arm debug
2), 830 sd代码整理
3), 晚上要完成sdio mas review, 今晚必须完成. 

2, 执行:
1), 9:50-11:27 与zhicheng讨论arm debug
2), 午饭, GPS, 午休
3), 14:00--16:30 arm debug training
4), -18:36 arm debug
5), 晚饭. 
6), 19:30-21:53

10:32 2009-11-3
VC1600, VC0882, VC0718, arm, 调试模式, stopped clock
1, stopped clock模式是停止arm clk, 不停止bus和module clock. 因为我们调试时可以通过写入硬件寄存器控制硬件, 例如写入uart tx, uart会输出相应字符. 

16:39 2009-11-3
VC1600, VC0882, VC0718, arm debug training
1, 整理todo
1), 整理下午笔记. 
2), 实验rvds3.0, 4.0能否正常调试. 
3), 晚上要完成sdio mas review

17:06 2009-11-3
VC1600, VC0882, VC0718, arm debug, RVDS
1, 按照Realview ICE driver
1), rvds3.0的rvi-me(Micro Edition) driver似乎是只支持arm926的, 现在这个realview ICE不能用. 
2), 用rvds4.0的driver. 可以找到arm1176.

2, rvds3.0中需要手工加入configuration, 选择RVI接口. 
有问题, 暂时用rvds4.0实验. 

3, 需要把license.dat中
SERVER后面的"000802d74b82"复制到网卡. 
提示"flexlm winsock connection refused"
怀疑是license有问题.

4, 重新申请一个license, 对应实际网卡的物理地址的. 
关闭虚拟网卡. 重启后即可. 

5, 连接后, 可以调试realview RVDS example里面的svc.
可以用arm work bench编译self test, 但是运行到main函数中有问题. 

9:53 2009-11-4
时间管理
0, 9:35-21:20

1, 计划
1), sdio mas review;
2), 昨天arm debug training记录. lingming问: L1+L2还是max(L1,L2).
3), 整理arm debug todo. <DONE>
4), <TODO>明天最急的事情是clkrst review, 切频, lock sdrc;</TODO>

2, 执行
1), 9:53-11:24 arm debug/openocd jtag, 见"10:50 2009-11-4"
2), 14:00-18:09 cache, VC0598 training. 
3), 晚饭
40, 19:11-21:20

10:50 2009-11-4
(21:20 2009-11-4)
VC1600, VC0882, VC0718, jtag, arm(arm1176) debug, openocd, 项目进展: arm debug(RVI, jlink, openocd), 项目总结
1, 11月3日进展: 
arm1176已经可以在rvds4.0下调试简单程序(通过semihost打印), selftest工程运行到main后会失败. 
遇到的问题是license问题. 到网上重新申请了评估版license(与物理网卡绑定), 关闭虚拟网卡, 在用license wizard4.2配置license, 重启后rvds4.0可以正常连接RVI.

2, 11月4日进展: 
晚上LiaoZhiCheng, Zhangjian一起实验rvds3.0+jlink+pb1176, openocd+jlink+pb1176两种方式, 都是可以读到id, 但是连接rvds或gdb有问题. (后来用新买的jlinkv8+openocd无问题, 看来和网上说的一样(v7对arm11支持不好)).

3, 下一步实验计划包括: rvds4.0编译运行(简单应用程序selftest), rvds3.0(jlink), eclipse(openocd+jlink, openocd+ftdi2232, openocd+并口)), 实验PB1176 运行Linux.

4, 上面提到的openocd对arm11支持很好, 对a8支持无mmu, 无cache情况, 正逐步完善中. 下面是openocd的简单介绍: 
openocd是开源的调试代理, 可以通过gdb调试接口在eclipse中调试. 
openocd支持jlink, 并口, ft2232的jtag(国内130元). 其中ft2232是一个usb转jtag/rs232芯片, 相当于把并口jtag换成了usb口jtag, openocd通过ft2232可以支持arm11和cortex-a8(不完善).
1), open ocd对arm11支持完整. 已经有s3c6410 cfg.
2), 对cortex-a8有部分支持. 
"http://elinux.org/BeagleBoardJTAG"是BeagleBoard使用的调试工具, 可以认为是支持a8的调试器. 
"http://elinux.org/BeagleBoardOpenOCD"描述了openocd通过ft2232芯片对a8的支持情况, 目前可以支持无MMU, 无cache的应用程序调试(例如u-boot). 
Linux调试有问题: https://lists.berlios.de/pipermail/openocd-development/2009-August/010184.html
"http://tincantools.com/product.php?productid=16144"是国外的ft2232 jtag调试小板, 几十$. 

13:06 2009-11-4
VC1600, VC0882, VC0718, arm 开发板
1, 确认天漠的usb otg是如何选择的. 
2, 瑞泰: 
1), HDMI还是DVI-D?. HDMI和DVI-D pin兼容只是封装不同. 有无HDMI转DVI转接线. 
2), 从图片上看usb otg用的是otg口, otg口转miniA, miniB的转接线线有没有? 
USB OTG监测: 当OTG设备检测到接地的ID引脚时，表示默认的是A设备（主机），而检测到ID引脚浮空的设备则认为是B设备（外设）。自"http://baike.c114.net/view.asp?USB%20OTG"
3), 800x480屏.
4), 确认随机附件.

17:47 2009-11-4
VC1600, VC0882, VC0718, storage, sdio, LLI问题讨论, pxamci.c
参考Linux2.6.27 driver/mmc/host/pxamci.c(MMC Controller Interface, PXA mmc/sd 模块)
1, host->sg_cpu = dma_alloc_coherent(&pdev->dev, PAGE_SIZE, &host->sg_dma, GFP_KERNEL); 分配连续地址给LLI链表用的.
dma_alloc_coherent会返回虚拟地址给sg_cpu, 物理地址给sg_dma
2, pxamci_setup_data: 会把memory不连续区域的首地址和长度给"host->sg_cpu"
dma_map_sg函数感觉是把不连续memory区域的每个首地址给sg, 但没看到长度. 
链表生成后, 把LLI表物理首地址写入寄存器并开启dma:
	DDADR(host->dma) = host->sg_dma;
	DCSR(host->dma) = DCSR_RUN;
3, 问题:
从PXA寄存器看, 是这样用的LLI. 但是我没有完全看懂, 希望确认Linux是如何得到不连续memory的地址和长度的. 

12:50 2009-11-5
时间管理
0, 12:35-
(上午体检)

1, 计划
1), aiguo邮件, 瑞泰minilcde板子 <DOME> 还需要找aiguo确认.
2), clkrst review, 切频, lock sdrc. <DONE> 
3), arm debug必须整理, 要不该忘了. 
4), 之前的rvdebug调试暂停. 发个进展情况. <DONE>
future), 体检报告会寄到公司, 关注结果.<转移>

2, 执行;
1), 12:50-13:02 arm debug进展, 见"10:50 2009-11-4"
2), 13:15-13:54 VC0718 clkrst mas review.
3), 13:54-14:15 DuanLiHua电话讨论VC0882 sdio mas 0.3. LLI还是确定4个, 不支持PXA那种方式. 原因是目前VC0882中Module只能通过DMA访问AXI上的memory, 不能直接访问memory. 另外VC0882的sdio不支持mmc的stream模式. 
4), 14:51-16:03 VC0718 clkrst mas review 续. 重要疑问见"15:53 2009-11-5"
午休20'
5), -18:43 arm开发板.

15:53 2009-11-5
VC1600, VC0718, clkrst, mas review, 疑问: 
对"VCO Frequency (Fvco) 240MHz ~ 1200MHz"的疑问: 
这个频率范围是否是PLL和PLL divider都支持的? 830中PLL本身能在480-900MHz工作(根据据mas和databook), 但divider只支持480-672Mhz, 这对芯片验证和使用都造成一定的不便

16:16 2009-11-5
(11:28 2009-11-8)
VC1600, VC0882, VC0718, arm debug, arm1176, arm cortex-a8, arm公司Felix Liu, arm debug training笔记, 疑问
Felix Liu [Felix.Liu@arm.com]
评估板CD: "\\10.0.2.36\sqmshare\Document\ARM\VersatileFamilyCD_v3.7", 下文描述的目录都按默认安装目录描述. arm体系结构文档位于"36: \\10.0.2.36\sqmshare\Share\Linux\doc\arm soc\arm体系结构".
1, arm debug
1), 可以利用TRACE把系统运行过程输出. ARM SOC支持TRACE功能需要三个条件, arm core支持ETM, arm soc把ETM引到了padc, PCB连出ETM接口. 
2), CoreSight机制:
1), armv7引入的CoreSight机制可以支持系统运行中的debug, 从arm9e开始引入的monitor mode也可以支持不停止arm进行调试, 但是需要arm上的驻留程序.
CoreSight中的CTI(Cross Trigger Interface)和Cross Trigger Matrix用于多核调试, 例如同时停止arm和dsp.
Zhangjian: 从"DGI0012B_coresight_technology_r1p0_sdg"文档看, CoreSight机制中的DAP允许系统在不停止运行的情况下访问memory或debug寄存器且不需要arm上的驻留程序.
2), CoreSight可以通过JTAG直接把code下载到memory中, 速度提高5-10倍(据Felix Liu, 查找资料验证). 这时CoreSight的DAP直接通过bridge连接到AHB(通过AHB-AP).
Zhangjian: 调试方面可以参考两个文档"DDI0314H_coresight_components_trm.pdf", "DGI0012B_coresight_technology_r1p0_sdg.pdf". 前者介绍了CoreSight的各个组件, 后者介绍了CoreSight如何设计. 

2, arm architecture讨论
1), 为什么a8不支持TCM(Tight Coupled Memory)?
原来在arm926, arm1176等支持的TCM在cortex-a8中已经不再支持. 因为a8本身支持两级cache, 而且AXI支持128bit/64bit, 带宽很大. 另外a8频率最高能到GHz, 和sram连接很难保证timing. 
2), Felix提到a8有L2 controller, ram在片外. arm11只有L2 interface. 
Zhangjian疑问: 从a8 TRM看, 至少L2 data cache ram在片内. 需要进一步确认.
3), Felix提到a8的L2是统一不分指令和数据. 
zhangjian疑问: L2机制, 包括如何划分指令/数据区域等都不太理解. 

3, realview评估板软硬件环境:
1), realviewEB分底板(时钟40MHz), logic tile(xilinx FPGA)和core tile(arm1176 test chip). realviewEB供电是12v, realview ICE是5v, 二者接口一样, 注意别插错. 
realview ICE大约3500$, RVDS大约7500-10000$.
这比trace32, BDI, openocd等方案, 贵了几倍到几十倍. 
2), 安装"\\10.0.2.36\sqmshare\Document\ARM\VersatileFamilyCD_v3.7"的光盘后, "C:\Program Files\ARM\Versatile\EB_HBI0140\3.7\1"是realview EB的资料, 其中software\linux是Linux patch和编译好的u-boot, kernel映像; software\projects是测试程序. pcb目录有原理图, BOM等. 
3), 如何烧写logic tile的FPGA
使用jtag调试arm程序时需要把S1拨到off. 烧写logic tile的FPGA时把S1拨到ON. 
烧写具体过程见"DUI0411C_EB_RevD_UserGuide.pdf"p58
烧写程序, 配置文件和文档位于"C:\Program Files\ARM\Versatile\EB_HBI0140\3.7\1\boardfiles",  烧写工具文档是"progcards_rvi.pdf", logic tile范例有AN128(flash led), AN151(AXI device). 目录"C:\Program Files\ARM\Application_Notes\"
4), Realview ICE(RVI)驱动位于"C:\Program Files\ARM\RVI\Drivers\usb_driver\1.3\39\win_32-pentium", 如果PC机用过的USB设备过多, USB配置文件有问题, 可能无法正常安装驱动, 建议在比较"干净"的机器装. 

10:00 2009-11-6
时间管理
0, 9:50-

1, 计划:
1), arm debug总结;
2), Linux sd 代码分析.
3), 回复weiyunlong邮件, 功耗. 参考OMAP3530, 当时irq也提出过. <已取消>

2, 执行
1), 10:00-11:47 openocd-0.3.0
2), 14:30-14:48 openocd-0.3.0 续.
3), 14:48-16:08 与IC联调arm1176jtag, 见"15:26 2009-11-6"

10:55 2009-11-6
VC1600, VC0882, VC0718, arm debug, openocd-0.3.0
1, build
1), ./bootstrap #生成configure
2), ./configure --enable-parport  --enable-ft2232_ftd2xx  --with-ftd2xx-linux-tardir=../libftd2xx0.4.16
出错:
./.libs/libopenocd.a(ft2232.o): In function `ft2232_quit':
/home/zhangjian/openocd_ft2232/openocd/src/jtag/ft2232.c:2825: undefined reference to `FT_Close'
./.libs/libopenocd.a(ft2232.o): In function `signalyzer_h_ctrl_write':
/home/zhangjian/openocd_ft2232/openocd/src/jtag/ft2232.c:3145: undefined reference to `FT_WriteEE'
/home/zhangjian/openocd_ft2232/openocd/src/jtag/ft2232.c:3145: undefined reference to `FT_WriteEE'
/home/zhangjian/openocd_ft2232/openocd/src/jtag/ft2232.c:3145: undefined reference to `FT_WriteEE'
/home/zhangjian/openocd_ft2232/openocd/src/jtag/ft2232.c:3145: undefined reference to `FT_WriteEE'

2, (18:11 2009-11-6)
1), 安装libusb-0.1.12(./configure && make && make install), 开始用的libusb 1.x, 那个不行, 配置方式变了. 
其实从libftdi的configure也能看出: configure中检查是否大于0.1.7.
2), 安装libftdi-0.16
3), openocd:
configure总是提示libftdi无法build或运行. 于是实验configure中的代码. 发现是无法找到libftdi.so.1, 但是这个文件实际是存在的. 
checking Build & Link with libftdi...... configure: error: Cannot build & run test program using libftdi

15:26 2009-11-6
VC1600, VC0882, VC0718, arm1176 debug, 与IC联调arm1176jtag
1, RVDS4.0提示检查RVI和target连接.
查realviewEB的原理图与IC的原理图(from ARM)一致. 
但IC没有连接nSRST(Open collector system reset (bidirectional))和RTCK(Return TCK).
这两根线IC都没有引出.
2, IC咨询arm:
arm答复RTCK用于不指定CLK频率的情况, 如果CLK频率固定可以不接.
nSRST用于板子复位, 只要能保证板子正常复位, 这根线也可以不接. (13:26 2010-2-24)后来VC0882 cortex-a8是必须连接, 见"13:27 2010-2-24"."13:26 2010-2-24"end
arm说SPIDEN(Input Secure Privileged Invasive Debug Enable)在jtag调试时必须置一.
arm1176 TRM: 
SPIDEN=HIGH表示在所有Secure modes中都进行侵入式调试. 还指出如果不使用TrustZone feature, SPIDEN和SPNIDEN两个都需要拉高. 详见p654: 
SPIDEN The Secure Privileged Invasive Debug Enable input pin, SPIDEN, that
enables and disables invasive debug in the Secure world:
 If this input signal is HIGH, invasive debug is permitted in all
Secure modes. In this case invasive debug is permitted in Secure
User mode, regardless value of SUIDEN bit.
 If this input signal is LOW, invasive debug is not permitted in any
Secure privileged mode. Invasive debug is permitted in Secure User
mode according to the SUIDEN bit.
For software systems that do not use any TrustZone security features, the
SPIDEN and SPNIDEN pins must be driven HIGH to enable debug by default.

10:06 2009-11-8
时间管理
0, 9:56-

1, 计划
1), arm debug 总结; 发总结的时候一并说明SPIDEN和SPNIDEN作用. <已取消>
2), Linux编译openocd 并实验调试arm1176. 
3), 打印s3c6410/TI OMAP3530资料.<DONE>
4), 周工作总结(含时间管理)
5), 查<转移>
(1), Linux进程优先级, 又忘了...
(2), arm FCSE(快速上下文切换)机制及其在Linux中的应用. 

2, 执行.
1), 10:10-10:28 计划
2), 10:28-11:30 arm debug总结. 
3), 午饭, 午休. 13:21-14:17
4), 15:30-16:36 arm debug总结 续. 完成. 
5), -17:04 邮件. 

15:59 2009-11-8
VC1600, VC0882, VC0718, arm cortex-a8学习, L2, \todo 解决疑问
"DDI0344J_cortex_a8_r3p2_trm_zhangjian.pdf": 
1, 需要软件保证L2中数据与memory的一致性
The L2 memory system does not support hardware cache coherency, therefore software intervention is required to maintain coherency in the system. TRM
 p328
2, "lockdown format C"是什么东西? 
support for lockdown format C
3, L2是四个word一个dirty bit, 一般的cache都是一个word一个dirty bit. 
The L2 cache incorporates a dirty bit per quadword to reduce AXI traffic.
eliminates unnecessary transfer of clean data on the AXI interface.

9:11 2009-11-9
时间管理
0, 9:00-21:15

1, 计划
1), 598 GE training <DONE>
2), dmac mas review(下午1点截止) <DONE>
3), 周工作总结(只能安排晚上了).<转移>
4), jtag进一步实验. <DONE>
5), VC0718的clkrst, pmu review. <转移>
clkrst: 切频时允许配置lock哪些memory. 

2, 执行
1), 9:10-9:45 邮件, TI OMAP3530整理
2), 9:45-11:10 Zhangpu GE. 小笔记本p17. \todo 查如何通过两次ROP实现alpha; 查如何通过ROP实现不规则图形的bitblt. 
3), 午饭, 午休;
4), 13:55-14:44 VC0882 DMAC mas review
5), 14:48-18:15 IC实验jtag; 实验新买的jlinkv8. 详见"18:16 2009-11-9"
6), 晚饭.
7), 19:26-19:39 计划.
8), 19:39-19:55 工作总结;
9), 19:55-21:01 和huangwei讨论cortex-a8 debug. 参见"20:11 2009-11-9"

9:39 2009-11-9
VC1600, VC0882, VC0718, arm cortex-a8, competitor, TI OMAP3530, \todo 疑问
1, TI OMAP3530是arm cortex-a8(L1+L2(需要确认L2是否在a8内部)+C64x DSP, 总线是L3, L4(似乎是sonic的, 待查). 
也就是说TI的arch是L1, L2, L3, L4四层的. L3支持64bit. 
2, 3530的CBB封装支持POP, 上面的引出的引脚下面也有对应的引脚. 从p191的figure1-4看, CBB中上面的只是类似pad的东西不是球. 
3, p197的table1-8, 1-9写出了如何查看芯片版本(ES1.0, 2.0, 3.0).

13:59 2009-11-9
VC1600, VC0882, memory, DMAC, mas review, 测试计划
1, Corner case:
1), DMAC是byte对齐的, AXI是64bit, 所以共有8x8=64种src_addr, dst_addr组合, 这些组合都要测到. 
2), 不同memory区域之间的dma也要测试, 包括rom<->ram间出错的问题. 测试要考虑marb映射到0x0和未映射两个情况. 

18:16 2009-11-9
VC1600, VC0882, VC0718, arm debug, arm1176, jlink, \todo
1, 下午配合IC实验arm11jtag, 仍然提示RVI connection问题, 如果用openocd可以看更清楚. 
2, 实验gdb+openocd+jlink可以正常连接, 可以读到寄存器.
3, 实验rvds4.0+RVI还是没有成功运行大程序. 
4, \todo
1), 实验新的jlink v8如何连接RVDS3.0: 估计是配置文件问题, 这个问题先看文档和网上资料, 凭感觉实验不太可能有结果. 
2), 实验RVDS4.0跑大程序(包括Linux). 目前还没有成功过, 这个很重要. 一方面是RVDS4.0可用性, 另一方面是将来用同样程序测试jtag的可用性. 
3), 继续配合实验硬件arm11的jtag, 如果可以, 进一步跑小程序. 
这方面希望用openocd(windows), 这样可以更清楚的定位错误. 
4), 这周仍然要继续实验编译openocd-0.3.0(parport, ftdi2232, jlink). 这个是长线的, 将来用a8时openocd肯定是要给大家用的. 

19:41 2009-11-9
(9:54 2009-11-10)
项目, 工作总结, 周工作总结, 10月工作总结, 11月工作总结, 2009年10月26日-2009年11月1日, 2009年11月2日-2009年11月8日, 本周工作计划2009年11月9日-2009年11月15日
1, 周总结2009年10月26日-2009年11月1日+2009年11月2日-2009年11月8日
1), VC1600, 主要工作是arm debug和了解cortex-a8
(1), debugger: 实验arm11, cortex-a8调试环境. 
A, 目前已经可以在RVDS4.0下通过RVI调试arm11的小程序, 可以用arm-gdb通过openocd+jlink(v8)读写arm11寄存器(后者是11月10日进展).
B, IC arm11仍然无法连接到RVDS, 提示RVI connection问题. 
(2), mas review: VC0882 sdio(结束), DMAC; VC0718 clkrst 第一轮. 
(3), a8 TRM看完了第二章(Programming Model), 其余章节根据需要逐步在看. 
a8性能比较. "\\10.0.2.36\sqmshare\Share\Linux\doc\arm soc\Cortex-a8 arm11 arm9 xscale powerpc 嵌入式处理器实测性能.pdf"
(4), arm11, arm cortex-a8芯片调查和开发板选型(with LiaoZhiCheng). 2天
选型详细记录已上传到"\\10.0.2.36\sqmshare\Share\Linux\doc\arm soc\board\现有arm1176和cortex-a8开发板调查及售价.txt"

2), sd代码整理和Linux移植, 1.5天
1), 阅读sdio simplified spec, 写sd代码整理ppt, 基本思路有了.
2), 了解Linux对mmc/sd/sdio的支持. 分析Linux sdio代码

3), training, 最近两周有三次training, 加上自己整理的时间共17小时:
(1), 11月2日 linchuan 830&816 memory总结, 6小时. 资料见YangZuoXing 2009-10-29 9:59邮件. 
(2), 11月3日 arm debug training. arm公司Felix Liu介绍了arm debug和realviewEB开发板. 我总结了笔记: "\\10.0.2.36\sqmshare\Share\Linux\doc\arm soc\arm体系结构\arm debug training(2009-11-3).txt". 7小时. 
(3), 11月4日 team traning(LiaoZhiCheng Cache introduction, ShuYu Dragon, LiDongLiang 598 Development Environment). 4小时. 

5), 2009年11月5日上午半天体检. 

6), 其它:
(1), c语言利用函数指针(blx指令)跳转到任意地址, 见"21:04 2009-10-29"

2, 本周工作计划: 
1), VC1600:
(1), 实验RVDS4.0+RVI, openocd+jlink/ftdi2232调试大程序. 
(2), VC0718 clkrst, pmu. 
(3), 如果TI OMAP3530和s3c6410板子回来, 实验软件(winCE, Linux, android等)和调试. 
(4), VC1600的环境: 暂无计划. 
2), sd代码整理: 本周暂时无计划.
3), Linux移植: 本周计划继续整理Linux timer. 否则时间太长了容易忘. 

3, 其它计划:
(1), Linux进程优先级, 又忘了...
(2), arm FCSE(快速上下文切换)机制及其在Linux中的应用. 
(3), 体检报告会寄到公司, 关注结果.

20:11 2009-11-9
VC1600, VC0882, VC0718, arm debug, cortex-a8, CoreSight, 与HuangWei讨论
1, TRACE输出可以通过TPIU或ETB, ETB再通过SWD输出. TRM p579, p581.
Trace is output over the ATB trace bus. This is then either exported through the Trace Port Interface Unit (TPIU), or stored in the ETB. 
The ETM compresses the trace information and outputs it to the AMBA 3 ATB
interface. The ETM can then either:
  Export the trace information through a narrow trace port. An external Trace Port Analyzer (TPA) captures the trace information as Figure 14-1 on page 14-4
shows.
  Write the trace information directly to an on-chip Embedded Trace Buffer (ETB). The trace is read out at low speed using the JTAG or Serial Wire interface when the trace capture is complete as Figure 14-1 on page 14-4 shows.

2, 讨论中提到的直接访问memory的方式(AHB-AP), 它包括在DAP中, 不是一个独立的component.
另外"DGI0012B_coresight_technology_r1p0_sdg"2.3有四个CoreSight设计例子. 

3, 关于实时调试:
The DAP provides real-time access for the debugger without halting the processor to: 
  AMBA system memory and peripheral registers
  All debug configuration registers.

9:40 2009-11-10
时间管理
0, 9:35-21:20

1, 计划
1), 找小段确认usb线: A转miniA<DONE>
2), 周工作总结.<DONE>
3), VC0718的clkrst<DONE>, pmu review. 
clkrst: 切频时允许配置lock哪些memory. <DONE>
4), jtag: rvds4.0运行大程序; eclipse运行大程序. 

2, 执行
1), 9:54-11:38 周工作总结
2), 午饭. 
3), 12:27-14:40 jlink. 见"12:37 2009-11-10"
4), 30' 找usb miniA转A母. 
5), 休息: 20'
6), 了解公司概况: 20'
7), 16:56-17:59 周工作总结, 续. 两周总结用的时间比较多. 
8), 18:04-18:40 VC0718 Clkrst mas review.
中间休息15'
9), 晚饭;
10), 20:00-20:47 VC0718 Clkrst mas review, 遗留问题. "18:08 2009-11-10"
11), 20:50-21:16 整理这两天jlink使用方法为"jlinkv8 user guide.doc", 位置: "\\10.0.2.36\sqmshare\Share\Linux\doc\arm soc\jtag_debugger"

3, 明日计划:
1), VC0718 pmu mas review;
2), 编译openocd(ftdi2232)实验. 

12:37 2009-11-10
VC1600, VC0882, VC0718, arm debug, jlink, 使用文档
注: Word版本"Jlink v8 use guide"初稿(v0.1) release: 
已上传到: “\\10.0.2.36\sqmshare\Share\Linux\doc\arm soc\jtag_debugger”
见ZhangJian邮件"答复: jlink 使用技巧!!! 务必要看"20091110_2117

0, jlinkv8, 主芯片: AT91sam7s64. ALVC164245x2(245是缓冲器).
1, 安装jlink4.08安装包. 安装后插入jlink, 驱动位于"安装目录\JLinkARM_V408l\USBDriver\x86", 默认安装目录是"C:\Program Files\SEGGER".

2, 测试jlink驱动:
运行「开始」菜单->程序->SEGGER->J-Link ARM V4.08l->J-Link Commander, 连接830/816时会显示: 
SEGGER J-Link Commander V4.08l ('?' for help)
Compiled Sep 17 2009 09:42:18
DLL version V4.08l, compiled Sep 17 2009 09:41:55
Firmware: J-Link ARM V8 compiled Aug 18 2009 09:06:07
Hardware: V8.00
S/N : 158000502
Feature(s) : RDI,FlashDL,FlashBP,JFlash,GDBFull
VTarget = 2.886V
Info: TotalIRLen = 4, IRPrint = 0x01
Info: CP15.0.0: 0x41069265: ARM, Architecure 5TEJ
Info: CP15.0.1: 0x1D152152: ICache: 16kB (4*128*32), DCache: 16kB (4*128*32)
Info: Cache type: Separate, Write-back, Format C (WT supported)
Found 1 JTAG device, Total IRLen = 4:
 #0 Id: 0x07926F0F, IRLen:  4, IRPrint: 0x0 ARM926EJ-S Core
Found ARM with core Id 0x07926F0F (ARM9)
RTCK reaction time is approx. 126ns
Using adaptive clocking instead of fixed JTAG speed.
J-Link>
可以看到target电压是2.886v, 找到一个jtag device(id是0x07926F0F, 926说明是arm926), 如果不使用RVDS, 可能需要根据扫描出的jtag device信息写配置文件. 

3, rvds中添加jlink
1), Connection Control中选择"Add/Remove/Edit device";
2), 弹出的"RDI target List"中选择"ADD DLL"
3), 选择"安装目录\JLinkARM_V408l\JLinkRDI.dll", 
4), configure: 选中jlinkRDI.dll后, 右键单击选择"Configure Device info", jlink会自动配置. 配置后确定退出, 此时jlinkRDI.dll下会出现arm79_0选项. 
5), 双击"arm79_0"连接. 

4, jlink RDI是否支持arm11?
1), jlink RDI提到: "Any core supported by J-Link ARM (ARM7 / ARM9)", 没有写arm11. 
RVDS的RDI是否支持arm11呢? 如果不支持, 那么RVDS2.2就没法支持arm11了. 
2), 查keil的uvision只支持arm7,9, cortex-Mx, 没写支持arm11. 
参考: "http://www.keil.com/arm/mdk.asp"
3), IAR支持(但并不是通过RDI接口支持的): 
License Number:
9614-135-075-5679
License key: 
1VCZBWA3JR3FFBMNXHIY5CGUAZTQS9K4QF9QHBW3Z6I3R47EOE0OXGTRBNLN1B7XEEL3BTFJLU2W4AXQG53FZMDSZYDBDXS5HLCUXAYH25PXABGNT1O1AKMDYIRTWAZJDBNZLKRKANL0IE22BS44F1KK4CF5F2UMRQQAUWJN3MFODRRB# Feature: EWARM-EV Version: 17_WIN Temporary license (Licno:9614-135-075-5679), valid 30 days after first use, expires 2009-12-11
使用参考: http://www.icdev.com.cn/?474/viewspace-3940.html, "用 IAR C/C++ For ARM 编写嵌入式应用的启动细节"

5, jlink使用问题:
ZhangPu邮件"jlink 使用技巧!!! 务必要看"20091110_1622
hi all,
使用时发现有以下技巧与大家分享!
1,如果rvds连接时等待,处于假死状态,可直接reset板子,使jlink断开,此时rvds恢复操作,然后请断掉rvds的链接重新启动rvds再试!(注意先断掉rvds的连接,防止重启rvds后自动重新连接已经失效的jlink)
2,如果发现经常连不上cpu,请讲jlink的工作速度调低!方法如附件图片,按顺序浏览!(调整后,保存并重新启动rvds使之有效)

zhangjian: 
1), jlink RDI conf中可以选择速度, 图片位置: 'H:\work_software\software\DevelopmentTools\jlink\技巧ByZhangPu"
2), 目前是clk降速到2M. 怀疑是830板子布的不好造成的. \todo 实验RealviewEB板子, 看看能否跑到10M, 如果可以, 将来做板子时需要提醒. 

6, Zhanjian, rvdebugger1.8对jlinkv8支持不好. 
大家注意: rvdebugger1.8可能对jlinkv8支持不好:  用rvdebugger1.8调试S3c44b0x时, 接管正常, 但是下载映像时提示memory有问题. 
推荐使用RVDS3.0. 
另外AXD可以正常使用: 配置方式和rvdebugger一样: 设置clock为2M, no reset. 

14:39 2009-11-10
VC1600, VC0882, VC0718, arm开发板, usb otg线, miniA, miniB, DuanXiaoHui
图片位置: "\\10.0.2.36\sqmshare\Share\Linux\doc\usb"
1, 上次请购的A母转miniA线如下图(附链接), 这根线现在需要购买两根,谢谢.
http://item.taobao.com/auction/item_detail-0db1-f07228173b121d48b5e9278f6242f130.htm?cm_cat=0
2, 附miniB和miniA比较
http://item.taobao.com/auction/item_detail-0db1-da4a1400a2aa333903adc6ee835a7ae9.htm?cm_cat=0
miniA转miniB
3, (13:04 2010-3-16)方口是B口, 扁口是A口. miniA比miniB腰粗. 

15:48 2009-11-10
VC0830, SV, 量产, PM5926HD, 4.3"(800X480)高清屏+VC0832+16X16DDR+单贴INTEL FLASH 8G+TF CARD+TV OUT(CH7026B-720P)
http://mp3.yesky.com/180/9260180.shtml
随身劲舞 爱国者MP5月光宝盒PM5926HD全评测

16:26 2009-11-10
公司, 同事资料, CFO David Tang, CEO Zhonghan Deng 
1, Tang, David: 在纽约大学商学院毕业后, 在美林银行做equity research analyst.
自: http://www.reuters.com/finance/stocks/officerProfile?symbol=VIMC.O&officerId=1226744
Brief Biography
Mr. David Tang has been appointed as Chief Financial Officer and Vice President of Vimicro International Corporation effective August 1, 2008. Prior to joining Vimicro, Mr. Tang served as the Chief Financial Officer of CNinsure Inc. a NASDAQ listed company operating in China. Prior to CNinsure, Tang has also served as the Chief Financial Officer in two other companies, including: IRICO Group, a Hong Kong and China listed company, and Chinasoft International, a Hong Kong listed company. Prior to those positions, he was an equity research analyst at Merrill Lynch & Co. in New York. Mr. Tang received his MBA degree from Stern School of Business, New York University.

2, Deng, Zhonghan: 中星微董事局主席和CEO, 工业和信息化部顾问, 清华大学电子工程学院访问学者, Sohu.com的董事和审计委员会成员(audit committee member).
http://www.reuters.com/finance/stocks/officerProfile?symbol=VIMC.O&officerId=1010772z
Deng, Zhonghan 
Brief Biography
Dr. Zhonghan Deng is a co-founder of Vimicro International Corporation and currently serves as the Chairman of the Board and Chief Executive Officer. Dr. Deng currently serves as an advisor to the Ministry of Information Industry and the Ministry of Science and Technology of China and a visiting professor at the Department of Electrical Engineering at Tsinghua University. He also serves as a board member and audit committee member of Sohu.com Inc. Dr. Deng has received numerous awards for his achievements, including the National Medal for Outstanding Overseas Returnee in 2003, and the National First Class Award for Science and Technology in 2005, both of which were presented by the President of China, Hu Jintao. Prior to joining us in January 2002, Dr. Deng co-founded Pixim, Inc. in Silicon Valley in 1998. Prior to that, Dr. Deng was a senior researcher for IBM at the T.J. Watson Research Center in Yorktown Heights, New York. Dr. Deng received his Ph.D. degree in Electrical Engineering and Computer Science, M.S. degree in Economics and M.S. degree in Physics, all from the University of California at Berkeley.

18:08 2009-11-10
VC1600, VC0718, clkrst, mas review, 下一阶段review check内容
1, 支持PLL1, PLL2, XCLK之间任意切换:
需要check寄存器是否支持.

20:49 2009-11-10
VC1600, VC0718, timer, mas review, 注意
wdt有TMR_W1和TMR_W2两个timeout, 两个timer顺序执行, 都timeout后cpu才会重启. 

9:43 2009-11-11
时间管理
0, 9:35-

1, 计划
1), VC0718 pmu mas review; 上午.<DONE>
2), 编译openocd(ftdi2232)实验. 下午. 希望今天试通, 下次与IC联调时可以用openocd, 这样能更准确定位错误. 
3), 希望每天有一个小时看arm, 一个小时看Linux code或coding exercise. 
4), BGA181开icache, dcache, 映射mmu.<DONE>

2, 执行
1), 杂;
2), 9:48-10:34 VC0718 pmu mas review.
3), 10:35-11:31 VC0830 sdio 代码整理.
4), 午饭, 休息.
5), 13:30- openocd+ftdi2232
(14:50-15:40面试.)
6), 17:00-18:17 VC0830 sdio 代码整理讨论. \todo 整理记录. 先移植到Linux再剥离. 
7), 晚饭, 19:09-19:52 休息;
8), 19:53-20:21 mingW
9), 20:21-21:13 openocd+ftdi2232, 续.

10:12 2009-11-11
VC1600, VC0718, mas review, pmu
1, 疑问, 问dongliang
1), 为什么poweroff时软件要执行wfi指令? 保证arm不再执行? 
2, VC0718/VC0728中由于没有sleep状态, 所以power domain只有core domain, 没有VC0830的pmu domain. VC0764有sleep状态, 所以有pmu domain和core domain. 
3, VC0718没有rtc. 

14:38 2009-11-11
VC1600, VC0882, VC0718, arm debug, openocd, ftdi2232, Linux/Windows(mingw)编译使用; 总结, 文档
1, 把/usr/local/lib的ftdi库复制到/usr/lib下, 终于configure成功, 按理说应该改配置文件或环境变量的. 这里偷懒了. 
[zhangjian@IC-2 openocd]$ ./configure --enable-parport  --enable-ft2232_libftdi --enable-jlink
2, 编译后
1), openocd+jilnk执行一直提示有错, 有了用sudo执行就可以了. 
2), openocd+ftdi2232仍然不行. 重启. 后来发现是设备名字也要对应. 

3, (20:31 2009-11-11)
1), Linux中插入ftdi2232后在usbfs中可以看到: 
cat /proc/bus/usb/devices
T:  Bus=02 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  9 Spd=12  MxCh= 0
D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
P:  Vendor=1457 ProdID=5118 Rev= 5.00
S:  Manufacturer=www.100ask.net
S:  Product=USB<=>JTAG&RS232
C:* #Ifs= 2 Cfg#= 1 Atr=80 MxPwr=100mA
I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
E:  Ad=81(I) Atr=02(Bulk) MxPS=  64 Ivl=0ms
E:  Ad=02(O) Atr=02(Bulk) MxPS=  64 Ivl=0ms
I:* If#= 1 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=ff Driver=ftdi_sio
E:  Ad=83(I) Atr=02(Bulk) MxPS=  64 Ivl=0ms
E:  Ad=04(O) Atr=02(Bulk) MxPS=  64 Ivl=0ms

2), 修改interface配置文件:
[dec@localhost tcl]$ cat interface/100askjtag.cfg 
#
# 100ask jtag
#

interface ft2232
ft2232_device_desc "USB<=>JTAG&RS232"
ft2232_layout jtagkey
ft2232_vid_pid 0x1457 0x5118

3), ftdi2232连接arm11有问题. 一是扫描的id不对. 现在是6MHz速度, 怀疑是速度太快了. 二是jtag与板子供电, 这样会有问题. 
(1), (10:11 2009-11-12)
切断两根电源线. 仍然不行, 似乎又改善. 有时能扫出是0x07f76f1f(应该是0x07b7bf0f). 
(2), 降低速度, 降到1Mhz时比较稳定(jtag_rclk): 
set  _CHIPNAME pb1176
set  _ENDIAN little
set _CPUTAPID 0x07b76f0f

jtag_rclk 1000

jtag newtap $_CHIPNAME cpu  -irlen 5 -ircapture 0x1 -irmask 0x1f -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME arm11 -endian $_ENDIAN  -chain-position $_TARGETNAME -variant arm1176

#jtag_nsrst_delay 500
#jtag_ntrst_delay 500
jtag_nsrst_delay 1000
jtag_ntrst_delay 1000

#reset configuration
reset_config trst_and_srst
但是用openocd telnet看到的寄存器时有些和gdb看到的不一样. 不一定有问题. 也许是正好操作了某些寄存器. 到底ftdi2232能不能用, 还是得看下载映像. 

3, (13:25 2009-11-12)windows下编译openocd
1), 下载
libusb
http://sourceforge.net/projects/libusb-win32/
mingW下工具下载, 自: "http://topic.csdn.net/t/20050915/17/4273295.html"
http://sourceforge.net/projects/mingw-install/files/
ftdi2232 windows driver下载: 
http://www.ftdichip.com/Drivers/D2XX.htm

4, 
1), target\vc0830.cfg

set  _CHIPNAME vc0830
set  _ENDIAN little
set _CPUTAPID 0x07926f0f

#jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0xE -irmask 0x0f -expected-id $_CPUTAPID
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0x0f -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME arm926ejs -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm926ejs

reset_config trst_and_srst

2), openocd -f interface/100askjtag.cfg -f target/vc0830.cfg -c init -c reset 
Linux下需要root权限, 否则无法访问设备. 
映像位置: "D:\work\VC0882\代码和映像\20091112\openocd0.3.0_win"

10:11 2009-11-12
时间管理
0, 9:41-18:40

1, 计划
1), 问小段板子进展.
2), BGA181开icache, dcache, 映射mmu. 上午完成. 
3), openocd考虑windows下编译. 待jtag i/o信息. 
4), 可选: VC0830 Linux sdio移植. 计划下周四之前完成. 

2, 
1), 9:45-10:26 openocd+ftdi2232, 续. 阶段性成功, 可以正确连接并且读到寄存器. 参见"14:38 2009-11-11".
2), 10:27-11:17 IC联调arm11 debug. 见"11:18 2009-11-12"
3), 午饭. 
4), 12:06-15:xx windows下编译openocd
(13:53-14:03午休)
5), -16:00+12'(整理发信) 与IC联调arm11 debug.
6), 16:00-17:08 Linux SPI简单分析, 见"16:37 2009-11-12"
7), 17:08-18:18  windows下编译openocd通过, 在vc0830上下载代码并运行成功, 似乎不太稳定. 参见"14:38 2009-11-11"
8), 领了两根miniA转A母线, 

3, 明日计划:
1), 下午: 写一个最小的程序. 32k以内. 
2), BGA181 cache mmu.
3), clkrst mas review

11:18 2009-11-12
VC1600, VC0882, VC0718, arm1176 debug, 与IC联调arm11
1, 查连通性: 发现TCK不通;
2, 与ucf对应, 发现连线不对.
3, 修正后, IC发现控制arm11的FPGA过热, 电压从5.0v拉到了低于4v, 电流2.75A. 
4, 目前IC在查板子, Jlink已留给IC(已说明使用方法).
5, 下午进展:
用逻辑分析仪抓数据, 发现TCK, TMS, TDI都有翻转, 只有TDO无变化. 
6, IC本来计划在FPGA内部抓JTAG数据并比较, 后来IC发现是jtag连线错误, 上午联的时候数错了. 调整连线后jlink可以正确读到ID. rvds4.0可以正常扫描到设备并连接(但怀疑是飞线问题造成1M clock访问也不稳定(默认是10M), 目前是20k clock). 
7, 尝试memory读写. sram简单读写正常, ddr访问有问题.
AXI上的codec访问ddr是正常的, 说明ddr本身正常. 经IC找ZhouChunLiang分析, 发现arm访问sram和ddr不是一个通路. ddr问题IC会进一步查. 
8, 实验sram运行程序: fail.
程序是在arm realviewEB 板子运行正常的程序, 利用了svc和semihost. 
讨论发现, IC其实对sram没有完整验证过. 
9, 为了便于debug, IC会先改进JTAG连接, 这样我们调试程序会方便很多. 
10, (17:48 2009-11-12)
后面发现sram可能是32k的, 所以有问题. 

16:37 2009-11-12
Linux移植, bus, SPI, Linux SPI简单分析
1, Linux SPI对上的传输接口主要有: spi_write_then_read()和spi_sync().
1), spi_write_then_read是先读后写的半双工模式通过spi_sync()实现. spi_sync()支持全双工, 半双工. 具体如何区分未看. 
2), 块读写使用方法可以参考"driver/mmc/host/mmc_spi.c"
mmc_spi_request()负责处理kernel的requst(命令或数据), 最终这些命令会调用"spi_sync()"

2, spi_sync()最终会调用transfer函数. 初步看transfer函数对是否使用DMA有不同处理: 
1), 使用DMA的情况: queue_work(pump_messages) -> tasklet_schedule
似乎是通过rx_dma, tx_dma是否为空表示读或写的. 
2), 不使用DMA的情况通过bitbang实现. 具体如何与芯片结合未看. 

3, 没有看到利用设备文件直接操作SPI. 

9:35 2009-11-13
时间管理
0, 9:32-22:32

1, 计划
\todo 找小段领板子时, 提醒北京瑞泰会送一个miniA转A母的转接板. <DONE>
1), arm cortex-a8 intruction and 笔记. <DONE>有疑问需要进一步确认.
2), BGA181 cache mmu.
3), clkrst mas review. <DONE>
4), 与100ask提供的代码比较稳定性. 实验arm11
5), 下午: 写一个最小的程序. 32k以内. 

2, 执行
1), 9:42-10:00 arm arch回顾.
2), 10:00-12:09 arm cortex-a8 introduction by arm corp.
3), 午饭. 12:59-13:33 午休
4), 13:33-14:32 vc0718 clkrst mas review, 0.26时我看了两次, 注意到时的绩效是如何评价的. 
5), 14:54-16:40 arm cortex-a8 introduction notes
(中间休息30')
6), 17:20-22:27 arm11开发板. 
(含晚饭, 休息 2小时)

14:22 2009-11-13
VC1600, VC0718, VC0830, clkrst, clkswitch, clkrst mas review, 疑问<DONE>
1, divider的计算方法<DONE: 笔误>: 
718目前是" (*_cyc_h+1*_cyc_l+1)", 但830/816都是 (*_cyc_h+1*_cyc_l+2). 能否解释一下这样修改的原因. *_cyc_h=*_cyc_l时是否占空比是1:1呢? 
2, 现在718中gate bit有些在module_clk_config, 有些在统一的寄存器中(例如apb_clk_gtx). 想了解一下这样分开有什么好处? <DONE>会放在open issue, 需要进一步讨论. 
在830中和其它芯片中一般是统一在某几个寄存器中. 这样软件容易实现. 
3, DLX和PMX在5.1节中都支持配置到xclk, 这里没有, 另外这里0表示pll2和但前面0表示xclk, 这样软件使用会不方面. DLX和PMX就是不支持在xclk下使用. 

14:54 2009-11-13
(13:44 2009-11-16)
VC1600, VC0882, VC0718, arm architecture, \todo
希望能在讲一次a8内部的东西.
1, arm进军smart book, with 高通/博通(待查). 
smart book特点:
1), 更强调用户体验. 
2), OS: Linux;
3), 互联网.
4), 针对女性, 学生等人群的facebook, youtube等应用. 
5), frequency: 1G, 目前65nm, 会逐渐做45nm. 

2, cortex-a8
介绍用包括了cortex-a8与arm11的比较. 
1), 频率, 性能, 功耗
65nm LP(Low Power)工艺 
            cortex-a8   arm11
worse case  500Mhz      400Mhz
DMIPS       2.0         1.1 or 1.2 (\todo 找arm官网资料确认)
另: IC找到的资料TCMC能把arm11做到800Mhz(这个显然不是最坏情况), a8是500Mhz. 
2), thumb-2 hybrid 16-32bit instruction set. 这样代码密度大, 意味这cache命中率高了.  
zhangjian: gcc参数"-mthumb"选择thumb还是thumb-2取决于"-mcpu=name"或"-march=name"的选择. \todo 实验. 
3), NEON
(1), NEON 与 cache. (忘了记录结果).
(2), 代码编写方式:
如果arm和neon指令混在一起, 可能会映像arm效率. 建议是arm和neon指令分块写. 
(3), How to use NEON
A, Assembler
B, C Instrincs(\todo 查库): c function call interface to NEON. 只需要提供数据, 不用管寄存器.
C, 编译器自动生成. RVDS3.1 professional 或 arm gcc 2007Q3. 
zhangjian: B,C效率的差异可以从参考我之前找的a8与x86性能测试(17:30 2009-10-28 http://forum.linuxbj.com/node/9).
D, openmax. \todo 查

4), Jazelle RCT与ThumbEE
(1), ThumbEE可以加速脚本语言的执行, 包括java等(查).
(2), jazelle RCT和一般的java bytecode用不同的虚拟机. sun JRE with JIT, OpenJDK等三家公司都有(查这三家公司, 及性能). 
(3), 代码需要重新编译. 代码大小(或者是编译时间?)和性能对比, 数值是我根据柱状图读出的, 有可能有误差: 
        java bytecode thumbEE arm
编译    100%          110%    260-300%
性能上thumbEE与arm性能相差很少.
(4), java script:
firefox3.5支持. 在相同arm cortex-a8处理器运行, 比firefox3.0快很多倍. 

5), adobe flash
通过openMAX IL支持flash 10
1),         flash lite 3        flash play 10
cpu         arm9                arm11 or cortex-a8
float point VFP                 VFP
2d          ?                   openGL ES2.0

为什么没有用openVG? arm评估, 用openVG最多能提高20%, 有瓶颈. 所以用的openGL.
zhangjian: openGL可以用与2d加速? 这和我之前的理解有不同. 

6), openGL 对arm的支持.

3, Power Managememnt/IEM
IEM需要先看文档再整理. 需要了解大致原理. 

4, Debug/CoreSight
CoreSight DKA8

20:58 2009-11-13
VC1600, VC0882, VC0718, arm11, s3c6410, 开发板问题
1, otg接口焊成了miniB口. 
回复: 因为目前不支持otg host.
2, 核心板芯片字迹不清, 擦拭. 如果擦不干净可能是旧片. 
3, android1.5已经跑起来的. 屏不亮. 怀疑是driver有问题. 查看kernel文件确实没有群创7寸屏的驱动.
回复: 提供的android1.5映像, android0.9和ubuntu不支持7寸屏. Linux2.6.24的s3cfb_at070tn83.c是7寸屏驱动. \todo 移植到ubuntu和android0.9下. 

9:30 2009-11-16
时间管理
0, 9:15-21:25

1, 计划
1), arm cortex-a8 intruction and 笔记. <DONE>有疑问需要进一步确认.
2), BGA181 cache mmu.
3), s3c6410板子.
4), 本周总结. 
5), VC0882 uart review. 回顾uart移植时的问题: 发送中断. fifo.
6), 找之前memory邮件. pcddr dll关闭时的时序. 
7), VC1600 ddrc mas review(查为什么要返回前读memory保证稳定). <DONE>
8), VC1600 uart中断: 发送, 接收. fifo 半满, 半空. 
future1), 与100ask提供的代码比较稳定性. 实验arm11
future2), VC1600 clkrst mas review. 见"20:52 2009-11-16"

2, 执行
1), -9:55 杂, 邮件. DMAC mas review忘了回复(上周六截止). 
2), 10:04-11:27 BGA181 cache mmu 代码完成, 调试中. 
3), 午饭, 休息.
4), 13:23-13:50 arm 
5), 14:42-16:25 BGA181 cache mmu 调试. BGA282 pass, 晚上BGA181测试. 
6), -17:42 VC0882 ddrc, uart mas 讨论(和dashan, zhicheng).
7), 40'. VC1600 ddrc mas review 讨论 见"19:14 2009-11-16"
8), 40'. s3c6410开发板.
9), 晚饭. 
10) -21:24(30') s3c6410开发板: LCD驱动正确, 但是没有引导起文件系统. ubi出错. 

15:50 2009-11-16
VC1600, VC0718, module, mas review分工
Aiguo邮件"答复: 718 MAS location"20091116_1546
adc  VC0718\PADC  zhangjian
clkrst  VC0718\CLK_RST  zhangjian
pmu  VC0718\PMU  zhangjian
sdio  VC0882\SDIO  zhangjian
dmac VC0718\DMAC zhangjian

19:14 2009-11-16
VC1600, VC0882, VC0718, ddrc mas review, 同事信息, JinWenJie(ddrc), cuiyunfei(ddrc)
1, 向IC说明830遗留问题: sdrc_mode(mrs, emrs)无shadow寄存器, 切频时未发mrs, emrs命令. \todo 这个需要详细了解. 
2, 为什么要返回前读memory保证稳定:
查研发记录簿p114, 当时可能是因为dll开/关需要一个稳定时间, 有一个时间linchuan不确定, 所以通过读memory判断是否稳定. 联系JinWenJie, cuiyunfei.
ddr2 datasheet: enable: reset, 200cycle.
VC1600(synopsys) ddr phy: 支持lp ddr1(mobile ddr1)和ddr2
讨论后发现这个问题需要实验, 没那么简单. JinWenJie会提出这个问题, 看老大们如何处理.

20:52 2009-11-16
VC1600, VC0882, VC0718, clkrst mas review, 遗留问题
1, clkrst中配置cpu divier和cpu/bus ratio. 不再配置bus divider.
2, cpu_clk_config和mx_clk_config中都可以选择clock source. 难道cpu和bus的clock source可以不同? 

9:28 2009-11-17
时间管理
0, 9:11-18:44

1, 计划
1), BGA181 cache mmu. 看中午板子有没有空, 不行就明天. 
2), s3c6410板子. 上午. <DONE>
3), 本周总结. 中午. <DONE>
4), 问小段omap3530板子.<DONE>
5), VC0882 uart review. 回顾uart移植时的问题: 发送中断. fifo. uart中断: 发送, 接收. fifo 半满, 半空. 
6), 找之前memory邮件, 是发给linchuan等人的, 似乎是个大牛. pcddr dll关闭时的时序.<DONE>
future1), 与100ask提供的代码比较稳定性. 实验arm11
future2), arm cortex-a8 introduction 笔记疑问整理. 
future3), VC1600 clkrst mas review. 见"20:52 2009-11-16"

2, 执行
1), 20' Arm debug, DGI0012B_coresight_technology_r1p0_sdg, chapter2"CoreSight Components and Systems"
2), -9:46 杂, 邮件. 计划. 
3), 9:50-11:00 s3c6410板子.
4), 11:00-11:39 与ZHANG Shiqun讨论VC0718 clkrst mas review. 
5), 午饭.
6), 30' s3c6410板子, 续.
7), 13:59-14:50 面试. 
8), 14:50-15:47 ZhouDaShan sdram introduction.
9), 16:01-17:27  上周工作总结. 
10), 18:19-18:44 s3c6410板子, 续.
11), 20' Arm debug, DGI0012B_coresight_technology_r1p0_sdg, chapter2"CoreSight Components and Systems". DONE

3, 明日计划:
1), VC0882 DMAC mas review.

10:06 2009-11-17
VC1600, VC0882, VC0718, arm board, s3c6410, android1.5
1, 对比android1.5_4和android1.5_7启动代码, 发现两者"VID header offset"不同.
Creating 4 MTD partitions on "NAND 256MiB 3,3V 8-bit":
0x000000080000-0x000000100000 : "bootloader"
0x000000100000-0x000000600000 : "recovery"
0x000000600000-0x000000900000 : "kernel"
0x000000900000-0x000010000000 : "rootfs"
UBI: attaching mtd3 to ubi0
UBI: physical eraseblock size:   131072 bytes (128 KiB)
UBI: logical eraseblock size:    129024 bytes
UBI: smallest flash I/O unit:    2048
UBI: sub-page size:              512
UBI: VID header offset:          512 (aligned 512)
UBI: data offset:                2048
s3c-nand: ECC uncorrectable error detected
UBI: attached mtd3 to ubi0
UBI: MTD device name:            "rootfs"
UBI: MTD device size:            247 MiB
UBI: number of good PEBs:        1976
UBI: number of bad PEBs:         0
UBI: max. allowed volumes:       128
UBI: wear-leveling threshold:    4096
UBI: number of internal volumes: 1
UBI: number of user volumes:     1
UBI: available PEBs:             327
UBI: total number of reserved PEBs: 1649
UBI: number of PEBs reserved for bad PEB handling: 19
UBI: max/mean erase counter: 2/1
...
UBIFS: mounted UBI device 0, volume 0, name "rootfs"
UBIFS: file system size:   208373760 bytes (203490 KiB, 198 MiB, 1615 LEBs)
UBIFS: journal size:       10450944 bytes (10206 KiB, 9 MiB, 81 LEBs)
UBIFS: media format:       4 (latest is 4)
UBIFS: default compressor: lzo
UBIFS: reserved for root:  5182151 bytes (5060 KiB)
VFS: Mounted root (ubifs filesystem) on device 253:1.
对比昨天出错信息:
UBI: attaching mtd3 to ubi0
UBI: physical eraseblock size:   131072 bytes (128 KiB)
UBI: logical eraseblock size:    126976 bytes
UBI: smallest flash I/O unit:    2048
UBI: VID header offset:          2048 (aligned 2048)
UBI: data offset:                4096
s3c-nand: 1 bit error detected at byte 514, correcting from 0x49 to 0x4d...OK
UBI error: validate_ec_hdr: bad VID header offset 512, expected 2048
UBI error: validate_ec_hdr: bad EC header
UBI error: ubi_io_read_ec_hdr: validation failed for PEB 0
UBI error: ubi_init: cannot attach mtd3
UBI error: ubi_init: UBI error: cannot initialize UBI, error -22
发现主要是VID header offset设置不同造成的. 

16:07 2009-11-17
项目, 工作总结, 周工作总结, 11月工作总结, 上周工作总结2009年11月9日-2009年11月15日, 下周工作计划2009年11月16日-2009年11月22日, arm debug总结(DBGEN, SPIDEN, SPNIDEN).
1, 周总结2009年11月9日-2009年11月15日
1), VC1600: 
(1), mas review: VC0882 dmac(两次), VC0718 clkrst(两次), pmu.
(2), arm arch, debug: 回顾自己之前arm arch学习笔记, 与IC huangwei讨论arch debug.
(3), jtag: 
A, 自己编译了windows下的openocd, 可以正确连接830并load映像. openocd支持无MMU无cache的cortex-a8, 将来调试会用到. 
B, 公司arm11 jtag本周最终调通: 问题一是SPIDEN未置高, 一个是板级连接问题. 
详细情况: IC内部是DBGEN=1, SPIDEN=1, SPNIDEN=0. SPNIDEN这个信号按ARM11 TRM是说不用TrustZone时必须SPIDEN和SPNIDEN都高, 但是ZhouChunLiang问arm公司得到的答复是SPIDEN必须高, SPNIDEN随意. 板级连接需要把TCK下拉, 输入信号上拉(TDI, TMS). 
C, jlinkv8: 可以正确读出arm11寄存器. jlink使用文档"jlinkv8 user guide.doc", 位置: "\\10.0.2.36\sqmshare\Share\Linux\doc\arm soc\jtag_debugger"

2), sd代码整理和Linux移植
1), 讨论了830 sd代码整理思路, 整理分两步: 一, 830Linux支持sd卡; 二, 移植Linux协议栈到VC0830工程中. 

3), training(两次)
1), 598 GE training(11-9);
2), arm training(11-13), 笔记整理未完. 目前笔记: "\\10.0.2.36\sqmshare\Share\Linux\doc\arm soc\arm体系结构\Cortex\arm arch (cortex-a8) introduction 笔记.txt"

2, 计划
1), VC1600 mas review. review dma等模块. 同时参与uart和ddrc mas review(主要是确认是否解决之前830和Linux移植中遇到的问题). 
2), 实验s3c6410(arm11)和TI OMAP3530(cortex-a8)板子, 包括jtag, Linux/android, WinCE6.0等. 
3), 继续整理上周arm training笔记: 这里面包括继续阅读CoreSight Component文档)
4), 830 sdio代码整理和Linux移植笔记暂缓. 

3, 其它计划:
1), 查如何通过两次ROP实现alpha; 查如何通过ROP实现不规则图形的bitblt.  
2), jlinkv8和ftdi2232实验s3c6410. 
3), 确认s3c6410代码已加入kernel主线: 将来希望不同系统都用一套kernel代码. 
4), Linux进程优先级, 又忘了...
5), arm FCSE(快速上下文切换)机制及其在Linux中的应用. 
6), 体检报告会寄到公司, 关注结果.<DONE>

16:52 2009-11-17
VC1600, VC0882, VC0718, arm board, s3c6410, 相关资料, \todo
1, moviNand
http://www.samsung.com/global/business/semiconductor/products/fusionmemory/Products_MoviNAND.html
moviNAND = High-density MLC NAND Flash & MMC controller
2, ubi的基本概念和使用. 

9:33 2009-11-18
时间管理
0, 9:22-21:22

1, 计划
1), VC0882 DMAC mas review.<DONE>
2), 开发板: s3c6410和TI omap3530. <DONE>
3), BGA181 cache mmu. 晚上.<DONE>
4), 整理开发板学习内容.
future1), 与100ask提供的代码比较稳定性. 实验arm11.
future2), VC0882 uart review. 回顾uart移植时的问题: 发送中断. fifo. uart中断: 发送, 接收. fifo 半满, 半空. 参考YangZuoXing邮件"答复: UART MAS V0.20"20091118_1848. <转移>
future3), arm cortex-a8 introduction 笔记疑问整理. 
future4), VC1600 clkrst mas review. 见"20:52 2009-11-16"
future5), 开发板相关: moviNand, ubi的基本概念和使用. 
future6), 本周计划中待做. 见"16:07 2009-11-17"

2, 执行. 
1), -10:12 杂, 邮件, 打印. 
2), 10:13-10:18 JinWenjie电话. VC0830切频. VC0882中支持DDR2, DDR3. 其中DDR2最低125MHz, 标准DDR2最低是200MHz. 另外VC0882的PHY是买的, 没法像830自己的PHY那样调timing. 
3), 10:29-11:10 VC0882 DMAC mas review.
4), -11:33 OMAP3530板子
5), 午饭.
6), 12:09-13:33 OMAP3530板子
7), 13:35-16:05 面试(两个人).
8), 30'   OMAP3530板子
9), 17:36-18:08 OMAP3530板子
10), 晚饭.
11), 19:17-21:22 OMAP3530板子

10:31 2009-11-18
VC1600, VC0882, DMAC, mas review
1, M2M包括ddr, 内部ram, 和EMI设备. 
Memory-to-memory transfer. Supported memories are DDR SDRAM, internal SRAM, external dual port SRAM and external SRAM-like Devices such as Nor Flash or Ethernet Controller.
zhangjian；查EMI master mas, 只支持sram-like ethernet chip: "Ethernet Controller does not have a universal interface, VC1600 only supports sram-like interface"
2, 软件需要保证DMAC无人使用时才能使用.
3, 传输长度: 0表示16Mbyte, 

12:14 2009-11-18
(10:19 2009-11-20)
VC1600, VC0882, VC0718, arm board, TI OMAP3530
0, 资源:
除了装箱单的资源外, 还从LiXueLian处领了BELKIN的USB HUB(带电源), 从15层前台领了USB键盘, 鼠标. 

1, 问题:
1), OTG焊成了miniB, 应该是miniA. 
2), HDMI当时介绍的是有音频, 实际没有音频. 
3), 没有提供WinCE6.0的开发包和BSP. <DONE>: 自己从TI网站下载. 

2, 硬件:
0), 对电源和hub电源有要求, 需要用质量好的电源. 主电源质量不好可能会造成系统复位. 
1), OTG: 用赠送的转接口转为host(A母). 作为slave时直接插入slave线. 
2), 6x6键盘(1.8v)和camera接口(1.8v)在背面, connector没有焊接. 
3), uart: J12 的7，8 脚连接了OMAP3530 UART0 的CTS 和RTS，但中间有两个0 欧电阻隔离。默认出厂状态两个电阻不焊，如客户确需使用CTS 和RTS 信号，请自行焊接
4), jtag接口是1.8v的. 连接时注意电平. 我现在这个ftdi2232就是只支持1.8v的. 
5), 电源是5v, 内正外负.
6), 扩展接口(bus等)均为1.8v.

2, 软件. 
1), 有点挑卡, 我用kingston 2G的不行. 用panasonic 1G的就可以. 
2), MLO必须是第一个写入的问题. 
3), xloader是2级bootloader(1级是omap3530内部的rom boot, \todo 看romboot, 看起来是认识fat格式的). xloader和u-boot的架构很像. 
4), 最后定位到问题是
power_init_r()(u-boot/board/omap3/common/power.c)
	/* enable LED */
	byte = LEDBPWM | LEDAPWM | LEDBON | LEDAON;
	i2c_write(PWRMGT_ADDR_ID3, LEDEN, 1, &byte, 1);
注释后就没问题了. 

16:39 2009-11-18
VC1600, VC0882, pin list,
1, jtag: 几根线. 
2, ETM: 几根线.

9:37 2009-11-19
时间管理
0, 9:23-

1, 计划
1), OMAP3530开发板.
2), 上传部分文档. <转移>
3), "9:33 2009-11-18"计划. <转移>

2, 执行
1), 9:40-10:33 VC0882 regular meeting.
2), 10:33-10:44 VC0830 LQFP144量产. 
3), 10:44-21:08 OMAP3530板子.
(11:35-12:45 午饭, 午休). (含2小时去北京瑞泰换板子.), (18:00-19:39 晚饭, 休息)

3, 明日计划
1), 领东西:
(1), 找FuYaLi领带电源质量好的usb-hub.
(2), 领一个usb键盘和一个usb鼠标. 领一个miniB USB线. 
2), 优先实验RVI能否调试cortex-a8: 跳线顺序不同, 需要做转接口. 确认RVI是否支持1.8电平. 
3), 实验BeagleBoard映像能否直接用. 

14:43 2009-11-19
VC0598, 2d, ROP=Raster Operation

9:00 2009-11-20
时间管理
0, 8:48-18:34

1, 计划:
1), 领东西:
(1), 找FuYaLi领带电源质量好的usb-hub.<DONE>
(2), 领一个usb键盘和一个usb鼠标.<DONE>
2), 优先实验RVI能否调试cortex-a8: pin顺序不同, 需要做转接口. 确认RVI是否支持1.8电平(支持). 
3), 实验BeagleBoard映像能否直接用. 
4), 上传部分文档. <转移>
5), "9:33 2009-11-18"计划. <转移>
6), 本周总结, 下周计划 <转移>
7), VC0882 uart review. 回顾uart移植时的问题: 发送中断. fifo. uart中断: 发送, 接收. fifo 半满, 半空. 参考YangZuoXing邮件"答复: UART MAS V0.20"20091118_1848. <转移>

2, 执行
1), -9:02 杂, 邮件.
2), 9:03-11:14 OMAP3530板子:
3), 14:45-18:34 OMAP3530板子.

3, 周日计划:
1), 实验beagleboard映像. 编译winCE.
2), 工作总结. 

17:37 2009-11-20
同事信息, 马鸿开, 之前在威盛(和李京波师兄同组)
加盟中星微IC-1任IC设计工程师的马鸿开，直接向版图设计经理祝侃汇报工作。马鸿开先生毕业于中国科学院计算技术研究所计算机体系结构专业并获得硕士学位；加盟中星微之前曾在威盛电子任职；他的办公电话是：010-68948888-7307，Email:mahongkai@vimicro.com

9:03 2009-11-20
VC1600, VC0882, VC0718, arm SOC, cortex-a8, jtag, TI OMAP3530
1, 上午:
(1), jtag:
初步实验RVI可以找到OMAP3530, 需要选用OMAP3530平台. 似乎是RVI软件有冲突, 下午重新设置license. 
(2), BeagleBoard映像: 初步实验xloader, u-boot和kernel可以启动. 下午实验angstorm, android映像. 只要beagleboard映像可以跑肯定就有源码, 可以自己编译. 
2, 下午:
(1), jtag: 
A, 在598实验室机器实验, 830可以找到. cortex-a8找不到, 只能找到unknow. 用"select platform"选择OMAP3530, 可以显示一个扫描链的图. 是否连接3530都有此图. 连接a8时提示连接有问题或target no response. 
B, 查beagleboard资料, EMU0, EMU1需要控制. 
之前的unknown(0x0BA7E02F)是ICEPICK. 我把EMU0和EMU1都设为高或低仍然扫不到arm. 周一问瑞泰售后技术支持. 

(2), OMAP3530论坛:
http://group.ednchina.com/2142/

9:37 2009-11-23
VC1600, VC0882, VC0718, arm board, cortex-a8, TI OMAP3530, BeagleBoard
http://elinux.org/BeagleBoard#Android
BeagleBoard
1, u-boot从fat读取映像.
Using this u-boot prompt, you now can start kernel uImage stored on MMC card manually:
OMAP3 beagleboard.org # mmc init
OMAP3 beagleboard.org # fatload mmc 0:1 0x80000000 uimage
OMAP3 beagleboard.org # bootm

2, NEON support(使用NEON的四种方法): 
1), NEON is currently used by
* ffmpeg - libavcodec used by mplayer, omapfbplay, and many other linux applications
zhangjian: 可以看看ffmpeg是如何支持NEON的, 可能对VC0882 CODEC和VC0718 DSP有帮助.<转移>
* libpixman - used by X.org and Mozilla & Webkit browsers to render text and graphics
* Bluez - official Linux Bluetooth stack 
2), If you need the highest performance floating point on Cortex-A8, you need to use single precision and ensure the code uses the NEON vectorized instructions:
* use gcc with -ftree-vectorize (possibly modify source code to make it vector friendly)
* use NEON instrinsics (#include <arm_neon.h>, float32x2_t datatype and vmul_f32() etc)
* use NEON asm directly 
Keep in mind that mixing NEON and ARM load/stores can sometimes stall significantly. See this link for more info.
On Cortex-A9, there is a much higher performance floating point unit which can sustain 1 cycle/instr throughput, with low result latencies. 
3), further reading:
http://hardwarebug.org/2008/12/31/arm-neon-memory-hazards/
ARM-NEON memory hazards

3, BeagleBoardRecovery, beagleboard无法启动时如何处理: 
http://elinux.org/BeagleBoardRecovery

4, 2D/3D加速(SGX under Angstrom):
http://code.google.com/p/beagleboard/wiki/HowtoUseSGXunderAngstrom
Requires 16 bits-per-pixel framebuffer operation. To ensure this, add 'omapfb.video_mode=1024x768MR-16@60' to the bootargs command in your u-boot environment. Note that the -16 is what's important. The default is -24 which will not work. Other resolutions will work.

5, 如何选择stack封装(浏览器需要支持flash)
http://download.micron.com/webinar/Record_Stacking/player.html
Multi-Die Stacking: Choosing the Right Solution - Learn the advantages and disadvantages of four popular stacking solutions—SoC, SiP, PoP, and MCP-and let Micron’s experts help you pick the best technology for your application.

6, Linux is running on qemu-omap3
http://vm-kernel.org/blog/2008/12/15/linux-is-running-on-qemu-omap3/
kernel已经跑起来了, 外设"MMC/USB/audio/LCD display/keyboard emulation"正在进行中. 

7, 看beagleboard android移植版本(有四个, 找一个2D/3D和NEON都比较好的): 
Android For OMAP3 with Gstreamer Integration
http://labs.embinux.org/index.php/Android_For_OMAP3_with_Gstreamer_Integration#Android_port
(17:05 2009-11-30)暂时选定了rowboat, 实验成功, 路线图清晰, 而且有Mentor公司支持"17:05 2009-11-30"

8, 其它资源:
1), http://code.google.com/p/beagleboard/wiki/BeagleSourceCode
2), game: http://www.beaglegame.com/

9:58 2009-11-23
时间管理
0, 9:16-22:15

1, 计划<DONEor转移>
1), 瑞泰jtag, 
2), 实验beagleboard映像. 编译winCE.
3), 工作总结. 
4), 现在830量产中用shuyuautotest映像, 5月映像me可以跑但是现在映像me不能跑. 怀疑是me问题. 但是我切频代码也是6月修改的. 
5), 问大家有无收到arm信. 
6), 上传重要ARM文档和SOC文档到36新目录. 
7), VC0718 PMU mas review. 确认DMAC是否需要review.
future1), "9:37 2009-11-23"\todo.
future2), "9:33 2009-11-18"计划.
future3), 研究OMAP3530对2D的支持对zhangpu VC0882 2D会有较大帮助. 

2, 执行:
1), 15' + 9:30-10:32 beagleboard, 见"9:37 2009-11-23"
2), -11:15 jtag
3), -11:28 回复VC0882 debug邮件. 
4), 午饭, 休息;
5), 14:27-19:00 OMAP3530 android and winCE
6), 晚饭. 加班时间计算.
7), 20:27-22:15 OMAP3530 android and winCE 续.

17:22 2009-11-23
VC1600, VC0882, VC0718, arm cortex-a8, TI OMAP3530, BeagleBoard, Linux, WinCE6.0
1, 用下载的映像可以启动但是lcd只有登录没有启动桌面. 
2, 下拉4.7k, 上拉10k时仍然只有ICEPICK. \todo 明天减小电阻
3, android死活没反应, 回家下载源代码, 看详细文档. 
4, WinCE6.0
0), 安装
(1), vs2005和WinCE6.0
参考"36: board\UT-S3C6410-7A\使用手册\VS2005_WinCE6.0安装指导.pdf"
(2), BSP
36: SOC\beagleboard\WinCE6.0\S1SDKOMAP_DVSDK_OMAPWINCE_EA_06_12_03.exe, 这个包括BSP demo和source. 
安装后在"WINCE600_ROOT\PLATFORM\S1SDKOMAP_DVSDK_OMAPWINCE_EA_06_12_03"
参考"S1SDKOMAP_DVSDK_OMAPWINCE_EA_06_12_03\DVSDK\6.12.03\BSP\_Installation.txt"解包.
参考"S1SDKOMAP_DVSDK_OMAPWINCE_EA_06_12_03\DVSDK\6.12.03\Documentation\EVM3530 BSP User Guide.pdf"安装BSP, 系统配置可以参考"36: SOC\UT-S3C6410-7A\使用手册\UT-S3C6410开发板WinCE6.0软件使用手册.pdf"
(3), 2D/3D加入可以参考"WINCE600_ROOT\PLATFORM\S1SDKOMAP_DVSDK_OMAPWINCE_EA_06_12_03\DVSDK\6.12.03\PowerVR"文档.
(4), "WINCE600_ROOT\PLATFORM\S1SDKOMAP_DVSDK_OMAPWINCE_EA_06_12_03\DVSDK\6.12.03\Documentation"的Application notes说明了如何支持DVI, 3D等. 
1), 实验映像:
需要用sectedit在物理分区0x1be写入0x80, 否则无法启动(只显示40T).
映像"D:\Software\WINCE600\PLATFORM\S1SDKOMAP_BSPDEMO_OMAPWINCE_EA_06_12_03\Demo\6.12.03\Images\SD_NAND_DVI_720P", 烧写文档见目录readme.
WinCE会在"Hit space to enter configuration menu 3..."前后刷出第一个显示(四色田字格矩形色块), 目前sd读速度大约2MB/s, NK.bin需要二三十秒, 所以到"Download file type: 1"时并不是死机, 完整启动过程如下: 
40T
Texas Instruments Windows CE SD X-Loader for EVM 3530
Built Oct 21 2009 at 17:44:25
Version 6.12.03
open ebootsd.nb0 file
Init HW: controller RST
SDHC: command response timeout CTO!
MMC::MMCCommandResponse: MMCSendCommand error, command = 8
MMC::MMCCommandResponse: Command Response Error
read ebootsd.nb0 file
jumping to ebootsd image

Microsoft Windows CE Bootloader Common Library Version 1.4 Built Oct 15 2009 15:47:42

Texas Instruments Windows CE EBOOT for Mistral OMAP EVM, Built Oct 21 2009 at 17:44:10
EBOOT Version 1.1, BSP 6.12.03

TI OMAP3530 Version 0x2b7ae02f (ES2.1)
TPS659XX Version 0x10 (ES2.x)
System ready!
Preparing for download...
INFO: Predownload....
WARN: Boot config wasn't found, using defaults
INFO: SW4 boot setting: 0x0f

>>> Forcing cold boot (non-persistent registry and other data will be wiped) <<< 
Hit space to enter configuration menu 5...
Hit space to enter configuration menu 4...
Hit space to enter configuration menu 3...
Hit space to enter configuration menu 2...
Hit space to enter configuration menu 1...
Invalid Ethernet chip ID (0xffffffff)!
ERROR: Boot device driver Init call failed

--------------------------------------------------------------------------------
 Main Menu
--------------------------------------------------------------------------------
 [1] Show Current Settings
 [2] Select Boot Device
 [3] Select KITL (Debug) Device
 [4] Network Settings
 [5] SDCard Settings
 [6] Set Device ID
 [7] Save Settings
 [8] Flash Management
 [0] Exit and Continue

 Selection: 2

--------------------------------------------------------------------------------
 Select Boot Device
--------------------------------------------------------------------------------
 [1] LAN9115 MAC
 [2] USBFn RNDIS 
 [3] NK from SDCard FILE 
 [0] Exit and Continue

 Selection (actual LAN9115 MAC): 3
 Boot device set to NK from SDCard FILE 

--------------------------------------------------------------------------------
 Main Menu
--------------------------------------------------------------------------------
 [1] Show Current Settings
 [2] Select Boot Device
 [3] Select KITL (Debug) Device
 [4] Network Settings
 [5] SDCard Settings
 [6] Set Device ID
 [7] Save Settings
 [8] Flash Management
 [0] Exit and Continue

 Selection: 5

--------------------------------------------------------------------------------
 SDCard Settings
--------------------------------------------------------------------------------
 [1] Show Current Settings
 [2] Enter Filename
 [0] Exit and Continue

 Selection: 1

 SDCard:
  Filename:      "nk.bin"

--------------------------------------------------------------------------------
 SDCard Settings
--------------------------------------------------------------------------------
 [1] Show Current Settings
 [2] Enter Filename
 [0] Exit and Continue

 Selection: 0

--------------------------------------------------------------------------------
 Main Menu
--------------------------------------------------------------------------------
 [1] Show Current Settings
 [2] Select Boot Device
 [3] Select KITL (Debug) Device
 [4] Network Settings
 [5] SDCard Settings
 [6] Set Device ID
 [7] Save Settings
 [8] Flash Management
 [0] Exit and Continue

 Selection: 0
Init HW: controller RST
SDHC: command response timeout CTO!
MMC::MMCCommandResponse: MMCSendCommand error, command = 8
MMC::MMCCommandResponse: Command Response Error

BL_IMAGE_TYPE_BIN

Download file information:
-----------------------------------------------------------
[0]: Address=0x84001000  Length=0x01a0dab8  Save=0x80001000
-----------------------------------------------------------
Download file type: 1
rom_offset=0x0.
ImageStart = 0x84001000, ImageLength = 0x1A0DAB8, LaunchAddr = 0x8400B0AC

Completed file(s):
-------------------------------------------------------------------------------
[0]: Address=0x84001000  Length=0x1A0DAB8  Name="" Target=RAM
ROMHDR at Address 84001044h
Launch Windows CE image by jumping to 0x8000b0ac...

Windows CE Kernel for ARM (Thumb Enabled) Built on Feb  5 2008 at 10:48:36
--- High Performance Frequecy is 32768 khz---

2), demo中功能很少, 播*.avi提示无视频解码库, 音频无声音. 
3), 编译中. 明天实验加入2D/3D和DVSDK. 

9:30 2009-11-24
时间管理
请假要自己留底, 每天自己记录加班时间. 
0, 9:21

1, 计划
1), VC0718 mas review; <DONE>
2), OMAP3530 WinCE6.0编译, <FAIL>已给lingming, beizhan发信, 建议他们试试. 
3), 直接实验android映像: 学习ubi等用法. <DONE>: kernel没法跑起来. 可能是命令行参数有问题. android多了一个"androidboot.console=ttyS2"
4), 晚上回家下载android. 
5), 晚上时间用来做长线积累: CoreSight, ubi或进程调度. 
6), 实验: H:\36服务器porting资料备份\SOC\OMAP3530\beagleboard\android\ANDROID.<DONE>

2, 执行
1), 20' 周工作总结.
2), 9:22-9:40 杂, 邮件.
3), 9:40-10:15 VC0882 例会: 加班, 奖金.
4), 10:15-14:00 OMAP3530 WinCE6.0
(11:45-12:45 午饭)
5), 14:01-14:40 VC0718 mas review: PMU.
6), 14:41-18:09 OMAP3530 系统学习. 
7), 休息, 晚饭. 
8), 19:30-20:15 基本了解了beagleboard硬件. 见"13:36 2009-11-24"5
9), 20:16-20:52 VC0718 mas review: clkrst.

11:26 2009-11-24
VC1600, VC0882, VC0718, arm cortex-a8, TI OMAP3530, BeagleBoard, WinCE6.0
0, 安装目录:
WinCE6.0安装目录"D:\Software\WINCE600\PLATFORM". "S1SDKOMAP_DVSDK_OMAPWINCE_EA_06_12_03.exe"在"S1SDKOMAP_DVSDK_OMAPWINCE_EA_06_12_03". BSP位于"D:\Software\WINCE600\PLATFORM\S1SDKOMAP_DVSDK_OMAPWINCE_EA_06_12_03\DVSDK\6.12.03\BSP", 参考里面的"_Installation.txt"安装. 
1, 映像不要超出大小. 
自: "EVM3530 BSP User Guide.pdf"p26.
The allowable size of the OS image depends on the configuration parameters in the file \FILES\config.bib. The final image must fit within the space allocated to the RAMIMAGE region. The space allocated to the RAM region can also be used if the AUTOSIZE option is enabled. If the size of the OS image exceeds the allowable size the image will not boot reliably.
2, 如果这次仍然编译不出来, 就先不编译了, 给lingming和beizhan解决. 
错误1: 提示TPS659xx编译问题. 
错误2: D:\Software\WINCE600\build.log(1) : error SYSGEN0000: error(s) in sysgen phase 

13:14 2009-11-24
项目, 工作总结, 周工作总结, 11月工作总结, 上周工作总结2009年11月16日-2009年11月22日, 下周工作计划2009年11月23日-2009年11月29日
1, 上周总结2009年11月16日-2009年11月22日
1), VC1600: 
(1), mas review: VC0718 clkrst, 参与ddrc mas review.
(2), arm arch, debug: 阅读CoreSight文档. 
(3), jtag: 实验OMAP3530 jtag暂时不行. TI自己定义了EMU0和EMU1两个pin, 根据已有资料使用arm realview ICE时需要拉低. 实验中. 
(4), 开发板: 实验s3c6410和OMAP3530板子, 用提供的映像跑了Linux和WinCE6.0. 其中OMAP3530板子可以直接使用开源的BeagleBoard映像和TI EVM demo板映像.
2), sd代码整理和Linux移植: 无. 
3), 支持VC0830量产. 

2, 本周计划
1), VC1600 mas review. vc0718 dmac, pmu.
2), TI OMAP3530(cortex-a8)研究: 
(1), 实验jtag调试, 编译android(支持视频解码和2D/3D).
(2), 计划研究OMAP3530 SOC和板子: TPS65930(PMIC+audio Codec), 3530 memory map, 3530 rom boot等.
3), 整理之前arm training的笔记.
4), 本周如果解决了jtag调试OMAP3530的问题, 继续移植Linux 830 sdio.

3, 其它计划:
1), 查如何通过两次ROP实现alpha; 查如何通过ROP实现不规则图形的bitblt.  
4), Linux进程优先级, 又忘了...
5), arm FCSE(快速上下文切换)机制及其在Linux中的应用. 
6), CoreSight: ETB如何保存trace的数据, 是否可以通过CTI控制? 有几种*TM.

4, 分类计划--VC1600基本环境(与前面内容重叠, 只是为了清楚)
1), jtag: RVI调试a8, jlinkv8和ftdi2232实验s3c6410.
2), TPS65930(PMIC+audio Codec), 3530 memory map, 3530 rom boot等.
3), moviNand, ubi的基本概念和使用. 
4), OMAP3530 bootloader如何支持fat. 

13:36 2009-11-24
VC1600, VC0882, VC0718, arm cortex-a8, TI OMAP3530, BeagleBoard
1, 下载链接: 
http://labs.embinux.org/index.php/Android_Porting_Guide_to_Beagle_Board
2, cortex-a8/a9芯片补充: qualcomm 8650/8672; Marvell ARMADA.  
qs8672: 1.5GHz dual-core ARM cortex-A9 MPCore + 3D + 3G(HSPA+, CDMA2000 1x) + 1080p HD
3, BeagleBoard支持的所有distribution: 
Q: What Linux distributions exist for the BeagleBoard and where do I get help for them?
A: If you have BeagleBoard-specific questions, then by all means ask them on the BeagleBoard mailing list. Be polite and understand that your distribution is not the only one people use on the BeagleBoard, so be sure to let people know where you got the code you are using for your query. Information on the various distributions and build systems is at BeagleBoard#Development_environments. Below is a table that alphabetically associates some of those development environments and distributions to their project page where you can find information regarding their getting started information, collaboration portal, and/or mailing list. Please add to here and BeagleBoard as necessary.
Distribution 	Project page 	Mailing list 	IRC channel
ALIP 	http://beagleboard.org/project/ALIP/ 		
Android (Embinux) 	http://beagleboard.org/project/android 		#beagle
Android (NthCode) 	http://beagleboard.org/project/beagledroid 		
Android (OMAPZoom) 	http://beagleboard.org/project/omapandroid 		
Angstrom 	http://beagleboard.org/project/angstrom 		#oe
Debian 	http://beagleboard.org/project/debian 		
Maemo 	http://beagleboard.org/project/maemo 		#maemo
Mamona 	http://beagleboard.org/project/Mamona+On+Beagle/ 		
Mer 	http://wiki.maemo.org/Mer 		
Mojo (Handhelds.org) 	http://beagleboard.org/project/Handhelds+Mojo/ 		
QNX (non-Linux) 	http://beagleboard.org/project/QNX+Neutrino+on+OMAP/ 		
Ubuntu 	http://beagleboard.org/project/ubuntu 		#ubuntu-arm
WinCE (non-Linux) 	http://beagleboard.org/project/WEBB 		

4, beagleboard, Linux
1), 提示"Incorrect BootMode", 这是因为没有读到fat上bootmode文件. 代码lib/board.c line112. 完整提示: 
40T
Texas Instruments X-Loader 1.4.2 (Jul 25 2009 - 11:50:30)
MiniBoard V3.0: Run Xloader from SD card
Reading boot sector
Incorrect BootMode.
System halt.

5, beagleboard硬件分析:
beagleboard核心芯片: OMAP3530+TPS65930+Micro MCP
1), OMAP3530:
(1), 支持TV输出(片内DAC).

2), TPS65930
(1), 具有 3 个 DC/DC 电源、4 个 LDO、音频编解码器、USB HS 收发器的集成电源管理 IC.
(2), usb hs transceiver是支持otg的, 在3530中连接usb otg:
3530(usb otg)---TPS65930--usb miniAB接口.

3), Micro MCP: 256MB 32bit mddr, 512MB 16bit nand. 找不到datasheet. \todo 问瑞泰. 

3), TPS410: 把OMAP3530输出的24bit single-edge RGB信号转为DVI信号.
具体pin配置如下: 
ISEL(pin13)=L: I2C diable, If ISEL is low, then I2C is disabled and the chip configuration is specified by the configuration pins(BSEL, DSEL, EDGE, VREF) and state pins (PD, DKEN).
DKEN=L. 
BSEL=H: When I2C is disabled, a high level selects 24-bit input, single-edge input mode.
DSEL=L, 
EDGE/HTPLG=H: When I2C is disabled (ISEL = low), a high level selects the primary latch to occur on the rising edge of the input clock IDCK+. A low level selects the primary latch to occur on the falling edge of the input clock IDCK+. This is the case for both single-ended and differential input clock modes.

4), TPS2141: 电源芯片. 

5, 下午手摸芯片时有一次大静电, 手指头都疼了. 此后用lcd sd卡启动时, 只有启动时lcd能显示图像, 启动后会在VGA输出. 难道是静电把一个电阻击穿了?!
\todo 查. 

18:02 2009-11-25
时间管理
0, 9:20-20:35

1, 计划, 新增(<DONEor转移>):
1), VC0718 padc(已错过, 直接review0.3), dmac, gpio. 都delay了. 明天白天尽量完成.
2), arm研讨会总结. 思路见"18:27 2009-11-25"

2, 执行
9:50-17:30 arm研讨会. 
18:00-18:27 邮件.
18:27-18:43 杂. 

3, 明日计划: 完成今日新增计划和昨日计划("9:30 2009-11-24"). 
明天只有3530 jtag和android(24日计划6)--"H:\36服务器porting资料备份\SOC\OMAP3530\beagleboard\android\ANDROID")需要抽空试试. 

18:27 2009-11-25
(10:17 2009-11-26)
arm体系结构, 2009年11月25日arm研讨会, 整理思路, 计划周四, 周五完成. 
0, exciting:
1), arm cortex-a9硬核osbrey(\todo 查含义), 可以到5DMISP, 2GHz@40nm. 结合arm物理IP的演讲, 可以看出arm可以提供更好的性能, 当然成本也更高. 感觉未来公司可能还是会用arm硬核, 但是其余后端自己完成, 这样平衡成本. 
2), QoS优化这个需要关注. 
3), TI(L3, L4, DSP), Marvell(v7), Qualcomm(v7)的arm soc都有自己的arch的改进. 这感觉这是高端arm ip使用的方式. 所以说对arm体系结构和嵌入式系统计算机体系结构的深入研究应该是公司长线方式. 如果有中星微研究院可能很适合做这个. 
samsung是与arm有紧密合作(我指参与cortex-a8研发), 在公司目前这个阶段以samsung对标最合适. 

1, 最新arm SOC芯片: 
关注最新arm芯片的硬件和软件: 比较工艺, arm频率, video codec性能, 2D/3D加速. 
1), armv7但不是cortex-ax的芯片: qualcomm, marvell.
2), cortex-a芯片.
2, 之前不了解的的技术: Arm QoS(重点).
3, 新了解的公司: SOCLE.
4, 其它记录. 

20:11 2009-11-25
VC1600, VC0882, mas review, AXI_Master_DMA_Template, 0.3版只是IC内部部分人review, 不需要我参与, jiangbo会给XiangZhiHong发邮件说明

9:33 2009-11-26
时间管理
0, 9:21-

1, 计划<DONEor转移>
0), 报销. 
1), VC0718 padc(已错过, 直接review0.3), dmac, gpio. 都delay了. 明天白天尽量完成.
2), arm研讨会总结. 思路见"18:27 2009-11-25"
3), "H:\36服务器porting资料备份\SOC\OMAP3530\beagleboard\android\ANDROID"(24日计划6))
4), 3530 jtag.
5), 24日计划("9:30 2009-11-24"). 
6), 建议zhouchunliang把ddrc映射到0x0. 这样便于程序测试. 
7), huangwei问realview TRACE支持的最高频率. 

2, 执行
1), -9:35 杂.
2), 9:36-10:00 arm debug, CoreSight trace, 见"9:42 2009-11-26"
3), 10:00-10:07 arm技术研讨会总结, 见"18:27 2009-11-25"
4), 10:25-10:50 VC0718 DMAC mas review. 被5)打断.
5), 10:50-11:26 与IC联调arm1176. 现象和上次一样(两个地址同时编号或不能写入)
6), 午饭, 读书, 读报. 
7), 14:13-14:32, 14:50-15:08 VC0718 DMAC mas review. 被8)打断. 
8), 14:32-14:50 duanlihua sdio: 起始地址和长度有没有可能不是word对齐. wifi等协议会不会有实时性要求, 需要DMA设置水位提高响应速度? 
9), 15:08-15:27 VC0718 mas review, gpio v0.3
10), -17:31 jtag, 最后一根pin接地后, 板子无法启动. 试试把电阻调到最大: 仍然不行. (17:46 2009-11-30)就应该是上拉, 通过软件配置ICEPick, 见"11:28 2009-11-29""17:46 2009-11-30"end
11), 晚饭. 
12), 40' 实验elinux android image. android的确运行起来了, 但没有显示鼠标指针. 键盘可以用. 部分应用程序运行中出错. 

3, 明日计划:
1), jtag: 问aiguo, arm公司找谁问. 问瑞泰有没有人用过RVDS. 买不买openjtagv3呢? 
2), 问一下HR内推. 已经面试. 

9:42 2009-11-26
VC1600, VC0882, VC0718, arm debug, cortex-a8, CoreSight, trace, arm回复huangwei邮件, data suppression mechanism, 指令数据trace百分比
1, arm回复huangwei邮件
全文见"36 Linux\doc\arm soc\arm体系结构\debug"
From: Support-cores [Support-cores@arm.com] email: 2009-11-26 0:11
Talbe ref: "ETM-A8 Trace Summary.pdf" 
1, trace+TPIU, ETB的三种组合都很常见, 也许trace+TPIU+ETB最常见. 
2, trace pin数? 16pin最常见.
This depends upon the pin speed. 16 pins is probably common but may not as much
as you want. 32 pins is better for getting more trace data out, but clearly 
costs more pins. 
3, ETB buffer通常是4-8 Kbytes.
4, "data suppression mechanism": 当数据过多时, 减少数据trace保证指令trace.
A very valuable tool is the data suppression mechanism in the ETM. If the ETM fifo get above some tidemark, then data is suppressed and only instruction trace is emitted.

2, (9:37 2009-12-9)data suppression mechanism, "IHI0014O_etm_v3_4_architecture_spec.pdf"(36: Linux\doc\arm soc\arm体系结构\debug)
1), 从ETM3.0开始支持data suppression mechanism, 从ETM3.3开始是否支持是与具体实现相关的, p54:
ETMv3.0 and later provides a data suppression mechanism. When data suppression is enabled and the amount of data in the FIFO exceeds the preset FIFO level, then no more data can be traced. The ETM stops tracing data rather than stopping the core. See Data suppression on page 2-33 for more information. 
From ETMv3.3, it is IMPLEMENTATION DEFINED whether data suppression is upported. For more information, see Checking whether data suppression is supported, ETMv3.3 and later on page 2-34.
2), data suppression mechaism详解, p69
(1), 当FIFO快满时, 会禁止trace data. 这就是data suppression mechaism. 一般来说指令trace所需带宽远小于数据trace所需带宽, 所以此时指令trace基本不受影响. 数据trace导致的空隙会在"signal protocol"中标记(参见p379 7.4.6 Data suppressed packet). 
Data suppression causes data tracing to be disabled when the FIFO is close to overflow. This does not affect the performance of the system.
Instruction tracing is unaffected. Because the bandwidth required for nstruction trace is generally far lower than the bandwidth required for data trace, data suppression is normally highly successful in preventing overflow. The resulting gaps in the data trace are marked in the signal protocol.
(2), FIFOFULL processor stalling and data suppression不能同时使用, p69: 
If an implementation supports both FIFOFULL processor stalling and data suppression, the two features must not be enabled at the same time, see Restriction if FIFOFULL and data suppression are both implemented on page 2-35.
(3), p70说明了如何判断是否支持data suppression. 
如果不支持data suppression, 该寄存器是read-as-zero.
(4), 和data suppression起到避免fifo满的方法还有"Processor stalling, FIFOFULL", 这个方法是停止处理器避免fifo溢出. 

3, (14:53 2009-12-9)arm回复huangwei邮件(第二封):
全文见Support-cores邮件"RE: questions on trace  (442930)", HTM用于AXI trace的确不太合适: 
> 2.  I personally think HTM(AHB trace macrocell) is not proper for AXI
bus trace.
Correct.
> Do you have any suggestion on how to support bus trace for AXI bus
system ?
I'm sorry, but we currently do not have a product to do that.


17:47 2009-11-26
VC1600, VC0882, arm debug, 工具, 
urJtag(universal jtag)
http://urjtag.svn.sourceforge.net/viewvc/urjtag/tags/URJTAG_0_10/web/htdocs/book/index.html

20:08 2009-11-26
VC1600, VC0882, VC0718, arm debug, realview TRACE 2
1, realview TRACE2
自: http://www.arm.com/products/DevTools/RVT2.html
zhangjian: 值得注意的是几种模式下最高频率不同:
Streaming profiling: 250MHz core clocks
Traditional trace data rates: 480Mbps, 相当于60MByte/s
Non-invasive, real-time tracing of instructions and data: time stamp最大精度是10ns, 也就是clock是100Mhz. 也就是说大于100MHz速度的数据是没有时间戳的.
原文: 
Streaming profiling for up to 250MHz core clocks
Traditional trace data rates up to 480Mbps per data channel
Non-invasive, real-time tracing of instructions and data
 More than 50 million sample trace buffer
 More than 33 million sample trace buffer with time stamps
 Time stamp with 10ns resolution
32-bit data width trace ports supported 
From 1 to 32-bit port width settings
All Embedded Trace Macrocell (ETMTM) protocols supported
ETM7, ETM9 and ETM11TM
ETM3.3 and ETM 3.4 for CortexTM processors
ETM trace ports modes supported
Single and doubled edged clocking
Normal and multiplexed ports
CoreSight TPIU modes supported
Normal
Bypass
Continuous

2, realview profiler
为了避免4G限制, 推荐中NTFS或EXT3, fat32不行.

3, HTM是否会加? huangwei说HTM只能监测AHB总线数据, 如果通过AHB2AXI桥监测AXI上数据, 可能和实际情况不一致. 

9:14 2009-11-27
时间管理
0, 9:00-

1, 计划
1), VC0718 padc review.
见26日计划.

2, 执行
1), 9:10-10:15 MP4市场, 见"9:19 2009-11-27"
2), 11:10-11:44 OMAP3530 Linux DVSDK.
3), 午饭.
4), 30' 与caohong交流Linux driver, 给caohong拷了一些虚拟机, 书等资料.
5), 40'  OMAP3530 Linux DVSDK, 续.
6), 10' 与IC联调ar1176, ddr简单读写正确, 导入导出10k数据(略小于10k)正确.
7), 15:30-17:14 OMAP3530学习(android, dvsdk), 见"15:47 2009-11-27".
8), 17:15-

9:19 2009-11-27
MP4市场
1, 产品
1), http://beidaren.net/bbs/redirect.php?tid=22601&goto=lastpost
国产山寨MP4的最新发展近况
V9000HDX: 採用了索智公司最新研發的SC9800方案，可實現對所有主流格式高達1080P解析度的解碼。無丟幀、無色塊、無鋸齒輕鬆達成。性能為前代方案SC8600的5倍以上，播放能力超越目前市場上的所有機型。
tcc8901: 台电C510, 蓝魔, 歌美8800

2, 芯片:
1), telechips TCC8901(韩国) 
(1), 概览:
自: http://bbs.imp3.net/thread-658485-1-1.html
自: http://www.handpop.com/app/view/cat~24/id~79195
该芯片集成了ARM1176JZF-S (内含VFP向量浮点运算处理器)，该主控采用了最新的65nm CMOS工艺. BGA封装. 支持1080P解码，采用NucleusPLUS嵌入式操作系统或开放式系统，对所有视频的硬件解码都将达到30FPS，支持OTG及HDMI，还可选择支持GPS.
主控内部集成了2D/3D显示加速核心，能够达到7M/s的贴图生成能力，同时还具备了Full OpenVG v1.1 的3D加速支持和Full OpenGL ES v2.0的支持。
memory: 256M DDR2(samsung)
(2), 从telechips官网看, 芯片支持WinCE和Linux, 有3D加速: 
TCC89xx  - WinCE 	 - Linux 	 - 3D Driver
(3), 实测视频支持:
H.264编码MKV格式支持至1920×1080分辨率；H.264编码MP4视频支持至1280×720分辨率；
VC-1编码WMV格式支持至1920×1080分辨率；RV40编码RMVB格式支持至1280×720分辨率；
H.264编码AVI格式支持至1280×720分辨率；H.264编码MOV格式支持至1280×688分辨率；
XviD编码AVI格式支持至1280×720分辨率；XviD编码MKV格式支持至1280×720分辨率；
DivX编码AVI格式支持至1280×720分辨率；DivX编码MKV格式支持至1280×720分辨率；
H.263编码FLV格式支持至320×218分辨率；MPEG1编码DAT格式支持至352×240分辨率；
MPEG1编码MPG格式支持至528×288分辨率；MPEG2编码VOB格式支持至720×480分辨率；
MPEG2编码VOB格式支持至720×480分辨率。
(4), 代表产品:
驰为P7, 歌美HD8800.

(5), 售价. 

2), 索智SC9800: 无确切资料. 未看到拆机图. 

3, 其它参考资料:
http://www.imp3.net/1/show.php?itemid=26115&page=1
高清阵营持续变 MP4方案发展历程解析
# 第 1 页 - “高清MP4”提出：华芯飞CC1600
# 第 2 页 - 昙花一现：德州仪器TI DM6441
# 第 3 页 - 厚积薄发：瑞芯微RK2806/RK2728B
# 第 4 页 - 后起之秀：“768P”方案
# 第 5 页 - 卓尔不群：联咏NOVATEK HD700B
# 第 6 页 - 高清迈入1080P：Telechips TCC8901

4, 总结: TCC8901与882比较主要是cpu和3D有差异: 
cpu: 882采用cortex-a8对很多应用有帮助, NEON可以加速多媒体, Bluetooth等,   thumbEE对java或javascript等脚本语言能有很好的支持, a8配合openGL对adobe flash player 10能有很好的支持. 相比之下arm11上述应用会受很多限制, 说明882采用arm11肯定没出路.
3D: 两个都支持OpenES2.0和OpenVG1.1. 从数量级看TCC8901的7M/s应该是指三角形, 882采用的vivante GC500是12.5 MTri/s.
OS: 都支持Linux和WinCE. 

10:40 2009-11-27
VC1600, VC0718, mas review, padc 0.4, 封装: BGA537 and BGA652

10:44 2009-11-27
VC1600, VC0882, 感想, 与世界差距
与世界最先进的技术(TI, qualcomm, marvell)相比, 我们大约落后2-4年, 在追赶阶段, 我们可以追随这些公司产品去做, 靠低价占领一部分市场, 同时与samsung, telechip等公司比较差距, 希望和这些公司缩小差距. 最好能避免和国内公司同质竞争. 

11:17 2009-11-27
VC1600, VC0882, VC0718, arm board, OMAP3530, DVSDK
1, DVSDK: digital video software development kit简介: 
阅读"spry128_An overview of TI’s digital video software development kit.pdf"
TI的多媒体加速基于gstreamer(Linux), DirectShow(WinCE6.0R2), 将来会加入对OPENMAX的支持: 
In TI’s next-generation DVSDK, TI plans to incorporate support for standards-based OpenMax components and API layers as a means to provide additional capabilities through industry-evolving interfaces.. 
参考: 
1), http://e2e.ti.com/
2), http://wiki.davincidsp.com/index.php/Main_Page

2, Linux平台支持情况: 
参见: "sprs640_OMAP35x Linux PSP.pdf"
1), Drivers not supported: SDIO -WLAN, RTC
2), resizer: 用字符设备实现. dss(video模块)内部的sizer似乎通过v4l2实现的. 
3), pmu: 使用SmartReflex技术, 支持动态tick, 支持cpuidle, 支持切频.
通过sysfs控制, 见p32:
echo 1 > /sys/power/clocks_off_while_idle
echo 1 > /sys/power/sleep_while_idle
4), 网卡是SMSC9115
5), mmc/sd: 读10MB, 写6.6MB.

3, 具体使用, 参见: "OMAP35x EVM Linux PSP UserGuide-02.01.03.11.pdf".
包括xloader, u-boot, kernel, driver. 每个驱动都介绍了架构, 用法等信息, 感觉里面的sample application很实用. 
1), 工具链: Code Sourcery ARM tool chain version 2008-q1
2), xloader:
X-loader is loaded by ROM boot loader into internal RAM. X-loader
support boot from OneNAND, NAND, MMC/SD.
3), PMU:
CPU Power Management ---> CPU idle PM support
                          CPU Frequency scaling

4, 查romboot流程. <转移>

13:40 2009-11-27
VC1600, VC0882, 882 testplan writing and review
meeting 概要：
目标：1）12月低完成882所有mas testplan
      2)　1月底882整个项目的所有team参加testplan review；
要求：yinong要求：
１）testplan覆盖更全，corner case必须添加上；
２）初步的case testplan + 测试中补充的case testplan  = 100%；  要求初步的case testplan必须达到95%以上，否则认为testplan写得比较差；

testplan review：
１）由测试人员 and  软件人员对testplan进行review；
２）和ic的要求一样，要48小时给出回复；
３）要控制在3轮review 就可以close；
４）对review的建议，也要以批注的方式给出；如过简单，也可以以txt的方式给出；
５）review的结果，也保存到我们的cvs里，便于统计；稍后我会给出cvs的目录结构；
６）我们的testplan也要用我们的cvs管理起来，暂时可以分模块，到最后各个模块差不多了，再合并吧；
因为文件比较大，所以我建议先把各个模块都分开写一个testplan。

绩效考虑：
1)       和ic一样，对review的文件进行统计，来考核大家的绩效；
2)       也分type 1 ，type 2， type 3进行统计；

任务：
１）把所有的模块分配到具体的写testplan的人； owner xuelian
２）给出书写testplan 的schedule；        owner xuelian
３）给出测试这边需要review的名单； owner xuelian
４）给出软件这边需要review的名单； owner beizhan
５）建立cvs里的文档管理目录； owner beizhan

15:05 2009-11-27
VC0830, 量产, MP4, VC0831评测
转发自LingMing邮件"转发: 中星微VC0831主控 驰能M2000HD评测-昨天发布的"2009-11-27_14:46
http://www.imp3.net/1/show.php?itemid=26284&page=1
评测报告很中肯，主要在将的是希望能够把很多视频格式的细节做的更加好一些，特别是很多XVID的，AVI的等等。

15:47 2009-11-27
VC1600, VC0882, VC0718, arm SOC, BSP, cortex-a8, OMAP3530, beagleboard, android, 相关网址
1, 下载beagleboard问题, 找到对应的xml文件: 
http://labs.embinux.org/git/cgit.cgi/repo/android/platform/beaglemanifest.git/tree/default.xml
发现里面有: remote fetch="git://android.git.kernel.org/", 这个网址原来应该是可以访问的. 回家先试试能不能获取android主线代码. 
2, OMAP3530代码更新: 
1), xloader, OMAP3530的二级boot, 判断从启动方式(nand, sd等). 在xloader中处理不同启动方式, 比直接加入到u-boot好.
http://beagleboard.org/project/X-Loader/
http://www.sakoman.net/cgi-bin/gitweb.cgi?p=x-load-omap3.git;a=summary
2), u-boot:
主线(http://www.denx.de/wiki/U-Boot/WebHome)已经支持. 参见"http://elinux.org/BeagleBoard#U-Boot"
3), kernel: http://muru.com/linux/omap/
git clone git://git.kernel.org/pub/scm/linux/kernel/git/tmlind/linux-omap-2.6.git linux-omap-2.6
使用参考"http://elinux.org/BeagleBoard", 还有几个分支, 做audio, framebuffer等. 
4), PSP和DVSDK: 
前者提供Linux kernel和driver支持. 后者提供2D/3D, dsp等支持. 
5), android, beagleboard移植有4种.
(1), 0xdroid, http://code.google.com/p/0xdroid/w/list, 据称是对beagleboard支持最好的. http://gitorious.org/0xdroid. 但是我按文档做怎么也抛不起来, 启动后系统除了打印40T外无反应. 
鼠标使用:
Mouse actions for 0xdroid
0xdroid supports traditional mouse cursor for graphical operations. The behavior of mouse has been improved to fit Android. Here are the operations:
Mouse action 	0xdroid Reaction
Left click 	select
Middle click 	emit ‘Menu’ key
Right click 	emit ‘Back’ key
Mouse scroll 	emit ‘Up’ and ‘Down’ key
(2), emlinux: 是我目前唯一运行demo成功的android.
(3), rowboat: http://code.google.com/p/rowboat/, 据称会对OMAP3530有完善支持(beagleboard, 2D/3D, dsp, android2.0). 这是mentor graphics公司的移植. 
http://code.google.com/p/rowboat/downloads/list. 
实验中启动到文件系统fail. 提示无init. 
6), beagleboard映像: http://code.google.com/p/beagleboard/downloads/list

3, <DONE>
1), 下载openocd: http://elinux.org/BeagleBoardOpenOCD. 买openjtagv3.
2), 下载Linux dvsdk. 
3), 下载rowboat android. 

4, 相关网址:
1), openocd 对 cortex-a8 Linux支持还不够
https://lists.berlios.de/pipermail/openocd-development/2009-August/010184.html
2), 北京瑞泰的wince映象和部分演示.
http://code.google.com/p/omapminiboard/downloads/list
3), qemu omap3530: 已经可以boot. 加入外设中. 
http://vm-kernel.org/blog/2008/12/15/linux-is-running-on-qemu-omap3/
4), 如何使用omap3530中2D/3D加速(sgx): 
http://code.google.com/p/beagleboard/wiki/HowtoUseSGXunderAngstrom

5, (15:58 2009-12-10)OMAP3530和beagleboard补充网址
1), beagleboard qemu
http://code.google.com/p/qemu-omap3/
RSS: http://code.google.com/feeds/p/qemu-omap3/updates/basic
2), TI gstreamer
https://gstreamer.ti.com/gf/project/gstreamer_ti/
3), OMAP系列Linux kernel patch
http://muru.com/linux/omap/
4), 一位高手的OMAP3530(Devkit8000)开发移植PSP（引用）
http://group.ednchina.com/2215/34656.aspx

10:13 2009-11-29
时间管理
0, 执行
10:07-16:37

1, 计划<DONEor转移>:
1), android编译, 运行. 
2), 周工作总结.
3), arm研讨会总结. 
4), padc mas review. 

2, 执行:
1), 10:13-10:33 邮件. 
2), 10:40-16:36 编译omap3530 rowboat android. 见"11:34 2009-2-18".
注: 编译android时间很长, 编译过程中并行进行了3)...
3), 11:20-16:36 编译openocd for omap3530. 见"11:28 2009-11-29"
(13:05-14:15 午饭).

10:23 2009-11-29
VC1600, VC0882, VC0718, 关于VC0882竞争对手的讨论, 细节决定成败, MTK與展迅6600, QFN管脚过密焊接难度大会影响芯片良率
自YiNing邮件"F答复: 看看882的竞争对手"20091127_2013
bamvor: 1080p对于目前来说是最高的规格了, 所以882与竞争对手除了比价格, 还是比细节. 
原文: 
That’s true.  从规格上，大家殊途同归，很快都要做到头了，剩下来的事是怎么把事情做好。
从830的经验看，哪怕是一个不起眼的东西，如只有RGB888 serial output 而没有 true YpbPr　output, 　就可以让一颗芯片的竞争性大打折扣。
我再举两个例子，请看Raymond下面的一段文字。他提到了两件事情：　一，MTK的6235 的QFN芯片，因为管脚太密，所以坏自己进一步一统江湖的春秋大梦；而另一颗superpix的芯片，也是因为interface define不恰当，有绝好的marketing 机会，但不能take advantage.　　决定芯片命运的往往是大家认为“piece of cake”的东西。

--------------------------------------------------------------------------------
发件人: Raymond YD Zhang 
发送时间: 2009年11月25日 星期三 16:13
收件人: mark; buhead
抄送: Chen Wei Min; Dai jin
主题: 答复: 分析MTK: MTK與展迅6600 
事情是这样的。
MTK原来的策略是用6223D去打ULC2，用6253去打6600L，用6235去替代6225。因为6253 QFN封装管脚太密造成贴片良率低，和散热不充分造成芯片不稳定这两个致命伤，使得MTK被迫改变策略，主动接洽CP厂商，开放6223D/C接低价DSP，偷偷开发好turnkey方案，突然袭击，想利用展讯与客户签订保证供货的生死状将展讯的6600L库存闷死。
MTK已第四次向展讯提出收购意愿招拒，此次降价纯属迫不得已。MTK是最大输家。而展讯更是苦不堪活。
对我们来说，CP在GSM主流市场又有了机会。但不是现有的528，而是更便宜的。USD0.4-0.5。 目前三家能满足价格要求的，Superpix，胡建那颗，AIT都有性能的问题，主要是为了省pin count ，package cost拿掉LCD interface 后，preview 和 模拟电视的帧率只能做到10 帧左右。水货勉强可以，品牌不接受。
。。。。。
Raymond，

我们的机会在于怎么把该做的事情做好，中星微靠规格胜人一筹而大赚利是的例子是不多见的。就连iphone也不是胜在规格，而是胜在80%质量 + 20%创新。邓博士去年提倡的“细节决定成败”，就是这个道理。把该做的事情做好是不容易的。882前一段时间的MAS review, 大家都出了很多力。在中星微的历史上，这么多team协同作战，细扣feature，882大概是第一回。 希望大家在882的下面一段时间里，继续较真，强调沟通，而不是只管自己门前雪。期待882 team能做出一颗能在市场上站得住脚的芯片，而不是昙花一现的芯片。

10:28 2009-11-29
VC1600, VC0882, mas review, DMAC, 软硬件划分, 软件模块划分
HouPeiXin邮件"答复: DMAC problem"20091128_1429
bamvor: 在DMAC如何保证原子操作讨论中, 本来是通过软硬件结合的方式(软件读后从0变为1, 见同主题YangZuoXing邮件20091128_1354)解决, 我看邮件时也觉得挺合理, 后来看到HouPeiXin的邮件--DMAC可以由软件单独管理, 读0硬件变为1这种方式如果是软件误读引起的会很难查--才如梦初醒, 有些事情硬件做的太多软件反而不好控制. 
原文: 
我本人不太同意这样做。这很容易引起误操作。而且难查。如果ＳＷ误打误撞读了这个位置，结果这条ＤＭＡ通道就被锁住了，因为是误读所以也没有后续的ＤＭＡ传输来解锁。实际上对于ＤＭＡ（是指mem-mem对吧？）这种公共资源，一般会有个专门的ＤＭＡ驱动，他出现在不同线程中完全是因为那个线程调用了这个驱动的ＡＰＩ。在这个驱动中，ＳＷ来保证代码重入时共享资源的排他操作问题。事实上ＳＷ层面有很多这样的方法，从ＡＲＭＶ６以上引入的ＬＤＲＥＸ／ＳＴＲＥＸ，到之前的ＳＷＰ，甚至是最不可取的disable ＣＰＵ中断响应，都可以完成这种简单的二值锁(spin-lock)功能。

11:15 2009-11-29
VC1600, VC0882, android, omap3530 rowboat android, 编译, 运行
0, 当前rowboat android是"Donut-based Android (currently synchronized with 1.6-rc1)". 编译完成的映像位于"36 SOC\TI OMAP3530\BeagleBoard\android\rawboat\compileByZhangjian"
1, 编译android.
编译和原来差不多"11:34 2009-2-18", 只需要安装gperf(36: Linux\android\FC10_dep). 
可以参考"http://code.google.com/p/rowboat/wiki/ConfigureAndBuild"文档, 从配置环境到制作启动sd卡都写的很详细. 
make -jx, 可以做多线程编程. 我这次用"-j8". 看看什么时候能编完. 
2, 出错:
1), target thumb C++: libwebcore <= external/webkit/WebCore/css/CSSRule.cpp
external/webkit/WebCore/css/CSSParser.cpp:619: warning: enumeration value 'CSSPropertyWebkitVariableDeclarationBlock' not handled in switch
external/webkit/WebCore/css/CSSParser.cpp: In member function 'bool WebCore::CSSParser::parseShadow(int, bool)':
external/webkit/WebCore/css/CSSParser.cpp:3530: warning: suggest parentheses around && within ||
external/webkit/WebCore/css/CSSParser.cpp: In function 'int WebCore::cssValueKeywordID(const WebCore::CSSParserString&)':
external/webkit/WebCore/css/CSSParser.cpp:4882: error: expected initializer before '*' token
external/webkit/WebCore/css/CSSParser.cpp:4883: error: 'hashTableEntry' was not declared in this scope
target thumb C++: libwebcore <= external/webkit/WebCore/css/CSSRuleList.cpp
target thumb C++: libwebcore <= external/webkit/WebCore/css/CSSSegmentedFontFace.cpp
target thumb C++: libwebcore <= external/webkit/WebCore/css/CSSSelector.cpp
make: *** [out/target/product/beagleboard/obj/SHARED_LIBRARIES/libwebcore_intermediates/WebCore/css/CSSParser.o] Error 1
多线程编译中最后的信息不一定是出错信息(出错后会停止其它线程), 用单线程试试. 最后发现是空间不够了. 
2), 重新编译仍然一样, 分析:
external/webkit/WebCore/css/CSSParser.cpp:4882: 
const css_value* hashTableEntry = findValue(buffer, length);
从提示看, 可能是"css_value"未定义. 查找发现同目录"makevalues.pl"有此定义: 
struct css_value {
    const char* name;
    int id;
};
结合pl上下文, 感觉是通过perl生成'#include "CSSValueKeywords.h"', 但这个文件不存在, 怀疑是刚才硬盘空间不够导致的, clean后重新编译
make TARGET_PRODUCT=beagleboard clean
make TARGET_PRODUCT=beagleboard
注: clean时"TARGET_PRODUCT=beagleboard"也要带着, 否则"product/beagleboard"不会clean.
3), 仍然空间不够. 这次再腾出些地方, 剩余空间是2.8G. 
4), (16:19 2009-11-29)还是不行, 这次腾出4G空间...

3, (10:07 2009-11-30)编译android成功, 实际使用硬盘空间3G左右. 编译过程中也许有中间文件, 建议准备4G空间. install file list: out/target/product/beagleboard/installed-files.txt. 制作文件系统: 
1), 步骤: 
cd out/target/product/beagleboard
mkdir android_rootfs$ cp -r root/* android_rootfs
cp -r system android_rootfs
sudo ../../../../build/tools/mktarball.sh ../../../host/linux-x86/bin/fs_get_stats android_rootfs . rootfs rootfs.tar.bz2

4, 编译内核:
1), cd <sources top>
export PATH=${PWD}/prebuilt/linux-x86/toolchain/arm-eabi-4.4.0/bin:$PATH$ cd kernel/
make ARCH=arm omap3_beagle_android_defconfig
make ARCH=arm CROSS_COMPILE=arm-eabi- uImage -j8
cd ..
2), make uImage时提示: 
  UIMAGE  arch/arm/boot/uImage
"mkimage" command not found - U-Boot images will not be built
  Image arch/arm/boot/uImage is ready
原因是没有下载mkimage, 从原来utulinux中找到mkimage. 

5, 制作sd卡. 

6, (15:19 2009-11-30)启动:
1), 设置启动参数(DVI@1280x720): 
Beagleboard# setenv bootcmd 'mmc init; fatload mmc 0 84000000 uImage; bootm 84000000'
Beagleboard# setenv bootargs 'mem=128M androidboot.console=ttyS2 console=tty0 console=ttyS2,115200n8 root=/dev/mmcblk0p2 rw init=/init rootwait video=omapfb:vram:2M,vram:4M,mode:1280x720@60,vxres=1280,vyres=720'
Beagleboard# saveenv
2), 启动成功, 鼠标键盘可以使用. 

7, 测试case:
1), http://code.google.com/p/rowboat/wiki/Benchmarks, 包括2D/3D, cpu等测试. 
把GeneralRunner.apk复制到<sdcard>/data/app, 在menu中选择"GeneralRunner", enable all后, 单击run. 测试cpu时可能会停止响应, 多等会儿即可. 测试完成后会打出测试报告. 
测试中2D流畅, 3D有锯齿. 将来使用硬件加速后应该好很多. 
2), 经zhangpu测试, 支持中文菜单. 

8, rowboat roadmap: "36: SOC\TI OMAP3530\BeagleBoard\android\rawboat\Roadmap.html"

11:28 2009-11-29
VC1600, VC0882, arm debug, cortex-a8, openocd; 总结, 文档
总结: 使用git上最新的openocd(0.4.0 dev)调试omap3530 cortex-a8成功. beagleboard文档写的很清楚, 由于OMAP3530没有默认扫描链, 只能是把EMU0, EMU1都上拉, 通过软件配置ICEPick的方式配置扫描链. 
参考"http://elinux.org/BeagleBoardOpenOCD", 最后介绍了一些debug内部情况, 例如通过dap查看不同ap信息, 查看rom table内容等等. 
1, 编译
编译支持cortex-a8和omap3530的openocd. 
编译过程原来类似, 参见"14:38 2009-11-11". 为了区分原来openocd, 这次安装在自己目录: 
./configure --enable-parport  --enable-ft2232_libftdi --enable-jlink --prefix=/home/dec/bin/openOCD4Cortex-a8
生成pdf需要"texinfo-tex-4.12-4.fc10.i386.rpm"(36: Linux\host\tools)

2, cortex-a8 openocd调试成功, 参见"http://elinux.org/BeagleBoardOpenOCD", 测试代码是lcd blink("http://github.com/mlu/cortal_dendrites/tree/6ed04b7e838981f594eb6b701a17c220fff952dd/cortex_a8/standalone", 可以调试但是led没有闪, 可能是与beagleboard板子不同造成的. 
除了用
cortex_a8 dbginit
# Enable DBGU signal for OMAP353x
$target mww 0x5401d030 0x00002000
替换:
omap3_dbginit
其余相同. 

注: 下载的文件是windows格式, 有"^M", 需要删除, 否则会有奇怪问题. 

3, \todo icepick原理分析. why and how? 
参考下面两个脚本: 
[dec@localhost openocd]$ vim tcl/target/omap3530.cfg 
[dec@localhost openocd]$ vim tcl/target/icepick.cfg 

10:07 2009-11-30
时间管理
0, 9:39-18:49

1, 计划<DONEor转移>
1), VC0718 mas review: padc. 大家都有回应了, 上午必须看这个. <DONE>
2), VC0882 mas review: axi master template.<转移>
3), 工作总结.<DONE>

2, 执行
1), 9:42-10:31 编译omap3530 rowboat android, 续, 编译完成, 下午实验. 见"11:15 2009-11-29"3.
2), 11:45-12:21 午饭, -13:11 上网. -13:43 休息
3), 13:58-14:22 VC0718 padc
4), 14:43-16:15 omap3530 rowboat android, 续, 测试. 见"11:15 2009-11-29"6.
5), 16:20-18:49 周工作总结, 见"16:20 2009-11-30". 被6)打断. 被7)打断
6), 16:28-16:53 dashan 切频; 和zhicheng聊OMAP3530进展.
7), 17:32-17:40 zhangpu VC0598 jtag. 

3, 明日计划
1), VC0882 mas review: axi master template.
2), VC0816量产, 向zhicheng了解测试流程和coding进展.

16:20 2009-11-30
项目, 工作总结, 周工作总结, 11月工作总结, 上周工作总结2009年11月23日-2009年11月29日, 下周工作计划2009年11月30日-2009年12月6日
注: 上次计划"13:14 2009-11-24", 晚上时间主要用于积累.
查: 24日,26下班时间. 
1, 上周总结2009年11月23日-2009年11月29日
本周主要精力仍然放在TI OMAP3530开发板, 成功运行了自己编译的android映像(11月30日), 运行了下载的WinCE6.0 demo映像, 并用openocd成功调试OMAP3530(关MMU和Cache时下载代码, 查看arm寄存器, 设置断点).
1), VC1600:
(1), VC0718 mas review: PMU, clkrst, DMAC.
(2), 进一步了解cortex-a8和omap3530.
(3), omap3530(beagleboard)实验: 
A, android: 实验了emlinux和rowboat两个版本, emlinux启动应用程序有时出错; rowboat启动正常, 进一步做了2D/3D等benchmark. 
B, WinCE6.0 demo运行成功, 编译有问题. 已发送邮件给FengBeiZhan, LingMing, AiGuo"OMAP3530 WinCE6.0编译问题"20091124_1427. 约6小时. 
C, 了解TI DVSDK, 见"11:17 2009-11-27".
D, openocd调试成功. 
(4), 调试:
A, IC arm11 jtag调试pass(memory简单读写和10k数据批量读写测试).
B, 了解Realview TRACE 2见"20:08 2009-11-26".  

2), sd和Linux移植未做. 

3), VC0830/VC0816量产: 无事. 

4), 市场: 
(1), 1080p MP4, 韩国telechips tcc8901, 见"9:19 2009-11-27".
(2), VC0831评测, 见"15:05 2009-11-27".

5), 其它收获:
(1), 从VC0882 DMAC互斥讨论想到的软硬件划分问题, 见"10:28 2009-11-29"

2, 下周工作计划2009年11月30日-2009年12月6日
1), VC0816量产: 编写无外部memory时cache测试程序, coding计划1天. 调试时间未知. 
2), VC1600: 
(1), openocd调试omap3530机制分析.
(2), omap3530, beagleboard系统硬件框图整理. 
(3), mas review
3), sd卡: 如果VC0816量产顺利完成, 本周继续移植830 sd代码到830 Linux. 计划用2-3工作日, 下周完成. 

3, 其它计划
1), VC1600: 
(1), 编译WinCE bsp: 等LingMing或BeiZhan有空实验. 
(2), 实验TI Linux DVSDK.
(3), urJtag(universal jtag), 补充到"17:47 2009-11-26"
(4), 可以看看ffmpeg是如何支持NEON的, 可能对VC0882 CODEC和VC0718 DSP有帮助.
(5), http://www.beaglegame.com/
(6), android如何实现2D加速. 
(7), omap3530 rom boot流程一直不清楚, 补充到"11:17 2009-11-27"4
2), 深入学习: arm研讨会总结(思路见"18:27 2009-11-25"). arm cortex-a8 introduction 笔记疑问整理. 
3), 回家看: "http://download.micron.com/webinar/Record_Stacking/player.html"
4), 查如何通过两次ROP实现alpha; 查如何通过ROP实现不规则图形的bitblt.  
5), jlinkv8和ftdi2232实验s3c6410. 
6), 确认s3c6410代码已加入kernel主线: 将来希望不同系统都用一套kernel代码. 
7), Linux进程优先级. (20:21 2009-12-4)已经看过一遍, 还需要继续"20:21 2009-12-4"
8), arm FCSE(快速上下文切换)机制及其在Linux中的应用. 据ARM_ARM p784 "Use of the FCSE is deprecated in ARMv6", 确认armv7是否支持, 不支持就不看了. 
9), CoreSight: ETB如何保存trace的数据, 是否可以通过CTI控制? 有几种*TM.

4, 关注动态:
1), qemu对omap3530的支持, 可以以omap3530为对比平台, 分析kernel, cortex-a8等. 
见"9:37 2009-11-23"6
2), rowboat对omap3530 android的支持. 有进展时更新代码重新编译. 
3), 12月会开始882 testplan review.
4), 考核: 2009年12月25日 18:00是12月考核终点, 奖金12/30发放. 

5, 分类计划--VC1600基本环境(这是11月24日版本, 未整理)
1), jtag: RVI调试a8, jlinkv8和ftdi2232实验s3c6410.
2), TPS65930(PMIC+audio Codec), 3530 memory map, 3530 rom boot等.
3), moviNand, ubi的基本概念和使用. 
4), OMAP3530 bootloader如何支持fat. 
