
" add by bjzhang
"vim global setting for bjzhang
match ErrorMsg /\s\+$\| \+\ze\t/
"c indent
set cindent
"incremental search
set incsearch
"highlight all search result
set hlsearch
"backup file and not delete afterward
set backup
set writebackup
"insert tab as space.
"In Insert mode: Use the appropriate number of spaces to insert a <Tab>.
"Spaces are used in indents with the '>' and '<' commands and when
"'autoindent' is on.  To insert a real tab when 'expandtab' is on, use
"CTRL-V<Tab>.
set expandtab
"set tab width as 4 bytes
set tabstop=4
"set indent width as 4bytes
set shiftwidth=4
"set tag list in the right of the current window
let Tlist_Use_Right_Window=1
"Dynamically figure out the diff text.  If you are using and i18n version
"of diff, this will try to get the specific diff text during runtime.  It's
"turned off by default.  If you are always targetting a specific version of
"diff, you can turn this off and set the DirDiffText* variables
"accordingly.
let g:DirDiffDynamicDiffText = 1

"vim settings for GTD
"map keys for GTD
"F2 jump to prev section
:map <F2> ?[\(]\{0,1\}[0-9]\{1,2\}:[0-9]\{1,2\}\ 20[0-9]\{1,2\}\-[0-9]\{1,2\}\-[0-9]\{1,2\}[\)]\{0,1\}\n<CR><CR>
"F3 jump to next section
:map <F3> /[\(]\{0,1\}[0-9]\{1,2\}:[0-9]\{1,2\}\ 20[0-9]\{1,2\}\-[0-9]\{1,2\}\-[0-9]\{1,2\}[\)]\{0,1\}\n<CR><CR>
"F4 jump to prev GTD
:map <F4> ?(*[0-9]\{1,2\}:[0-9]\{1,2\}\ 20[0-9]\{1,2\}\-[0-9]\{1,2\}\-[0-9]\{1,2\})*\n\(\(时间管理\)\\|\(GTD\)\).*\n<CR><CR>
"F5 jump to prev GTD
:map <F5> /(*[0-9]\{1,2\}:[0-9]\{1,2\}\ 20[0-9]\{1,2\}\-[0-9]\{1,2\}\-[0-9]\{1,2\})*\n\(\(时间管理\)\\|\(GTD\)\).*\n<CR><CR>
"F6 insert current time
:map <F6> "=strftime("%H:%M %Y-%m-%d")<CR>gp
"F7 jump to prev item
:map <F7> ?^(\{0,2\}[0-9]\+)\{0,2\}[,，]<CR>
"F8 jump to next item
:map <F8> /^(\{0,2\}[0-9]\+)\{0,2\}[,，]<CR>
"jump to date time section
:map <C-\>1 :LogAssistantJump<CR>

command! -nargs=0 -bar LogAssistantJump call s:LogAssistant_jump()

function! s:LogAssistant_search_section(sec_1, sec_2, sec_3, sec_4)
    if strlen(a:sec_1)
        if search("^".a:sec_1.",") > 0
            if strlen(a:sec_2)
                if search("^".a:sec_2.",") > 0
                    if strlen(a:sec_3)
                        if search("^".a:sec_3.",") > 0
                            if strlen(a:sec_4)
                                call search("^".a:sec_4.",")
                            endif
                        endif
                    endif
                endif
            endif
        endif
    endif
endfunction

"list the file fullfill the year and month, check year and month syntax
function! s:LogAssistant_search_file(year, month)
    if a:year < 2005 || a:year > 2099
        echo "invalid year"
        return
    else
        let year = a:year
    endif
    if a:month > 12
        echo "invalid month"
        return
    endif
    if a:month < 10 && strlen(a:month) < 2
        let month = "0".a:month
    else
        let month = a:month
    endif

    let filelist = system("ls log".year."*.txt")
    let fileList = split(filelist)
"    echo filelist
    let i = 0
    for filename in fileList
"        echo i filename
        let result = matchstr(filename, "log".year.month."[A-Za-z_]*.txt")
        if strlen(result)
"            echo "result"result
        else
            let result = matchstr(filename, "log".year."[A-Za-z_]*.txt")
            if strlen(result)
"                echo "result"result
            else
                let fileList[i] = ""
            endif
        endif
        let i += 1
    endfor

    let file_final_list = join(fileList, " ")
"final result
"    echo j file_final_list
    return file_final_list
endfunction

function! s:LogAssistant_jump()
    let line = getline(".")
    let sec_1 = ""
    let sec_2 = ""
    let sec_3 = ""
    let sec_4 = ""

    "positioning: search from the current or next 'time date' string which start
    "from '"'
    let current_cursor = getpos(".")
    let current_col = current_cursor[2]
    let start_str = strpart(line, 0, current_col)
    let nearest_quotation = strridx(start_str, "\"")
    let new_line = strpart(line, nearest_quotation)
    let line = new_line

    "search the time, date and section index:
    "e.g.  '"12:45 2012-06-08"1-2)-(3)-((4))'
    let date_time = matchstr(line, "\"[0-9][0-9]*\:[0-9][0-9]*\ 20[0-9][0-9]\-[0-9][0-9]*\-[0-9][0-9]*\"")
    if strlen(date_time)
        let date_time = strpart(date_time, 1, strlen(date_time)-2)
"        echo date_time
        let num1_start = stridx(line, date_time) + strlen(date_time) + 1
        let line = strpart(line, num1_start)
"        echo line
"        echo "current string for sec_1 is"line
        let sec_1 = matchstr(line, "^[0-9][0-9]*")
        if strlen(sec_1)
"            echo date_time sec_1
            let line = strpart(line, strlen(sec_1))
"            echo "current string for sec_2 is"line
            let sec_2 = matchstr(line, "^\-[0-9][0-9]*)")
            if strlen(sec_2)
                let line = strpart(line, strlen(sec_2))
                let sec_2 = strpart(sec_2, 1)
"                echo sec_2
"                echo "current string for sec_3 is"line
                let sec_3 = matchstr(line, "^\-([0-9][0-9]*)")
                if strlen(sec_3)
                    let line = strpart(line, strlen(sec_3))
                    let sec_3 = strpart(sec_3, 1)
"                    echo sec_3
"                    echo "current string for sec_4 is"line
                    let sec_4 = matchstr(line, "^\-(([0-9][0-9]*))")
                    let line = strpart(line, strlen(sec_4))
                    if strlen(sec_4)
                        let sec_4 = strpart(sec_4, 1)
"                        echo sec_4
                    endif
                endif
            endif
        endif
    endif

    if strlen(date_time) == 0
        return
    endif
"    echo "the search result is"date_time sec_1 sec_2 sec_3 sec_4

    "select the file from current directory, filt it with the proper year and
    "month
    let year_month = matchstr(date_time, "20[0-9][0-9]\-[0-9][0-9]*")
    let year = strpart(year_month, 0, 4)
    let month = strpart(year_month, 5)
"    echo year month
    let file_final_list = s:LogAssistant_search_file(year, month)
"    echo file_final_list
    let fileList = split(file_final_list)

    "search each file in filelist. stop while match; close buffer while mismatch
    for filename in fileList
"        echo filename
        exec "edit ".filename
        if search("^".date_time) > 0
            call s:LogAssistant_search_section(sec_1, sec_2, sec_3, sec_4)
            break
        elseif search("^(".date_time.")") > 0
            call s:LogAssistant_search_section(sec_1, sec_2, sec_3, sec_4)
            break
        else
            exec "bd"
        endif
    endfor
endfunction

"vim setting for code exploring
"set tags+=/path/to/your/tag/directory/tags
"cscope add /path/to/your/cscope/directory/cscope.out /path/to/your/cscope/directory

