
9:55 2009-10-2
Linux移植, v4l2, codec, <TODO>看vdec driver</TODO>
1, v4l2: video for linux two, 支持如下硬件类型:
Device Name 	  	  	Type of Device
/dev/video 	  	  	Video capture interface
/dev/vfx 	  	  	Video effects interface
/dev/codec 	  	  	Video codec interface
/dev/vout 	  	  	Video output interface
/dev/radio 	  	  	AM/FM radio devices
/dev/vtx 	  	  	Teletext interface chips
/dev/vbi 	  	  	Data services interface

2, 其中codec是"/dev/codec": http://www.thedirks.org/v4l2/v4l2cod.htm
有空看看hytro vdec linux driver, 看看是否容易移植. 

3, (14:46 2009-10-13)
hatro 6280没有用v4l2, v4l2中只找到motion jpeg的codec driver, 代码位置:
zr36060.c (drivers\media\video)
videocodec.c (drivers\media\video)
videocodec.h (drivers\media\video)
<TODO>思考, 到底vdec用哪种设备最合适呢? </TODO>

22:12 2009-10-5
公司, 同事资料, VP, 张亦农
1, 自, “星光中国芯工程”八大创新特色, http://www.vimicro.com.cn/news/2008123008.htm
“星光中国芯工程”主要参与人员包括：“星光中国芯工程”总指挥邓中翰、“星光中国芯工程”副总指挥杨晓东、张韵东、金兆玮，芯片设计总监朱军和总架构师张亦农。 

2, 自, “星光中国芯工程”八大创新特色, http://www.vimicro.com.cn/news/2008123008.htm
张亦农先生毕业于美国普渡大学，获得计算机架构学硕士及博士学位。张亦农曾任美国AMD公司高级架构师，参与了AMDK5、K7和K8CPU及多款芯片组的架构设计、性能预测及标准制定工作，是K7-Atholon(速龙)CPU的主设计师之一，并主持K8-Opteron(皓龙)CPU中高难度的存储流水线的开发和HyperTransport总线的定义。张亦农博士拥有十几年的芯片设计经验。 

3, 自, 中星微过冬术：技术创新寻找蓝海, http://sz.southcn.com/dianzi/shch/content/2009-01/15/content_4843713.htm
此外，邓中翰还高薪从AMD挖来了双核领域的专家张亦农博士，因为他坚信英特尔主导的“摩尔定律”即将失效，单核CPU中的技术发展已接近极限。“目前，我们已经以他为核心，形成了一个架构研究组，专门研究最近提出来的多核异构这一新领域。”张亦农曾参与AMD K5、K7和K8 CPU及多款芯片组的架构设计、性能预测及标准制定工作。

9:57 2009-10-9
置底:
1, arm11, cortex-a8调试中要注意了解原来arm9调试的经验(IC, ICP). 

10:05 2009-10-9
VC0882, mas review
YangZuoXing邮件"VC0882: about mas review 基本原则"20091003_1028
882 MAS REVIEW分为两个阶段，第一个阶段重点在FEATURE,第二个阶段重点在实现上。

882 MAS 的章节如下：
chapter 01: introduction(overview,features and block diagram)
chapter 02: theory&algorithm
chapter 03: module competiviveness survey
chapter 04: interface
chapter 05: implementation
chapter 06: register table
chapter 07: software guideline
chapter 08: hardware guideline
chapter 09: assertion
chapter 10: constraints
chapter 11: open issues
chapter 12: test plan
chapter 13: items for debugging
chapter 14: related documents
 
第一阶段REVIEW 1-4，8，11 章
第二阶段重点REVIEW 5-7，10-12章
每个阶段的MAS REVIEW又分为两个子阶段。第一子阶段为IC DESIGN内部REVIEW,第二个子阶段是AE/IC VERIFICATION/IC FPGA PROTOTYPING REVIEW.
为了控制REVIEW的质量和进度，要将REVIEW作为工作量来考核REVIEWER, 考核的公式同DESIGNER: 考核结果=工作量*进度系数*质量系数：
1. 工作量基本上由MAS的规模，REVIEW的轮数来决定
2. REVIEWER从接到MAS开始，需要48小时给出REVIEW结果。正常完成系数为1，提前完成系数为1~1.5，DELAY后的系数为0~1。请大家将REVIEW作为第一优先级，因为REVREVE的DELAY,将直接照成DESIGNER MAS阶段的DELAY, 影响他们的绩效考评。
3. REVIEW的质量由REVIEW记录来决定。REVIEW出的问题越多，REVIEW的质量越好;REVIEW出的问题越关键，REVIEW的质量就越好。 质量系数范围为0~1。建议大家直接将REVIEW意见直接记录在MAS中，可以采用ALT+I+M直接改在MAS 的DOC文件中。另外，REVIEW记录也是评价DESIGNER MAS 质量的重要参考依据，请REVIEWER慎重对待，对于拿不准的东西，建议与DESIGNER沟通一下。但是确认的问题，一定要记录下来。每个子阶段的REVIEW可能有好几轮，每一轮都需要有REVIEW记录。
大家看看有没有什么问题？
有想法请及时与我沟通。

10:09 2009-10-9
VC0830, SV, 量产
YouHai邮件"答复: 客户(发掘)机型对应情况"20091008_2115
答复StevenLiu邮件:
Zuoxing/youhai，Power Keep脚上切换状态时出现低电平脉冲的问题，是否有解决方案了？
邮件正文: 
Power keep 今天我做了测试，只要先把output值和方向配好，然后做模式切换，没有问题。检查了没有接电容，没发现有，可能还得和曾立功确认一下。

10:11 2009-10-9
时间管理
1, 计划
1), 加班报销, 必须今天完成. <DONE>
2), 实验usb net. 加入自己的ifconfig和route: 空间不够需要重新制作roofs. 
3), 如果2)完成, 继续看timer. 
4), 发9月移植进展到bbs. <DONE>

2, 
3), 17:09- usb net

12:53 2009-10-9
公司制度, 打车报销
1, 每季度末报销本季度加班打车(晚9点以后).
2, 打车发票贴在一张白纸上, 打车票背面写明事由(加班), 起止地点（不能写“家”，要写出“家”的地点名称）
3, 把预算内报销, 附表一(本地交通费明细表)和贴有打车发票的白纸用胶水贴好(侧面贴, 不要贴一个角).

14:37 2009-10-9
Linux移植, usb gadget
1, 似乎是文件系统有问题, 读到了超过8M的区域. 原来是否也遇到过类似问题? 

2, (18:36 2009-10-9)总是提示溢出
attempt to access beyond end of device
ram0: rw=0, want=14618, limit=8192
后来把kernel config中ramdisk默认大小改为16384kbytes解决. 

3, 修改后可以ping通, 赶紧备份: 
1), kernel, filesytem映像, config:
"D:\work\VC0830\SV\code_image\20091009"
2), 配置
(1), 830:
# ./busybox ifconfig usb0 192.168.1.101 netmask 255.255.255.0 up
<7>usb0: eth_open
<7>usb0: eth_start
<7>g_ether gadget: ecm_open
<7>g_ether gadget: notify connect true
<7>g_ether gadget: notify speed 425984000
# <7>usb0: no IPv6 routers present

# ./busybox route add default gw 192.168.1.100
# ./busybox ifconfig
usb0      Link encap:Ethernet  HWaddr 52:CA:0F:55:E9:DC
          inet addr:192.168.1.101  Bcast:192.168.1.255  Mask:255.255.255.0
          inet6 addr: fe80::50ca:fff:fe55:e9dc/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:17 errors:0 dropped:0 overruns:0 frame:0
          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:4693 (4.5 KiB)  TX bytes:468 (468.0 B)
(2), pc
sudo ifconfig usb 192.168.1.100
sudo ifconfig
...
usb0      Link encap:Ethernet  HWaddr 9A:17:6B:05:8A:85  
          inet addr:192.168.1.100  Bcast:192.168.1.255  Mask:255.255.255.0
          inet6 addr: fe80::9817:6bff:fe05:8a85/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:14 errors:0 dropped:0 overruns:0 frame:0
          TX packets:26 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:944 (944.0 b)  TX bytes:5693 (5.5 KiB)

4, 
./busybox mount -o loop 192.168.1.100:/usr/src/embedded/filesystem/busybox/_install /mnt
提示"No such device", 直接用android自带的mount提示"ioctl LOOP_SET_FD failed: Bad file number"(此时loop0设备是b 7 0, 难道设备号不正确?!)

16:00 2009-10-9
VC0816, SV, clkrst, clkswitch, initial脚本中修改cpu_bus_div, rvdebug inc脚本, bootloader 512info, shuyu, liaozhicheng
0, 以切频到480_120_60为例: 
打包映像和512info位置: "D:\work\VC0816\code\20091009"

1, rvdebug inc脚本
在"printf  "bootselect"
printf  "setmem /W 0x60010014=0x00000007""前面加入: 
printf  "cpu_bus_div=0x3311"
setmem /W 0x60000040=0x00003311
printf  " u123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " v123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " w123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " x123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " y123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " z123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " A123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " B123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " C123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " D123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " E123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " F123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " G123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " H123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " I123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " J123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " K123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " L123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " M123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " N123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " O123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " P123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " Q123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " R123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " S123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " T123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " U123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " V123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " W123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " X123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " Y123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
printf  " Z123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

2, bootloader 512info
若已有512info中addr_off用到6, num=0x7, 修改cpu, bus频率为120_60, 在512info中最后加入: 
addr_off[7]         = 0x60000040
register_value[7]   = 0x3311
并把num改为8. 

Bootloader中pll不能修改只能固定是480, cpu_bus_divider可以修改. 

3, cpu,bus divider寄存器配置方法: 
0x00140190: 表示pll 480Mhz@xclk=12Mhz
0xaabb: bus divider = a+a+2; cpu divider = a+a+2;

16:05 2009-10-9
VC1600, VC0882, VC0718, FPGA, mas review, CVS
1, module mas reviewer
AiGuo邮件"VC1600 CVS"20091009_1527
module|designer in 882|"reviewer in icd"|"reviewer in icv"|"reviewer in icp"
cpu_sub
arm	  |huang wei      |NA               |NA               |"liaozhicheng
      |               |                 |                 | zhangjian
      |               |                 |                 | fengbeizhan
      |               |                 |                 | aiguo"
clkrst|huang wei      |"gao xiaoyu      |NA               |"liaozhicheng
      |               | liu zixi        |                 | zhangjian
      |               | jia jihua       |                 | fengbeizhan
      |               | yang zuoxing"   |                 |  aiguo"		
irq   |"zhang qian    |"huang wei       |NA               |"liaozhicheng
      | huang wei"	  | yang zuoxing"   |                 | zhangjian
      |               |                 |                 | fengbeizhan
      |               |                 |                 | aiguo"	
timer |"zhang xuejian |"huang wei       |NA               |"liaozhicheng
      | huang wei"	  | yang zuoxing"   |                 | zhangjian
      |               |                 |                 | fengbeizhan
      |               |                 |                 | aiguo"	
marb  |jiang bo       |"zhang xuejian   |NA               |"liaozhicheng
/sarb |               | huang wei       |                 | zhangjian
      |               | yang lei        |                 | fengbeizhan
      |               | yu lijie        |                 | aiguo"
      |               | yang zuoxing"   |                 |
mem_sub
dmac  |"zhang qian    |"jiang bo        |NA               |"liaozhicheng
      | jiang bo"     | yang zuoxing"   |                 | zhangjian
      |               |                 |                 | fengbeizhan
      |               |                 |                 | aiguo"
peri_sub
sdio  |duan lianhua   |"wu dabin        |                 |"zhangjian
                      | yang zuoxing"	|                 | fengbeizhan	
                                        |                 | aiguo"
2, CVS((16:14 2009-10-23)修改)
CVSROOT: :ssh:zhangjian@cvs.vimicro.com:/project/vc1600/cvsdb
Module: VC1600WCVS
"16:14 2009-10-23"end

3, CVS资料:
1), "D:\VC1600WCVS\doc\arch\vc0882", VC0882_ERD.doc, 882总体介绍.
2), "882_激励原则.txt": D:\VC1600WCVS\doc\schedule\882

10:50 2009-10-10
时间管理
1, 

2, 
2), 10:09-10:40 882 mas review 动员会议. <TODO>记录会议重点内容</TODO>
3), usb net
4), 午饭
5), 12:35-19:25 830 usb gadget. 
中间有0.5小时支持guangyue.
6), 晚饭, 休息
7), 20:30-

11:04 2009-10-10
Linux移植, usb net
1, 用楼下的kernel只能ping通.
2, 简单实验移植到自己的kernel. 
1), 增加文件
driver/usb/gadget/vc083x_udc.c/h
arch/arm/mach-vmc/include/mach/udc.h
2), 如果kernel启动过程中拔掉usb线, 可能造成usb gadget初始化错误. <TODO>总结, 经验</TODO>

3, 
mount 192.168.1.100:/usr /mnt
提示"protocol not supported"
自: http://www.unixresources.net/linux/clf/embedded/archive/00/00/61/89/618900.html
文件系统采用busybox-1.2.1，主机配置好nfs后，可以通过nfs挂载nfs根文件系统，但进入系统后，再mount一个个文件夹，就说mount failed,出现protocol not supported 的错误。
直接进入目标板上的文件系统，然后再mount，也出现这样的问题。

奇怪的是明明nfs没有问题，因为可以mount nfs根文件系统，但直接执行mount挂载文件夹，就不行，请问这是什么问题呢？以前从没遇到这样的事，是因为busybox的问题？

问题已解决，内核没有配置好，需要选择以下选项：
kernel配置
network filesystem->
# Enable NFS file system
# NFS client support
# NFSV3 client support

还有就是busybox中的mount要支持nfs

4, 仍有有问题: 
mount 192.168.1.100:/usr/src/embedded/filesystem/busybox/_install /mnt -o loop
 -o loop
RPC: failed to contact local rpcbind server (errno 512).
RPC: failed to contact local rpcbind server (errno 5).
rpcbind: server localhost not responding, timed out
RPC: failed to contact local rpcbind server (errno 5).

自: http://linux.chinaunix.net/bbs/viewthread.php?tid=1097334
加入 -o nolock
mount 192.168.1.100:/usr/src/embedded/filesystem/busybox/_install /mnt -o nolock

nolock作用, 根据网上信息(http://www.linuxfans.org/bbs/thread-117332-1-1.html), 查看"man mount"的nfs部分, 里面提示看"man 5 nfs":
lock / nolock  Selects whether to use the NLM sideband protocol to lock
              files on the server.  If neither option is specified (or
              if lock is specified), NLM  locking  is  used  for  this
              mount point.  When using the nolock option, applications
              can lock files, but such locks  provide  exclusion  only
              against  other  applications running on the same client.
              Remote applications are not affected by these locks.

              NLM locking must be disabled with the nolock option when
              using NFS to mount /var because /var contains files used
              by the NLM implementation on Linux.   Using  the  nolock
              option  is  also  required  when mounting exports on NFS
              servers that do not support the NLM protocol.

5, 修改后可以挂载, 但是速度慢, 而且复制文件时会死. 

6, 查找到底什么原因导致死, 发现其实是在中断中死循环了:
1), c0150cb0: c0150c48 T handle_level_irq
2), c0117044: c0117000 T asm_do_IRQ
3), c0133000: c0133000 T irq_exit
4), c0117048: c0117000 T asm_do_IRQ
5), c0117870: c0117840 t __irq_svc
6), c0117000 T asm_do_IRQ
7), c01329c0 T irq_enter
8), c0117034: c0117000 T asm_do_IRQ
9), c0150c48 T handle_level_irq
10), c0150c74: c0150c48 T handle_level_irq
11), c011fcb0: c011fcb0 T vc0830_mask_irq
12), c0150c7c: c0150c48 T handle_level_irq
13), c011fcd4 T vc0830_ack_irq
14), c0150c8c: c0150c48 T handle_level_irq
15), c0117044: c0117000 T asm_do_IRQ
16), c0133000: c0133000 T irq_exit
17), c0117048: c0117000 T asm_do_IRQ
18), c0117870: c0117840 t __irq_svc
IRQ_INTPND(0x60002020)是0x2, 说明是udc中断. 
UDC: SRCPND(0x60030360)是0x2, 说明是"USBINTREQ	usb interrupt. Include in07irq, out07irq, usbirq and out07pngirq."
19), c0117000 T asm_do_IRQ
20), c01329c0 T irq_enter
21), c0117034: c0117000 T asm_do_IRQ
22), c0150c48 T handle_level_irq
在"c014f948 T handle_IRQ_event"设置断点. 
23), c011fcb0: c011fcb0 T vc0830_mask_irq
24), c0150c7c: c0150c48 T handle_level_irq
25), c011fcd4 T vc0830_ack_irq
26), c0150c8c: c0150c48 T handle_level_irq
27), c0117044: c0117000 T asm_do_IRQ
28), c0133000: c0133000 T irq_exit
直接回到了asm_do_IRQ. 没有调用handler.

7, 继续
1), 既然是绕圈而且没有执行具体的handler, 就直接在"c0150c8c: c0150c48 T handle_level_irq"设置断点. ("chip.c"78c"对应vmlinux"C0150CB0)
最后发现, 由于是IRQ_DISABLED所以退出. 
       if (unlikely(!action || (desc->status & IRQ_DISABLED)))
 794:   e3510000        cmp     r1, #0  ; 0x0
 798:   089da830        ldmeq   sp, {r4, r5, fp, sp, pc}
 79c:   e5943018        ldr     r3, [r4, #24]
 7a0:   e3130c02        tst     r3, #512        ; 0x200
 7a4:   189da830        ldmne   sp, {r4, r5, fp, sp, pc}

另外: 我们的中断初始化时的flag是"IRQF_VALID | IRQF_PROBE" 比楼下多了"IRQF_PROBE"

8, (18:13 2009-10-10)内核中IRQ_DISABLED赋值有: 
1), dynamic_irq_init(kernel\irq\chip.c):	desc->status = IRQ_DISABLED;
830中未调用. 排除

2), __set_irq_handler(kernel\irq\chip.c):		desc->status |= IRQ_DISABLED;
__set_irq_handler(kernel\irq\chip.c):		desc->status &= ~IRQ_DISABLED;

set_irq_chip_and_handler(), set_irq_chip_and_handler_name, set_irq_handler, set_irq_chained_handler

这个函数是"if (handle == handle_bad_irq) {"情况下才会设置"IRQ_DISABLED". 但我们一定是注册了hander. 另外如果是这样udc就一次中断都而没有了. 所以排除此可能. 

3), irq_desc(kernel\irq\handle.c):		.status = IRQ_DISABLED, 
这个是初始化, 排除

4), disable_irq_nosync(kernel\irq\manage.c):		desc->status |= IRQ_DISABLED;

Interrupt.h (include\linux):extern void disable_irq_nosync(unsigned int irq);
Interrupt.h (include\linux):	disable_irq_nosync(irq);
Interrupt.h (include\linux):	disable_irq_nosync(irq);
Interrupt.h (include\linux):#  define disable_irq_nosync_lockdep(irq)	disable_irq_nosync(irq)
Interrupt.h (include\linux):						disable_irq_nosync(irq)
Manage.c (kernel\irq):	disable_irq_nosync(irq);
Phy.c (drivers\net\phy):	disable_irq_nosync(irq);

5), __enable_irq(kernel\irq\manage.c):		unsigned int status = desc->status & ~IRQ_DISABLED;
这个是enable暂时不查.

6), setup_irq(kernel\irq\manage.c):			desc->status &= ~IRQ_DISABLED;
这个是enable暂时不查.

7), free_irq(kernel\irq\manage.c):				desc->status |= IRQ_DISABLED;
vc083x_udc_remove()中会显式调用. 排除. 

8), note_interrupt(kernel\irq\spurious.c):		desc->status |= IRQ_DISABLED | IRQ_SPURIOUS_DISABLED;

9, 
1), 根据上面分析设置断点 
(1), "c014f9cc T disable_irq_nosync"
(2), "c0150174 T note_interrupt"
        if (unlikely(desc->irqs_unhandled > 99900)) {
 298:   e5963028        ldr     r3, [r6, #40]
 29c:   e2422063        sub     r2, r2, #99     ; 0x63
 2a0:   e1530002        cmp     r3, r2
2a0-b8+c0150174=C015035C, 设置断点.
两处都没有进入. 

10, 重新整理思路
1), 要么是IRQ_DISABLED没有分析全(多排除了?!), 要么是意外修改. 
2), 继续7的分析, 这次停在
       if (unlikely(!action || (desc->status & IRQ_DISABLED)))
 794:   e3510000        cmp     r1, #0  ; 0x0
 798:   089da830        ldmeq   sp, {r4, r5, fp, sp, pc}
"798 = vmlinux C0150CBC"
这次是action都没有了. 这是不可能的. 
再试验一次, 也是从这里跳走的. 

action的指针是从desc(r4)获得的. 
      action = desc->action;
790:   e5941014        ldr     r1, [r4, #20]
此时r4的值是"0xc0387610", 这是"irq_desc(kernel\irq\handle.c)"结构体地址, 说明是在访问第一个irq?!
<TODO>需要看"asm_do_IRQ"获得的是哪个irq号</TODO>

11, (20:54 2009-10-10)
arch/arm/kernel/entry-armv.o.S:
    irq_handler
f0:   e59f5028        ldr     r5, [pc, #40]   ; 120 <__irq_svc+0x60>
"f0 = kernel 0xc0117870"

代码:
	.macro get_irqnr_and_base, irqnr, irqstat, base, tmp
		ldr \base, =IO_ADDRESS(IRQ_BASE)
		@ldr \irqnr, [\base, #IRQ_INTOFFSET]
		@ldr \irqstat, [\base, #IRQ_INTPND]

		ldr \tmp, =IO_ADDRESS(IRQ_INTOFFSET)
		ldr \irqnr, [\tmp]

		ldr \tmp, =IO_ADDRESS(IRQ_INTPND)
		ldr \irqstat, [\tmp]

		teq	\irqstat, #0
	.endm
对应下面的f0-104:
  f0:   e59f5028        ldr     r5, [pc, #40]   ; 120 <__irq_svc+0x60>
  f4:   e59fe028        ldr     lr, [pc, #40]   ; 124 <__irq_svc+0x64>
  f8:   e59e0000        ldr     r0, [lr]
  fc:   e59fe024        ldr     lr, [pc, #36]   ; 128 <__irq_svc+0x68>
 100:   e59e6000        ldr     r6, [lr]
 104:   e3360000        teq     r6, #0  ; 0x0
 108:   11a0100d        movne   r1, sp
 10c:   124fe024        subne   lr, pc, #36     ; 0x24
 110:   1afffffe        bne     0 <asm_do_IRQ>
                        110: R_ARM_JUMP24       asm_do_IRQ

f0对应vmlinux的0xc0117870, 计算方法, <TODO>Linux调试方法总结</TODO>:
"__irq_svc"是标号, System.map中地址是"c0117840", entry-armv.o.S中地址是"c0", 所以f0对应地址=f0-c0+c0117840=c0117870.

看来直接使用intoffset会有问题, 楼下的宏的确没有使用intoffset:
                .macro  disable_fiq
                .endm

                .macro  get_irqnr_preamble, base, tmp
                .endm

                .macro  arch_ret_to_user, tmp1, tmp2
                .endm

                .macro  get_irqnr_and_base, irqnr, irqstat, base, tmp
                ldr     \base, =IO_ADDRESS( VC0830_IRQ_INTPND )
                ldr     \irqstat, [\base]       @ get masked status
                mov     \irqnr, #0      
                teq     \irqstat, #0
                beq     1003f

1001:   tst     \irqstat, #15
                bne     1002f
                add     \irqnr, \irqnr, #4
                movs    \irqstat, \irqstat, lsr #4
                bne     1001b
1002:   tst     \irqstat, #1
                bne     1003f
                add     \irqnr, \irqnr, #1
                movs    \irqstat, \irqstat, lsr #1
                bne     1002b
1003:           /* EQ will be set if no irqs pending */

@               clz     \irqnr, \irqstat
@1003:          /* EQ will be set if we reach MAXIRQNUM */
                .endm
使用楼下的宏没有问题. 

12, 总结, 上传SVN
1), nfs初步可用, 可以通过nfs运行qt应用程序. 只实验了2021, 8113, 8112三个BGA282 cpu, 在9080底板均可使用. 在5013底板只有2012可用. 另外加入usb gadget后lcd有点花. 
nfs通过usb gadget实现(直接移植的楼下836 linux代码), usb gadget是通过usb模拟不同总线, 目前Linux支持network, serial, storage等. 

(1), 使用方法:
a, 编译kernel并打包下载
i, make vc0830_nfs_defconfig #应用支持nfs的kernel配置文件
ii, make clean && make
iii, 打包下载. 

b, 配置nfs 
i, 830启动时确保usb线以连接到Linux主机, 830会自动配置网络设备usb0. ip: 192.168.1.101, netmask 255.255.255.0, gateway 192.168.1.100
ii, pc端配置:
临时配置(当前shell有效): 
ifconfig usb0 192.168.1.100 netmask 255.255.255.0 up
永久配置(重启机器生效):
[dec@localhost vmc]$ cat /etc/sysconfig/network-scripts/ifcfg-usb0 
DEVICE=usb0
IPADDR=192.168.1.100
NETMASK=255.255.255.0
NETWORK=192.168.1.0
ONBOOT=yes
NAME=USB
iii, pc配置后, 启动830开发板. 830启动后与pc机(Linux)可以ping通. 

d, 配置并mount nfs
i, 开启nfs服务(pc端(Linux)): 
从10.0.26.35复制"/opt/QT_vc0830"目录到自己目录(参数: cp -a -rf), 并把此目录加入/etc/exports
例如复制/opt/QT_vc0830到"/usr/src/embedded/filesystem/QT_vc0830", 则"/etc/exports"应加入"/usr/src/embedded/filesystem/QT_vc0830  *(rw,sync,no_root_squash)"
完成后用root权限重启nfs服务:
sudo /etc/init.d/nfs restart

ii, 挂载nfs(830shell):
mkdir /mnt
mount -o nolock 192.168.100:/usr/src/embedded/filesystem/QT_vc0830 /mnt
rmdir /lib
ln -s /mnt/lib /lib
ln -s /mnt/usr/local /usr/local

e, 此时可以运行qt应用程序, 例如
# cd /mnt/examples/affine/
# ./affine -qws

更多qt支持: zhangpu. 

(2), 存在的问题
a, 使用usb gadget后, 屏幕显示有点花, 颜色不正. 原因待查. 
b, nfs需要Linux支持. windows需要安装软件并配置830 kernel稍后加入. 
c, 发现IRQ_INTOFFSET(0x60000024)有时无法正确指示offset. 暂时使用楼下计算interrupt number的汇编.
目前只在usb中断中发现: IRQ_INTPND=0x2时, IRQ_INTOFFSET有时会等于0, 如果利用IRQ_INTOFFSET得到中断号Linux会去处理未注册的marb中断造成真正的udc中断未处理. 这样Linux在中断处理部分"死循环"
d, nfs做为根文件系统未实验. 
e, vc0830_nfs_defconfig编译了部分不必要的东西. 需要简化到最小nfs配置. 

13, SVN log 20091010(revision 29)
1), add usb gadget support(code from floor 6th), new kernel config: vc0830_nfs_defconfig
2), replace floor 6rh "arch/arm/mach-vmc/include/mach/entry-macro.S" temporaly in order to skip IRQ_INTOFFSET bug.

14, 代码和映像:

16:37 2009-10-10
同时信息, 电话, zhangpu, 7276

10:22 2009-10-13
时间管理
1, 计划
1), 882
(1), mas timer, 10-15 13:00前完成. <DONE>
(2), 看自己负责模块的mas
(3), arm11 referece manaul
2), Linux
(1), linux lcd花屏问题: 重点是确认与usb,input driver有无关系. <DONE>暂时不解决.
(2), timer,
(3), zhangpu更新了usb gadget linux.inf. 
3), 看10-10 18:00后加后续标志的邮件: 重点是882相关邮件

2, 执行:
1), 9:20-10:12 与zhicheng讨论nfs进展和存在的问题, zhangpu, guangyu实验usb gadget在windows下为什么不能用. <DONE>: vid, pid问题.
2), 10:24- ?
3), 11:30-12:50 午饭, 杂
4), 下午
(1), 与zhicheng讨论882 timer mas review. 
(2), 与zhicheng, zhangpu一起解决(主要是zhangpu)830连接PC机问题. 详见"19:15 2009-10-13"

12:53 2009-10-13
项目, 工具, cvs, key
1, 从如下邮件得到了cvs key, 注意cvs checkout时name写zhangjian.
WangJiWei邮件"转发: 我们team的更新VC1600的CVS有问题"20091012_0922
2, 已有cvs:
1), 1600:
CVSROOT: :ext:zhangjian@10.0.31.4:/doing/project/vc1600/cvsdb
Module: VC1600WCVS
(16:14 2009-10-23)修改为
CVSROOT: :ssh:zhangjian@cvs.vimicro.com:/project/vc1600/cvsdb
Module: VC1600WCVS
"16:14 2009-10-23"end
2), 830:
CVSROOT: :ext:zhangjian@10.0.31.4:/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY
Module: VC0830
3), 816:
CVSROOT: :ext:zhangjian@10.0.31.4:/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY
Module: VC0816

14:06 2009-10-13
VC01600, VC0882, mas review, timer, clkrst
1, timer(需要找竞争对手的mas并比较)
1), 加入一个模式: 连续计数, 中断后不清零. must
(1), 目前用两个timer模拟一个os timer, 浪费资源. 因为用os timer就可以很好支持Linux的动态tick, 可以降低功耗. 而且可以支持小于tick高精度timer. 
2), 64bit是否有必要? optional
(1), 32bit计时是否足够? 32bit timer在clock是24Mhz(最小精度是83ns)时, 最长定时时间是1.49分钟. 会不会不满足应用需要? 如果硬件不复杂建议加入一个64bit timer.
a, 如果32bit最小精度1ms 是1.19小时. 最小精度是83ns时, 是1.49分钟. 
(2), 考虑arm11或a8有没有可能用1ms的tick或<1ms的高精度定时. 如果需要的话, ostimer最好是64bit, 这样定时时间比较长.
3), 24Mhz clk下精度80ns, 是否需要更高精度呢? 
(1), TI 35xx timer最大clock是38.4Mhz, 理论上最大精度是26ns, 

2, clkrst
1), 采用连续计数后, 思考动态切频有无问题. 
从830经验看, 需要cpu使用任何memory, cpu在任何时钟源时, 都可以自动lock住sdrc等必要模块. 否则会增加软件复杂程度. 

17:17 2009-10-13
VC01600, VC0882, mas review, timer
1, 建议加入一个64bit timer, 到target value后产生中断, 中断后不reset current value, 连续计数.
加入此timer便于支持Linux的动态tick(可以降低功耗)和支持小于tick高精度timer.
2, 疑问: 从mas中看不出periodic mode和free-running mode的区别.

17:51 2009-10-13
Linux移植, 基本环境
1, 环境: 
把如下三行加入到自己".bashrc"中(vim  ~/.bashrc， "~"是自己的工作目录):
export PATH=$PATH:/toolchain/arm-2009q1/bin
export ARCH=arm
export CROSS_COMPILE=arm-none-linux-gnueabi-

2, 配置编译
1), 选择配置文件(只需要做一次)
make vc0830_nfs_defconfig 
当定义ARCH=arn时, make会到"arch/arm/configs"目录查找"vc0830_nfs_defconfig"文件, 并应用为kernel当前的配置文件. 
2), 编译
make 

3, samba(共享文件夹)
10.0.26.35中每个用户的工作目录都已经映射为samba目录, 用户名和密码都是姓名汉语拼音.

19:15 2009-10-13
(16:20 2009-10-16)
Linux移植, 网络, 连接830板子和Linux虚拟机
1, 原来我是830板子直接通过nfs连接到LInux虚拟机, 但是这样不是很稳定. 

2, 后来zhangpu解决了windows下不识别830 usb gadget问题.
bamvor: mylinux.inf修改的是"USB\VID_0AC8&PID_8201", 这表示vender id是0x0ac8, product id是0x8201, 这是楼下修改的(linux/drvier/usb/gadget/ether.c). 原来我的linux.inf中写的是"USB\VID_0525&PID_a4a2". bamvor.end
(内核需要重新编译, usb gadget中选择RNDIS)
zhangpu邮件"答复: usb gadget源代码和windows inf文件"20091013_1515
windows下usb虚拟网络搭建
windows下在连接usb虚拟网络时，需要安装驱动，请将附件下载，手动更新rndis/linux gadget驱动即可。
更新时可使用从磁盘安装，然后选择 mylinux.inf 即可！！！
待驱动安装完成后，且usb网络已经建立连接时，请修改windows “网络连接” 中虚拟网卡的ip地址，可设置为
192.168.1.100 
255.255.255.0
192.168.1.1
即可通讯，此时板子ip地址默认设置为192.168.1.101

3, 上面可以连接后, zhangpu发现会造成830和pc, pc和公司网络二者只有一个会通, 结果方法如下: 
ZhangPu邮件"Usb虚拟网络影响本地网络的问题解决了"20091013_1810
Usb虚拟网络影响本地网络的问题解决了！
在设置windwos中的usb的虚拟网卡的时候，只需要设置ip和mask即可，不要设置默认网关和dns.
这样动态加载的这块网卡就不会冲掉本地网络原本的路由信息，即可实现不影响本地网络（公司的网络）的情况下与板子进行网络通讯。

4, 最后, zhangpu完成"本地挂载虚拟机nfs操作"
自: http://10.0.26.35/smf/index.php?topic=24.0
修改虚拟机网络配置
edit/virtual network editor中
去掉automatic bridging中的physical network adapter的勾
再修改host virtual network mapping 中vmnet0：
为xp中虚拟的usb网卡保存即可

修改虚拟机中ip和虚拟usb网络为同一个网段！

之后开启虚拟机nfs服务，即可在板子上挂载虚拟机的目录
如果虚拟机的nfs目录为根目录，可以在板子上使用
chroot修改当前跟文件系统目录为挂载的目录！

17:17 2009-10-13
Linux移植, VC01600, VC0882, mas review, timer, irq, competitor TI OMAP35xx, competitor freescale i.MX36
1, competitor, TI OMAP35xx
1), 12个timer中断都是一级中断. 共96个一级中断, 64级优先级. 

2), auto-idle power-saving mode, p1154
(1), the interface clock: 无中断请求时内部clock自动关闭, 有中断请求时启动打开, 无lantecy. 原文: 
When this mode is enabled and there is no activity on the bus interface, the
interface clock is disabled internally to the module, thus reducing power consumption. When there is new activity on the bus interface, the interface clock restarts without any latency penalty.
(2), functional clock:
If this mode is disabled, the interrupt latency is reduced by one cycle.
(3), The synchronizer clock
If the auto-idle mode is enabled, the standby power is reduced, but the IRQ or FIQ interrupt latency increases from four to six functional clock cycles.
(4), p1164: Automatic interface clock gating strategy is applied, based on the interface bus activity.

3), Interrupt Latency
The IRQ/FIQ interrupt generation takes four INTCPS functional clock cycles (plus or minus one cycle) if the MPU_INTC.INTCPS_IDLE[1] TURBO bit is set to 0. If the TURBO bit is set to 1, the interrupt generation takes six cycles, but power consumption is reduced while waiting for an interrupt.

4), Preemptive interrupts(nested interrupts)
Preemptive interrupts, also called nested interrupts, can reduce the latencies for higher priority interrupts.
A preemptive ISR can be suspended by a higher priority interrupt. Thus, the higher priority interrupt can be served immediately.

2, competitor: s3c6410
The interrupt controller in the S3C6410X is composed of 2 VIC’s (Vectored Interrupt Controller, ARM PrimeCell
PL192) and 2 TZIC’s (TrustZone Interrupt Controller, SP890).
1), vector interrupt controller: 加入中断处理. 
需要参考arm1176的VIC, \ref "DDI0301G_arm1176jzfs_r0p7_trm", 12-1(p607)

3, VC0882 irq
1), 电平触发还是边沿触发? 
2), 是否支持中断嵌套? 重要!!!
830不支持. s3c6410, omap35xx 支持. hisilicon 3611从描述看也支持嵌套. 
中断嵌套是指在irq/fiq中断下可以响应高优先级中断, 这样可以提高高优先级中断响应速度. 但是Linux来说意义不大, Linux内核处理中断时会很快进入svc状态. 

4, Linux中clock source read和hrtimer(set next event)相当于一个查询方式一个中断方式得到未来时间事件, 曾经看到过kernel api是用的read. \todo 那么这两个用法有什么区别? 

11:47 2009-10-15
时间管理
1. 计划
1), 今天必须完成irq mas review;
2), 明天开始看AXI.
3), 抽空看timer, 总是不看该忘了. 

2, 
1), -11:47 irq mas review
2), 午饭, 
3), 13:04-14:12 VC1600资料;
4), ...
5), VC0882 irq mas review.
6), 晚饭.
7), 18:53
8), 19:35-20:25 VC0882 irq mas review
9), 20:26-21:03 VC0882 DMAC mas review

3, 明日计划:
1), 认真看主要competitor的dmac资料, 下午回复dmac review邮件. <DONE>
2), 如果没有新的mas review任务, 整理这几天看的arm1176 debug资料. 
3), axi templete mas review. 
4), Linux timer最好可以看看. 要不都忘了. 

20:26 2009-10-15
VC01600, VC0882, mas review, dmac
(21:03 2009-10-15)dmac review后发现没什么需要改的. 只是将来要注意各种corner: DMAC高低优先级时均可以正常工作(830中低优先级有问题), 对齐问题(source address, destination address, length).

11:17 2009-10-16
时间管理
1, 

2, 
1), 9:40-11:17 VC0830 dma mas review
2), 杂, 午饭
3), 12:37-13:54 arm architechture cortex-a8. 见"12:55 2009-10-16"
4), 小憩.
5), 14:10-15:48 arm architechture cortex-a8. 见"12:55 2009-10-16"
6), 15:48-16:14 休息
7), 16:14-17:00 换kernel timer看看. 
8), 17:00-19:02 VC0882 ICP例会, AXI dma tempelte会议.<TODO>看AXI templete文档</TODO>
9), 晚饭. , 19:46-19:59杂
10), 19:59-20:03 VC0882_MAS_AXI_Master_DMA_Template_V0.10, 大致看了看, 今天开会时已经基本有了了解. 
11), 20:03-21:27 arm1176 debug整理. 第二次看, 很有感觉. 

12:55 2009-10-16
(14:10 2009-10-16)
(20:57 2009-10-19)
VC1600, VC0882, arm cortex-a8, reading, 阅读cortex-a8介绍性文档
三个文档: CortexA8_Tools.pdf, "Cortex-A8 Processor Product Brief.pdf", "White Paper_ Architecture and Implementation of the ARM Cortex-A8 Processor.pdf". 都位于36: "\\10.0.2.36\sqmshare\Share\Linux\doc\arm体系结构\Cortex"
其中WhitePaper对于内部介绍比较多, 值得再认真看看.
1, reading"CortexA8_Tools.pdf"
1), 与Freescale, MEI (Matsushita), Samsung and TI 共同研发.
bamvor: Matsushita Electric Industrial(Matsushita)就是Panasonic(松下), 2008年改名. 
The CPU (known as “Tiger” while under development) was launched with four
public lead semiconductor partners - Freescale, MEI (Matsushita), Samsung and TI – all of whom develop high-integration SoC devices for leading consumer OEMs.
2), debug and trace
Integrated CoreSight DAP (for debug) 
Integrated CoreSight ETM (for trace)
3), 只能通过debug bus访问CoreSight调试: 
Of particular note, from a tools perspective:
 Compilation tools need to align with the enhanced focus on performance
 NEON, a SIMD coprocessor , results in assembly language extensions and a requirement for new compilation support (such as vectorising compiler)
 Debug is CoreSight-exclusive (DAP/Debug-bus based rather than TAP/scan-chain based), and while this requires changes to the debug tools (especially to JTAG runcontrol hardware) it also enables a range of new tool features.

“CoreSight” refers to the memory-mapped debug architecture introduced in ARMv7 architecture processors, and is designed to replace conventional debug access and control (i.e. JTAG port/scan-chain/Test Access Port), especially in high-integration multi-core SoC devices. The evolution of the ARM debug architecture, culminating in CoreSight, is further described later in the paper.

4), debug的新feature
(1), monitor mode: introduced in the ARM9E and carried forward to the Cortex-A8 processor.
(11:13 2009-12-10)"ARM9E中monitor mode和arm11的不同. 
arm9e如果处于monitor mode, 在breakpoint或watchpoint会发生instruction/data abort异常而不是停止. arm11是可以在monitor mode通过cp14与jtag通信数据. 
11:13 2009-12-10"end
(2), coprocessor CP14: Introduced for the ARM10 is control of the debug unit through coprocessor CP14.
(3), New for ARMv7 CPUs such as the Cortex-A8 processor is the CoreSight interface where the TAP/scan chain structure is replaced by a DAP (debug access port) and a Debug Bus.

2, reading "Cortex-A8 Processor Product Brief.pdf"
这个文档只有两页, 清楚的介绍了arm cortex-a8的特点, 第二页的feature和benifit写的很清楚. 
1), NEON 
(1), VGA h.264解码30fps:
NEON technology operates as a data processing engine attached to the end of the main processor pipeline and is able to process demanding applications such as VGA H.264 30fps video decode in less than 350MHz.
(2), a8 13级流水线和NEON都可以配合使用L1, L2 cache:
Both the main pipeline and the NEON engine are supported directly by high-performance Level 1 and Level 2 caches that work together to minimize access latency, minimize external bus traffic, and support high bandwidth data streaming to NEON technology.

2), 流水线, 一个是双发射顺序执行流水线和一个功耗优化的load-store流水线配合达到低功耗的2.0DMIPS/MHz: 
High-Performance Superscalar Pipeline: Dual-issue, in-order execution pipeline
hardware works in conjunction with a power optimized load store pipeline to deliver 2.0 DMIPS/MHz for power sensitive applications.
bamvor: 2个整数流水线在"3 白皮书"可以看到. 

3), 64/128-bit Configurable AXI Bus

3, reading "White Paper_ Architecture and Implementation of the ARM Cortex-A8 Processor.pdf", 这个白皮书还是很值得进一步阅读的. 
摘要: 这个文档深入细节介绍cortex-a8, 有三张pipeline的图可以很清楚看到arm core pipeline和NEON(含vfp) pipeline各自结构和相互关系. 
1), NEON, 支持整数和单精度浮点运算, mpeg4 video 30fps@275MHz, H.264 30fps@350Mhz.
NEON can handle both integer and single precision floating-point values,
Using NEON technology to perform typical multimedia functions, the Cortex-A8 processor can decode MPEG-4 VGA video (including dering, deblock filters and yuv2rgb) at 30 frames/sec at 275 MHz, and H.264 video at 350 MHz.
2), TrustZone: 可以用于支持DRM包括, 我们的882是否需要支持呢? 
3), pipeline:
(1), 13-stages pipeline分为取指(F0-F2, F0不算在流水线内), 译码(D1-D4), 执行(E0-E5): 
Note that stage F0 is not counted because it is only address generation. 
(2), Branch mispredict penalty = 13 cycles, (16:19 2010-9-30)详见"14:56 2010-9-30"3分支预测的详细讨论"16:19 2010-9-30"end
(3), 使用顺序发射而不是乱序发射可以降低晶体管数量(这降低了功耗), 减少关键路径, 和流水线的订制. 
(4), Branch Prediction:
To minimize the branch penalties typically associated with a deeper pipeline, the Cortex-A8 processor implements a twolevel global history branch predictor. It consists of two different structures: the Branch Target Buffer (BTB) and the Global History Buffer (GHB) which are accessed in parallel with instruction fetches.
BTB用于指示当前取的地址是否会返回一个跳转指令, 及其跳转地址. 跳转预测命中后查找GHB, GHB用最后是个跳转命中地址和4bit pc值做为索引.
另外return stack有8个32bitentris 记录lr.
(5), cache:
a, L1: 16k或32k, 4路组相联.
b, L2: 64k to 2M, 8路组相联. L1 dcache与L2 dcache无关, 但L1 icache是L2 icache的子集. (bamvor: dcache互不包含就避免了更多的数据一致性问题.)
The contents of the Level-1 data cache are exclusive with the Level-2 cache, whereas the contents of the Level-1 instruction cache are a subset of the Level-2 cache. 

4), NEON: NEON流水线在13级流水线后面, 所以所有异常都已处理, 且没有分支预测问题. (1), 同时NEON所需数据可以提前预取. 大量数据指令可以透过L2直接读取(后者不确定): 
The ARM integer unit generates the addresses for NEON loads and stores as they pass through the pipeline, thus allowing data to be fetched from the Level-1 cache before it is required by a NEON data processing operation. Deep instruction and load-data buffering between the NEON engine, the ARM integer unit and the memory system allow the latency of Level-2 accesses to be hidden for streamed data.
(2), 有一个store buffer起两个作用: A, 可以避免NEON从阻塞的(arm)流水线存储(不通, thinking); B, 检测arm整数单元和NEON读取数据的地址冲突: 
A store buffer prevents NEON stores from blocking the pipeline and
detects address collisions with the ARM integer unit accesses and NEON loads.
(3), NEON has three SIMD integer pipelines, a load-store/permute pipeline, two SIMD single-precision floating-point pipelines, and a non-pipelined Vector Floating-Point unit (VFPLite).

5), implementation
The result is fundamentally a cell-based flow, but under it lies semi-custom techniques that have been used where necessary to meet performance.
The design was divided into seven functional units.

14:12 2009-10-16
VC01600, VC0882, mas review, dmac, review步骤, review经验
1, 回忆或请教相关同事该模块原来有无问题.
2, 阅读mas;
3, 看竞争对手的模块: 第一轮review时如果没发现问题, 这步是必选的. 比如今天看freescale i.MX35时 memory-to-memory方式提到可以支持rom, ram等memory, 才想到VC0882中没有指出memory是否包括rom. VC0830中不包括, 只支持sdrc下的memory的dma. 
4, 基础模块与liaozhicheng讨论. 
5, CVS check in并回复邮件. mas review完成. 

21:14 2009-10-16
VC1600, VC0882, VC0718, jtag
1, capture: arm芯片到shift寄存器;
2, shift: TDI --> shift reg --> TDO;
3, update: shift寄存器到arm芯片

10:17 2009-10-17
VC1600, VC0882, cortex-a8, 调试
1, Serial Wire Debug & Serial Wire Viewer
http://www.arm.com/products/solutions/SWD.html
1), 不在使用JTAG协议：
SWD replaces the 5-pin JTAG port with a clock + single bi-directional
data pin, providing all the normal JTAG debug and test functionality
plus real-time access to system memory without halting the core or
requiring any target resident code.
2), JTAG的TMS和TCK作为SWDIO和SDCLK：
SWD provides an easy and risk free migration from JTAG as the two
signals SWDIO and SWCLK are overlaid on the TMS and TCK pins, allowing
for bi-modal devices that provide the other JTAG signals. These extra
JTAG pins can be switched to other uses when in SWD mode.
3), Serial Wire Viewer (SWV)似乎是支持通过uart等硬件查看系统状态。\todo 确认。

2, CoreSight On-chip Debug and Real-time Trace Technology
http://www.arm.com/products/solutions/CoreSight.html
1), CoreSight Design Kits consist of the following components:
Debug Access Port  that provides debugger access to the cores and
busses in an SoC, across multiple power and clock islands, enabling
exceptionally high download speeds direct to memory.
Embedded Cross Trigger that synchronized debug and trace across multiple cores.
Embedded Trace Macrocells  that non-invasively generate
cycle-accurate, instruction and data trace of ARM processors running
at full speed.
AHB Trace Macrocell that traces activity on the AMBA high speed system bus.
Trace Funnel used to combine multiple trace sources together.
Embedded Trace Buffer for storing trace data on-chip at high rates at
32-bit data width, eliminating the need for dedicated trace port pins
or an external trace collection unit.
Trace Port Interface Unit to transmit trace data off-chip via 2-34
pins at frequencies asynchronous to the core.
Instrumentation Trace Macrocell for high level, low bandwidth,
software generated trace.
Serial Wire Debug a higher performance 2-pin debug port that replaces
the 5/6-pin JTAG interface.
Serial Wire Viewer provides a single pin output for Instrumentation Trace.
Integration Kit contains RTL test benches, test vectors and full
documentation for easy validation of a designer's own CoreSight
subsystem.

2), 从图中"http://www.arm.com/rximages/23292.gif"可以看到:
realview硬件调试设为分为realview ICE和realview TARCE 2两部分，前者用于调试——debug
bus(AHB)通过DAP连接到JTAG或2 wire I/O. 注意到debug bus连接cortex时同时连接了cortex
core和ETM。但是连接arm9或DSP时通过ETM连接到arm9/DSP(单向), 同时从DAP直接连接到arm9/DSP(双向),
这可能是coresight兼容原有JTAG调试协议的方式，方向如下：
DAP<-->arm9->ETM->debug bus, trace bus
trace bus(ATB)用于trace，这里的cross trigger matrix和cross trigger
interface可能是core sight支持多核调试的方式。

10:13 2009-10-19
时间管理
1, 计划
1), sdio review, 今天必须完成. <DONE>
2), BGA181 测试环境, 加入切频代码. <DONE>: BGA282测试通过, 等待与guangyue一起测试BGA181. 
3), timer mas review: 已经大致看了看, 先前要求的64bit timer且中断后不清的mode都已加入. 没什么意见, <TODO>是否回信呢? </TODO>
4), 上周总结. 给aiguo发计划. 

2, 
1), 9:43-10:13 BGA181测试会议
2), 10:14-10:40 看10月17日至今未读邮件. timer mas review.
3), 10:40-11:34 BGA181 clock_switch
4), 午饭, 12:53-13:28: 李开复自传: 世界因你不同.
5), 13:46-15:14 sdio没写截止时间, 如果算上周日是今天15截止. 只能先看了. 
6), 15:14-18:10 BGA181 clock_switch
7), 晚饭.
8), 18:59-19:26 BGA181 clock_switch
9), 19:40-20:39 上周总结. 给aiguo发计划. 
10), 20:40-21:35 arm cortex-a8介绍文档阅读完成. 觉得信息还不够丰富, 暂时不整理. 稍后和arm1176对比整理. 

10:33 2009-10-19
VC1600, VC0882, mas review, timer, 0.20, <TODO>check 64bit regsiter(2 32bit reg)</TODO>
1, 加入64位timer及中断后不清除模式. 将来看register时注意64bit timer的寄存器都需要是64bit的(两个32bit). 
2, 注意64bit timer的读写方式. 硬件需要自己lock住

13:57 2009-10-19
VC1600, VC0882, mas review, sdio, <TODO></TODO>
1, 注意区分CRC status和CRS码, 前者只有write才有, (自: sdspec2.0 p96): 
The card sends back the CRC check result as a CRC status token on the DAT0 line. In the case of a transmission error the card sends a negative CRC status (‘101’). In the case of a non-erroneous transmission, the card sends a positive CRC status (‘010’) and starts the data programming procedure.
2, VC0882中sdio支持stop at block gap, 这个feature很好. 代码中需要测试. 
3, 建议: VC0830项目中write single block等blk finish中断, write multi等dma finish中断, 容易给用户造成困扰, 希望能统一. 例如TI中用统一的TC(transfer complete表示)
\todo 将来review register时, 需要注意易用性, 例如dma只设置start和len即可, 不需要设置end. 数据传输结束或命令传输结束是否含义清楚, 例如TI中分别用TC, CC(command complete)表示, 很清楚. 

16:24 2009-10-19
(17:40 2009-10-19)
VC0830, SV, 量产, BGA181, dft, 量产测试, 切频
1, 编译一个BGA282 timer, 用rvdebug load到sdram, 并用clksv命令切频到xclk, 然后load dfu下的elf: 
load/pd/r 'D:\VC0830\VC0830_dft_usb\build\bootloader.elf'
cl
cexpression @pc=0
系统启动后, 正确切频到240_120, 且uart正常打印. 

疑问: 开始用AXD静态切频到xck再动态切频时是不通, 原因未知. 另外load dfu elf时一定别忘了设置pc指针, 否做肯定跑飞(代码已经换了, 但是pc继续从830代码跑).

2, 代码, 映像(代码未上传)
D:\work\VC0830\SV\code_image\20091019\加入切频到240_120的dfu代码_BGA282测试通过_BGA181未测试

19:32 2009-10-19
VC1600, VC0882, 项目制度, 882加班签到注意事项
1, FengBeiZhan邮件"882加班签到注意事项"20091019_1558
882项目比较紧，我们team有的人需要学习新的东西，有的人需要进行mas review，有的人还要和其他项目share，所以882项目需要大家自愿加班；但是加班是有奖金的，具体情况如下：
1), 每天来公司签到、离开时签退；在15楼前台有个签到的本子，大家签到icp栏里。
a) 注意，签到签退要和打卡时间一致，否则会被取消奖金评选资格；
b) 请不要忘记签到签退，因为目前我们team签的人比较少，而奖金是按照这个发的，请大家相互提醒；
2), 奖金的统计时间目前是：每月 15号 ----- 下月 15号；
3), 要求每月加班累计有30个小时以上（至少也得20多个小时以上，否则就没有了^_^）；
4), 如果大家加班，当月有请事假，则会从加班时间里把请事假占的时间扣掉，请大家注意。
5), 目前ic已经开始计算奖金了，希望下个月我们team每个人都能拿上奖金。
有什么问题随时找我或aiguo。
882项目对我们team是个很大的挑战，对每个人，也是很大的挑战，希望大家抓紧时间，积极准备！！！

2, Aiguo邮件"答复: 882加班签到注意事项"20091019_1617
公司会按照上次会议的精神发放奖金，上个月我们team的加班基本情况如下，实际加班应该比这些多，当时我们team还没有开始签到，以后zhihong按照签到和加班来双重check。我们目前手上的工作远远做不完，有些工作必须加班，有些工作需要提前研究，因此鼓励大家加班，多承担任务，工作的效率越高，我们的奖金系数越高，我们会尽量check大家的工作效率，不是为了加班而加班。
公司最近也在做一些调整，希望大家的付出，贡献和大家报酬能够成正比，形成一个良好的工作环境。
上个月我们加班比较少，没有达到加班的最低线，因此没有奖金，IC team大部分能够拿到奖金。
FengBeizhan 12
ShuYu       8.5
Zhoudashan  8.5
LiaoZhicheng 8
SunGuangYue 7.5
AiGUO       6
LingMing    4.5
ZhangJian   4.5
ZhangPu     3

19:40 2009-10-19
Linux移植, VC1600, VC0882, 项目计划, 本周计划
0, Aiguo回复邮件说需要把sdio提高优先级. 1一个月内完成830 sdio代码整理. 

Aiguo邮件"Zhanjian本周计划(2009-10-19--2009-10-23"20091019_2039
1, VC1600, 阅读文档:
1), 继续阅读arm1176 reference manual: 开始阅读"Introduction"和Debug两章, 整理上周看的"Debug Test Access Port"章.
2), 继续上周阅读cortex-a8介绍文档, 了解cortex-a8 feature. 时间允许的话对照arm1176看a8的reference manaul.
3), mas review, 目前我的模块只有clkrst没有到第一轮review. 估计不会花太多时间. 

2, VC0830: 
BGA181 dft环境和切频, 目前在BGA282上已经测试通过. 

3, Linux移植: 继续总结前一阶段移植: 先总结timer. 

19:58 2009-10-19
Linux移植, VC1600, VC0882, 周工作总结, 10月工作总结, 2009年10月9日-2009年10月16日
1, 完成nfs文件系统挂载, 在Linux和windows均可以. 代码是楼下代码, usb的vid和pid与标准Linux的usb gadget id不同. 
移植usb gadget共使用了20小时, 楼下usb代码本身没有问题, 遇到的问题是intoffset有时不正确, 用楼下方式直接用srcpend计算offset通过. 其余主要精力放在了应用层.
2, VC1600, VC0882 mas review: timer, irq, dmac
3, 看arm cortex-a8介绍性文档. 即将完成, 完成后总结给大家发邮件. 
4, 继续利用上下班路上时间完成arm1176jzfs debug test access port阅读, 并开始第二次阅读, 并整理文档. 

20:50 2009-10-19
VC0882, VC0898, storage, sdio
AE(HeJu?)的code, "\\10.0.2.36\sqmshare\Projects\Mobile BU\VC0898\code\code_AE", 0.2是最新的. 

10:18 2009-10-20
时间管理
1, 计划
1), BGA181 dft: 首先自己模拟baseband初始化测试bin. 然后等待与guangyue baseband联调. <DONE>: 第一步完成.
2), 为了整理sd代码, 需要:
(1), 复习sd协议; 
(2), 看sdio协议;
(3), 参考Linux sd架构. 
3), sarb mas review
4), sdio mas review

2, 时间
1), 9:40-10:20 杂, 邮件.
2), 10:30-11:30 BGA181 dft;
3), 11:30-11:45 VC0882 会议: 奖金制度.
4), 午饭, 交水费, 13:00-13:58 午休
5), 13:58-14:51 BGA181 dft: BGA282 debug done.
6), 14:52-19:00 VC0882, 查cortex-a8开发板, 调试器; 讨论VIC, memory
7), 晚饭.
8), 19:40-21:24 arm cortex-a8资料整理
9), 21:25-22:05 Linux sdio 代码分析, <TODO>明天继续, 为8xx sdio代码整理做准备</TODO>

11:01 2009-10-20
VC0830, SV, 量产, BGA181, dft, 量产测试, 切频, 续
1, 830 BGA282, 
1), vc0830/vc0830_dft_usb/include/system.h设置: 
#define CLOCK_SWITCH_DEBUG
#define __282__
BGA181使用时只定义"__181__"即可, CLOCK_SWITCH_DEBUG不定义. 
2), 编译"armbin" target
3), rvdebug
printf "设置为xclk 24Mhz参数"
include D:\VC0830\VC0830\SV_init_script\VC0830init_for_sv_BGA282_sdram_xclk24.inc
printf "load bin并设置pc指针为0x0"
readfile,raw,gui "D:\VC0830\VC0830_dft_usb\build\bootloader.bin"=0x0
cl
cexpression @pc=0
4), run
2, 频率正确, memory读写正常. 但是uart没有打印. 需要重新初始化uart. 

3, CVS
1), vc0830:
clkrst, memory, sdrc
(1), 添加初始化BGA282 xclk24Mhz的inc脚本, 只初始化memory不load脚本
(2), 修改默认sdram inc中注释为正确寄存器名称

log: 
Checking in VC0830init_for_fpga_sdram.inc;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830/SV_init_script/VC0830init_for_fpga_sdram.inc,v  <--  VC0830init_for_fpga_sdram.inc
new revision: 1.7; previous revision: 1.6
done
RCS file: /doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830/SV_init_script/VC0830init_for_sv_BGA282_sdram_xclk24.inc,v
done
Checking in VC0830init_for_sv_BGA282_sdram_xclk24.inc;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830/SV_init_script/VC0830init_for_sv_BGA282_sdram_xclk24.inc,v  <--  VC0830init_for_sv_BGA282_sdram_xclk24.inc
initial revision: 1.1
done

2), vc0830_dfu_usb
clkrst, clkswitch
(1), 定义__181__时从xclk切频到480_240_120. 
BGA282下调试方式:
include/system.h设置: 
#define CLOCK_SWITCH_DEBUG
#define __282__

rvdebug中运行:
printf "设置为xclk 24Mhz参数"
include D:\VC0830\VC0830\SV_init_script\VC0830init_for_sv_BGA282_sdram_xclk24.inc
printf "load bin并设置pc指针为0x0"
readfile,raw,gui "D:\VC0830\VC0830_dft_usb\build\bootloader.bin"=0x0
cl
cexpression @pc=0

log: 
Checking in Makefile.arm;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/Makefile.arm,v  <--  Makefile.arm
new revision: 1.5; previous revision: 1.4
done
Checking in MakefileRvdebug.arm;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/MakefileRvdebug.arm,v  <--  MakefileRvdebug.arm
new revision: 1.3; previous revision: 1.2
done
Checking in boot/bootloader.c;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/boot/bootloader.c,v  <--  bootloader.c
new revision: 1.13; previous revision: 1.12
done
Checking in include/common_def.h;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/include/common_def.h,v  <--  common_def.h
new revision: 1.2; previous revision: 1.1
done
Checking in include/system.h;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/include/system.h,v  <--  system.h
new revision: 1.2; previous revision: 1.1
done
Checking in include/v830regdef.h;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/include/v830regdef.h,v  <--  v830regdef.h
new revision: 1.2; previous revision: 1.1
done
RCS file: /doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/clkrst/clkrst.c,v
done
Checking in clkrst/clkrst.c;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/clkrst/clkrst.c,v  <--  clkrst.c
initial revision: 1.1
done
RCS file: /doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/clkrst/clkrst.h,v
done
Checking in clkrst/clkrst.h;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/clkrst/clkrst.h,v  <--  clkrst.h
initial revision: 1.1
done
RCS file: /doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/clkrst/clkrst_basefunc.h,v
done
Checking in clkrst/clkrst_basefunc.h;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/clkrst/clkrst_basefunc.h,v  <--  clkrst_basefunc.h
initial revision: 1.1
done
RCS file: /doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/marb/bsdrc.h,v
done
Checking in marb/bsdrc.h;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/marb/bsdrc.h,v  <--  bsdrc.h
initial revision: 1.1
done

17:56 2009-10-20
(13:41 2009-10-21)
VC1600, VC0882, VC0718, arm1176开发板, cortex-a8开发板, jtag
1, 现有arm1176和cortex-a8开发板调查:
1), cortex-a8 SOC芯片:
(1), TI omap 3xxx, TI omap 4xxx(cortex-a9). 目前对TI OMAP3530比较了解. 
OMAP3530可以从sd/mmc卡启动: <TODO>查手册</TODO>
(2), samsung: s5pc100,
(3), freescale: i.MX515: 800MHz. 
freescale产品规划(自"con_f0374_Home Media Phones - An Emerging Market in Europe, North America And Asia.pdf"):
i.MX 51: 65nm, product sampling.
ARM Cortex A8 up to 1GHz with 256KB L2 cache
HD720p resolution H.264 High Profile, DivX, VC1 video decoder & D1 encoder 
OpenGLES 2.0 and OpenVG accelerator
WXGA screen support
Hardware accelerator for IPTV streaming security
另外: i.MX 515: L2 256kB, 24bit display

i.MX 53: 65nm, in Development: 
Cortex A8, 800-1GHz
1080p dec/720p enc
OpenGLES 2.0 / VG 1.1

i.MX 6x: 40nm, in Concept: 
Multi Cortex-A9
1080p enc/dec
OpenGLES/VG

从产品规划看, 我们的VC0882会在freescale i.MX 53之后出产品, 二者都是1080p解码, 720p编码.

i.MX 6x是cortex-a9, 
2), 
(1), http://www.hhcn.com/chinese/develop-tool/codehammera8.htm
华恒 corehammerA型仿真器, 支持cortex-a8, 软件似乎用的是rvdebug2.1, 有点奇怪, 需要找华恒要介绍文档(担心对cortex-a8支持的不好):
CodeHammerTM 系列Cortex-A8仿真器，具有如下功能：
·  支持硬件断点和无限个软件断点
·  支持同时调试多内核处理器中的多个内核
·  支持源码级调试
·  支持ARM模式
·  支持包括CP15在内所有协处理器访问
·  支持DCC
·  支持Exception Catch
·  支持基于RDI1.5.1协议的调试器，包括ADS 1.2, RVDS2.2等
·  USB2.0 HighSpeed 接口
(2), http://beagleboard.org/
国外的omap3530开发板, 149$, 不包括屏, 感觉质量很好. 
http://beagleboard.org/hardware/design, 设计资料下载. 
从"BBSRM_latest.pdf"看, audio codec在PMIC(TPS65950)中实现, 这和我们VC7882的意图类似. TPS65950还包括了USB OTG PHY.
BeagleBoard的OMAP3530采用了POP封装(Package On Package): nand和sdram在omap3530上面. <TODO>这是什么封装, 还需要深入了解</TODO>

2, LiaoZhiCheng邮件"开发板和调试器"20091020_1931
希望能申请到 一个arm11开发板，一个cortex-a8开发板 和 一个支持cortex-a8仿真器
产品	芯片	网址	价格	优缺点
Cortex-a8开发板--DevKit8000 OMAP3530 http://www.timll.com/chinese/OMAP/devkit8000.asp 1050（开票,不带屏）1870（开票，4.3寸屏） 支持OTG, 但usb host有问题
Cortex-a8开发板-- BeagleBoard	OMAP3530	http://beagleboard.org/	149美元	听说这块开发板是开源的，可能pcb图都能下载到                                     
Arm11开发板--idea6410开发板	S3C6410	http://www.urbetter.com/ProductShow.asp?ID=170	2600（没带票价，开票加3%）	 
Cortex-a8仿真器 http://www.hhcn.com/chinese/develop-tool/codehammera8.htm 3000（没带票价）

3, 又找到一个可以调试omap3的工具, 报价2800$, 和arm工具的价格也差不多. 可能只是对TI的dsp支持的好一些. 
http://www.signum.com/Signum.htm?p=pr021109.htm

18:43 2009-10-20
VC1600, VC0882, storage, sdio, <TODO>查竞争对手资料</TODO>
1, WolfDuan(DuanLiHua)邮件"VC0882: SDIO MAS REVIEW, ROUND3 FOR V0.2"20091020_1744
0.2版的SDIO MAS请大家过目，见附件或CVS，根据大家的review意见修改了一部分篇章，补充了详细的features，补充882中4个SDIO的介绍，补充了上拉电阻可控的介绍。
另外，有几个问题需要和大家讨论，如下所示：
1. 对低电压1.8v卡的支持：先说我的理解，MMC和SD协议规定了两种类型的卡：高电压卡(3.3v typically)，双电压卡(1.8v, 3.3v typically)，我觉得所谓的低电压1.8v卡就是协议中提到的双电压卡，即1.8v的卡也可工作在3.3v        下，不知理解是否正确，请大家指教。
2. FIFO尺寸的选择：以前830使用32x32大小的FIFO，这在882中是否够用，应用方面对通讯比特率是否有新的需求 (供参考： 4-bit SD/SDIO卡理论最高速度为200 Mbps, 8-bit MMC卡理论最高速度为416 Mbps)。

2, DuanLiHua的mas中, 我存疑部分:
1), 没有提到我提到的中断问题(这个可以在第二阶段review时再看):
VC0830项目中write single block等blk finish中断, write multi等dma finish中断, 容易给用户造成困扰, 希望能统一. 例如TI中用统一的TC(transfer complete表示)

20:43 2009-10-20
VC1600, VC0882, VC0718, arm1176开发板, cortex-a8开发板, 现有资料总结, 项目总结
最近和zhicheng一起收集了一些arm architechture和soc资料, 和大家分享:
资料位置:"\\10.0.2.36\sqmshare\Share\Linux\doc\arm soc"
1, "arm体系结构"目录, 包括arm9, arm11, cortex-a8的reference manaul.
其中
1), Cortex资料都位于"Cortex"目录, 可以通过以下三个文档了解cortex-a8: CortexA8_Tools.pdf, "Cortex-A8 Processor Product Brief.pdf", "White Paper_ Architecture and Implementation of the ARM Cortex-A8 Processor.pdf".
cortex-a8的reference manual已经下载, 但是"arm architechture reference manaul 7AR"没法下载, 需要这个文档和cortex-a8对照看. 
2), "arm cortex-a8 debug.txt"介绍了cortex-a8调试架构: 在cortex-a8中使用两线(DIO和CLK)CoreSight进行调试, 不再使用JTAG. CoreSight文档保密看不到. 
2, "board"目录是开发板目录, 
1), 包括arm公司的integrator和realview开发板(目前我们在emu arm仿真器上模拟realview并运行Linux kernel, 借此研究kernel).
2), "BeagleBoard(TI OMAP3530)"目录: 开源的TI OMAP3530开发板, 有板子介绍文档, 原理图和光栅文件. 
3), "现有arm1176和cortex-a8开发板调查及售价.txt"介绍了部分arm1176和cortex-a8芯片和开发板.
3, "PrimeCell_arm公司提供的IP": arm公司IP core. 例如今天讨论的VIC IP core"DDI0273_Vector_Interrupt_Controller_PL192.pdf"
4, 另外VC1600"competitor"也有大量arm soc资料, 我前几天上传了s3c6410的datasheet: 
"samsung\S3C6410X_UM_Rev1.10.pdf"

9:50 2009-10-21
时间管理
1, 计划
1), sarb mas review. 已经delay, 上午完成. 
2), BGA181 dft: 等待与guangyue baseband联调. <DONE>baseband调试通过, <TODO>还需要支持guangyue
3), sdio mas review. 主要是问题: 电压支持问题. 
4), 整理sd代码----继续研究Linux sd架构. 详见"9:57 2009-10-21"
看Linux中对于模式切换是如何实现的. 
整理sd代码时一定注意协议与具体硬件无关, 这样才便于移植到Linux/WinCE中. 
四个读写可以合并为一个读写. 
5), cortex-a8 referece manaul. 

2, 执行
1), 9:40-10:12 邮件, 今日安排, 回复简单邮件.
2), -10:28 816 回复切频邮件, 说明816 metal fix芯片切频测试方法.
3), 10:43-11:38 BGA181 dft
4), 午饭
5), 13:30-13:41 jtag
6), 13:50-15:17 面试. 
7), 15:30-21:37 (未吃饭)BGA181 dft

9:57 2009-10-21
项目, Linxu移植, VC1600, VC0882, VC0598, storage, sdio, 整理sd代码
(14:02 2010-1-6)最后讨论的ppt"830 sd代码整理.ppt"在'D:\work\VC0830\SV\sdio\代码整理'"14:02 2010-1-6"end
整理sd代码需要一个月完成, deadline是2009-11-18, 打出富裕, 计划2009-11-13(周五)完成. 
代码整理考虑三方面内容:
1, 协议要求: 需要分析sd协议, mmc协议, 看sdio协议(重点是支持wifi);
2, OS要求: 研究Linux sd架构.
3, 适应VC0830 sd本身模块的特点. 例如初始化时需要降低时钟, 可能需要正反两个沿实验. 
4, 之前积累的问题见"10:02 2009-2-19", CMD6等read_single_block-like command也要考虑, 见"0:39 2009-2-13"3-1)

看Linux中对于模式切换是如何实现的. 
整理sd代码时一定注意协议与具体硬件无关, 这样才便于移植到Linux/WinCE中. 
四个读写可以合并为一个读写. 

21:33 2009-10-21
VC0830, SV, 量产, BGA181, dft, 量产测试, 切频, 续, 自己工作完成, 剩下就是别人用的时候支持一下了:)
1, 
1), pattern1
if ( i % 2 == 0 ) { 
        *(ptr+i)= (char)*(input_data+i);
    } else {
        *(ptr+i)= i;
    }
只有i%2!=0的数据正确。
2), pattern2:
下载要运行的bin, 只有部分正确. "mem_write.txt"是代写入的输入, "mem_read.txt"是读出数据. 用winmerge可以清楚开出正确数据是连续一段, 错误数据也不是全错, 有些bit是正确的. 

2, 后来898 rvdebug write和load memory，发现是24MHz memory参数不正确。

3，抓不住830, 原因是bb代码改错了。

4, 修改120MHz参数从0x54, 0x8f, 0x40, 0x60改为0x74, 0x8f, 0x10, 0x60

5, 不要忘了复位baseband和898, 否则898可能执行的旧映像。

6, CVS: vc0830_dft_usb
zhangjian, BGA181, dft
修改__181__封装下切频到480_240_120代码，原有代码问题是120Mhz参数不正确

log:
Checking in build/bootloader.S.dump;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/build/bootloader.S.dump,v  <--  bootloader.S.dump
new revision: 1.3; previous revision: 1.2
done
Checking in build/bootloader.bin;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/build/bootloader.bin,v  <--  bootloader.bin
new revision: 1.3; previous revision: 1.2
done
Checking in build/bootloader.dump;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/build/bootloader.dump,v  <--  bootloader.dump
new revision: 1.3; previous revision: 1.2
done
Checking in build/bootloader.elf;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/build/bootloader.elf,v  <--  bootloader.elf
new revision: 1.3; previous revision: 1.2
done
Checking in build/bootloader.size;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/build/bootloader.size,v  <--  bootloader.size
new revision: 1.3; previous revision: 1.2
done
Checking in build/map.info;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/build/map.info,v  <--  map.info
new revision: 1.3; previous revision: 1.2
done
Checking in clkrst/clkrst.c;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/clkrst/clkrst.c,v  <--  clkrst.c
new revision: 1.3; previous revision: 1.2
done
Checking in include/system.h;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/VC0830_dft_usb/include/system.h,v  <--  system.h
new revision: 1.4; previous revision: 1.3
done

8, CVS baseband
zhangjian, BGA181, dft
下载bin时加入读出比较，确保下载正确。
为了切频到120MHz，把24MHz参数sdrc_mode从0x23改为0x33， rd_path_control从0x10改为ie0x20

Checking in trm830/v830cpmode/v830_cpmode.c;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/baseband/trm830/v830cpmode/v830_cpmode.c,v  <--  v830_cpmode.c
new revision: 1.21; previous revision: 1.20
done
Checking in trm830/v830memory/v830_sdram.c;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/baseband/trm830/v830memory/v830_sdram.c,v  <--  v830_sdram.c
new revision: 1.27; previous revision: 1.26
done
Checking in v830baseband.mcp;
/doing/public/methodology/ic-arch-verif/fpga_verif/VERIFY/VC0830/baseband/v830baseband.mcp,v  <--  v830baseband.mcp
new revision: 1.145; previous revision: 1.144
done

7, 代码和映像: "D:\work\VC0830\SV\阶段映像和log\20091021_VC0830_898_dft_usb_20091021", 包括baseband的axf, bin和898的elf, bin. 这个代码包括切频前后的打印信息. 可能不包括audio, usb等测试. 
注意: bootloader.bin通过strap pin判断何种晶振. 机台测试要求的24Mhz晶振需要lcddata[3:5]=0x7.

9:37 2009-10-22
时间管理
1, 计划
1), BGA181 dft, 支持guangyue, boxue调试. <DONE>
2), sarb mas review. 不再作为review, 只是阅读. 
3), sdio mas review. 主要是问题: 电压支持问题. 
4), 整理sd代码----继续研究Linux sd架构. 详见"9:57 2009-10-21"
看Linux中对于模式切换是如何实现的. 
整理sd代码时一定注意协议与具体硬件无关, 这样才便于移植到Linux/WinCE中. 
四个读写可以合并为一个读写. 
5), cortex-a8 referece manaul. 打印<DONE>, 上下班看. 本周计划浏览1,2和debug.

2, 执行
1), -9:38 杂, 邮件.
2), 9:40-10:03 VC0882 ICP例会, 10:03-10:20 与zhicheng讨论arm jtag调试.
3), 10:20-11:30 BGA181 dft
4), 午饭
5), 12:42-15:41 BGA181 dft. -15:45总结. 
6), 15:46-16:26 找arm资料.
7), 17:27-18:32 Linux sdio wifi driver资料查找, 看代码结构. 

3, 总结: 今天主要时间仍然花在了BGA181 dft上面, 所以计划没有完成. 

10:03 2009-10-22
VC1600, VC0882, memory, sdrc, ddrc, mas review 第二阶段问题, 注意切频时的shadow寄存器

15:41 2009-10-22
VC0830, SV, 量产, BGA181, dft, 量产测试, 切频, 续, 支持SunGuangYue测试udc完成, 项目总结
1, 今天上午实验发现昨天为了开打印信息, clock配置有点问题. 今天把clock配置恢复为只是切频后才配置clock.
2, 后来发现弹不出优盘(插上CPU板的跳线可以监测到插拔), 换了两个BGA181板子也不行, 晶振从24MHz换为12MHz也不行. (都是试过两台PC).
3, 我在830下编译udc_sv_M8M, 下载后通过AASP运行udc, 仍然不行. 
3, 和LiDongLiang讨论, 用原来肯定正确的代码测试(去掉baseband中机台测试宏). 也是弹不出优盘. 
4, 上面实验后可以认为是硬件问题, 找ZouWeiRan帮忙: 发现少了J3跳线, R5(0欧姆电阻)(电源板是VA7830).
J3是USB33供电. R5是J3输出到VDD_USB33 0欧姆电阻. 
5, 跳上跳线, 焊上0欧姆电阻后板子都可以弹出优盘. 验证刚才不行的映像和板子:
1), 从LiDongLiang拿来的两个焊好的板子一个用的12MHz晶振, 一个用的24MHz晶振都可以弹出优盘. 
2), 自己编译的vc0830_sv: udc_sv_M8M映像通过rvdebug下载到830 sdram中可以. 

6, BGA181 dft调试总结:
共用13个小时. 自己修改环境和验证用了一少半的时间. 时间大头是BGA181 sdram参数问题. 和BGA181电源板造成优盘无法弹出问题. 
查硬件问题基本还算顺利. 查sdram参数问题似乎每次都遇到较多问题, 迫切需要一个好的sdram测试pattern.

16:10 2009-10-22
VC1600, VC0882, arm architechture, debug, coresight, pft
1, CoreSight资料
1), DGI0012B_coresight_technology_r1p0_sdg.pdf介绍了CoreSight调试机制和CoreSight组件. 
2), IHI0035A_coresight_pft_architecture_spec.pdf, PTM可以实时trace: 
1), A Program Trace Macrocell (PTM) is a real-time trace module providing  instruction tracing of a processor.
2), PFT不像原来的trace trace全部信息. PFT假设外部tracer有完整bin, 只输出必要的信息, 这些信息称为waypoint. 
PFT identifies certain instructions in the program, and certain events, as waypoints. A waypoint is a point where instruction execution by the processor might involve a change in the program flow. A PTM only traces these waypoints.

18:22 2009-10-22
Linux移植, VC1600, VC0882, storage, sdio, wifi
1, 下载sdio stack
http://sourceforge.net/projects/sdio-linux/
Linux SDIO stack project
http://www.cnblogs.com/faraway/archive/2009/02/27/1399608.html
Linux SDIO WIFI驱动的编译, 上面下载的stack需要按"series"顺序打patch.
http://labs.o-hand.com/2008/02/05/openmoko-wifi-driver/
OpenMoko WiFi driver

打补丁后, 还有三个冲突没有解决(11:33 2009-10-23)已解决: 
[dec@localhost vmc]$ find . -name *.rej
./drivers/pnp/core.c.rej
./drivers/pnp/driver.c.rej
./drivers/pnp/Kconfig.rej

2, (13:11 2009-10-23)
从openmoko下载内核, 对比. 
http://git.openmoko.org/?p=kernel.git;a=summary

3, sdio设备调查:
1), http://item.taobao.com/auction/item_detail-db1-9af21ef64b8eb58758c316295ba52c3e.htm
Spectec sdw822普通版,迷你SD口SDIO WIFI, 300RMB.
Spectec做sdio产品的台湾公司: http://www.spectec.com.tw/
2), atheros是wifi芯片厂家, 其中ar6000系列有sdio接口. 
http://www.atheros.com/pt/AR6001XL.htm
http://www.atheros.com/pt/wlan_mobile.htm
3), 
http://item.taobao.com/auction/item_detail-0db2-b2887147bd5b1b196e63e98cebeca3d1.htm?cm_cat=0
s3c6410 wifi, 600RMB. 用的是marvell的88M8686芯片. 

4, 比较1中sdio_stack和openmoko的sdio wifi:
1), 后者是根据前者修改的. 只有atheros wifi driver.
2), 前者对应2.6.18, 后者对应2.6.24, 如果移植到830 kernel, 后者会容易一些. 
3), 从目录结构看, 后者把busdriver和lib都移到了stack目录, 并加入platform目录到stack, 这样更清楚. 

5, (11:27 2009-10-27)
"D:\VC1600WCVS\doc\module\sdio"有sdio spec. 

9:59 2009-10-23
时间管理
1, 计划
1), VC0882 mas review, AXI Master DMA template, 见"10:02 2009-10-23"
2), 昨日安排"9:37 2009-10-22"
3), 下周一提交上周总结和本周计划, 回复ZhangPu邮件"答复: Zhanjian本周计划(2009-10-19--2009-10-23)"20091020_0924
4), 远期: "D:\work\Documentation\Cortex-M3_DriverLib", 自liaozhicheng.

2, 执行
1), -10:07 杂, 邮件. 
2), 10:08-11:33 Linux sdio
3), 午饭
4), 12:45-14:27 Linux sdio
5), 14:45-16:53 Linux sdio
6), 16:54-17:10 830 MP4
7), 17:11-18:06 Linux mmc/sd 今天要完成分析.
中间有20分钟研究, 整理sourceinsight技巧. 
8), 晚饭, 杂
9), 19:12-20:08 VC0882 mas review: AXI Master DMA Template.
10), -20:52 资料打印, 整理.
11), -22:04 Linux mmc/sd代码阅读, 框架初步完成. 

10:02 2009-10-23
VC1600, VC0882, mas review, AXI Master DMA template
1, 自AiGuo邮件"转发: VC1600: AXI Master DMA Template MAS Review, Round 2 for V0.20"20091023_1856
2, mas review回复邮件: "答复: VC1600: AXI Master DMA Template MAS Review, Round 2 for V0.20"20091022_2008
有个疑问: 
21日DMA邮件讨论提到” NFC/SDIO 的DMA直接支持LLI. LLI的内容直接放在模块寄存器里边。”(Yang Zuo Xing 2009-10-21 18:13邮件)
LLi是否直接由AXI Master DMA Template支持呢? 如果由DMA Template支持, LLi和目前的buffer group不太一样, LLi的数量比bufgrp_bufnum少, 但是不同LLi的addr和size一般不同, buffer group中bufgrp_incraddr和bufgrp_bufsize相同. 
是否可以定义为两种buffer: 一种支持buffer group(适合图像处理), 一种支持LLi(适合nfc, sd等模块). 模块例化template时可以选择例化哪种buffer.

9:35 2009-10-26
VC1600, VC0718, 718 MRD, <TODO>关注OS support</TODO>
SuiHongLi邮件"转发: 718 MRD update"20091025_1511, 提到OS支持: Linux和VxWorks. 看来上次YiNong说718用什么OS还要看竞争对手的情况, 可能公司一直考虑过用VxWorks.

9:39 2009-10-26
VC0830, SV, MP4量产, BGA181 dft测试方法, 与830其它封装不同
ZhouZhiTao邮件"答复: 请各位知悉，831和898量产是最高优先级，高于您手头上的任何项目！"20091024_1410
Hi,caoyanhui:
关于181的function封装的功能测试,由于MODE pin 固定死了, 以前的测试方法走不同, 采取下面的方法:
1) 通过ATE 模拟baseband 在CP模式下面将程序down到 sdram里面. 将sdram 的首地址map 到0地址, 然后松开arm,从零地址取程序执行.
2) Xclk的时钟为24M, 需要把对应的strap pin LCD_DATA[5:3] 拉到 3’b111
3) Strap pin LCD_DATA[9:8] 拉到 2’b00
4) BYPASS pin拉到1’b0, 这点已经在测试文件里面体现出来了.
5) 这个封装没有TPI, 所以以前测试的TPI 选项没有了. 这个不需要再测.
6) AUDIO 的输入 是 AUDC_LINEL2, AUDC_LINER2, 输出是 AUDC_HSOUTL 和AUDC_HSOUTR. 请注意 测试时,版上面的开关位置.
7) 由于181没有单独走USB通道倒数据, 需要单独再 给USB枚举挂起测试. 需要在上面所有测试完成以后将suspend拉高,开始USB的 枚举挂起测试
 
测试文件已经上传到服务器上面了:
 
FUNCTION_181_100.atp  BB的读写操作的cycle为10us
&
FUNTION_181_50.atp BB的读写操作的cycle为5us
 
Hi,xiaowu:
对于212封装,
AUDIO 的输入 是 AUDC_LINEL2, AUDC_LINER2, 输出是 AUDC_HSOUTL 和AUDC_HSOUTR. 请注意 测试时,版上面的开关位置.
TPI的输入是TPI_KEYSCAN.

9:58 2009-10-26
VC1600, VC0882, timer, mas review, <TODO>timer review, 看完了doc, xls没看, 已经发给zhicheng</TODO>

15:03 2009-10-26
项目, Linux移植, 工作总结, 本周工作总结, 10月工作总结, 2009年10月19日-2009年10月25日, 下周计划2009年10月26日-2009年11月1日
1, 上周总结2009年10月19日--2009年10月25日
上周主要精力在BGA181 dft环境和切频调试, 830 sd代码整理, cortex-a8学习, 共工作5天, 晚上加班4次. 下面分项目说明: 
1), VC1600
了解到VC0882和VC0718可能都用arm cortex-a8, 本周暂时停止阅读arm1176 TRM(technical reference manaul的缩写, 下同), 着重阅读cortex-a8资料.
(1), 目前阅读了cortex-a8 TRM的第一章, 正在阅读第二章. 
(2), mas review: 参与review AXI DMA template. clkrst尚未开始review. 
2), VC0830: 
(1), BGA181 dft环境和切频, 在上周基础上继续调试, 大约用了17.5个小时. 遇到memory参数问题, 电源板问题等.
(2), 准备sd代码整理.
3), Linux移植: 原计划的timer未总结, 为了配合整理830 sd代码, 阅读了Linux mmc/sd代码. 

2, 下周计划2009年10月26日--2009年11月1日
1), VC1600
mas review估计不会占用太多时间. 重点放在cortex-a8 TRM(technical reference manaul), 希望2-3周内, 基本看完. 
2), sd代码整理: 这是代码整理第二周, 计划重读mmc/sd协议, 看sdio协议, 与beizhan讨论sd代码整理思路. 根据时间, 最晚11月开始整理. 
3), Linux移植: 可能没时间总结timer, 配合830 sd代码整理, 会看Linux sdio协议的实现, Linux sdio协议没有与mmc/sd storage协议一起实现. 

3, 建议:
希望有cortex-a8开发板和调试器. 

10:47 2009-10-27
时间管理
1, 计划
1), sd: 回顾830原有问题, 开始阅读sdio spec(打印, 本周完成).
2), cortex-a8: TRM chapter1总结. chapter2 programing model阅读.

2, 执行:
1), -10:54, 杂, 邮件, 与Liaozhicheng, Daichunquan讨论816量产问题(切频300fail, autovideofail).
2), 10:56-11:29 cortex-a8 TRM chapter1总结
3), 午饭, 休息.
4), 13:55-14:49 cortex-a8 TRM chapter2, 被irq review打断.
5), -15:55. irq review
6), -17:12 cortex-a8 TRM chapter2, 看到2.11节.
7), 17:15-17:45 Linux mmc/sd porting
8), 晚饭, 19:02-19:24 休息.
9), 21:00-21:55 Linux mmc/sd porting

3, 明天还是专注与sdio协议和cortex-a8资料. 

14:14 2009-10-27
VC1600, VC0882, arm cortex-a8, TRM, chapter2, cortex-a8和arm1176比较
1, Thumb-2
执行arm指令和thumb指令不需要切换arm和thumb状态. 传说中的arm thumb-2混合编程在chapter4实现. 

2, ThumbEE
1), bamvor: 
ThumbEE是cortex-a8新增的. 从cortex-a8 TRM和网上资料看, ThumbEE是Jazelle RCT的基础, Jazelle RCT实际是利用前者执行java代码. cortex-a8的三个介绍资料中都没有提到ThumbEE, 只有Jazelle RCT. 另外ThumbEE由CPSR的T=1&&J=1表示. 从这点看, ThumbEE也和Jazelle RCT有紧密的关系. 
另外从"2.8 Processor operating states"和2.4看, cortex-a8也不再支持jazelle状态, 只支持ARM, thumb, thumbEE三种状态. 

2), cortex-a8 TRM: 
(1), ThumbEE is a variant of the Thumb-2 instruction set. It is designed as a target for  dynamically generated code. This is code compiled on the device either shortly before or during execution from a portable bytecode or other intermediate or native representation. It is particularly suited to languages that employ managed pointers or array types. ThumbEE provides increased code density for the compiled binary compared with the compiled code for the ARM or Thumb-2 instruction set. ThumbEE introduces a new processor state, the ThumbEE state, indicated by both the T bit and the J bit in the CPSR Register being set to 1. 
(2), 2.4 Jazelle Extension
The Cortex-A8 processor provides a trivial implementation of the Jazelle Extension. This means that the processor does not accelerate the execution of any bytecodes, and all bytecodes are executed by software routines.

3), wiki资料: 
自: http://zh.wikipedia.org/wiki/ARM%E6%9E%B6%E6%A7%8B#Thumb_Execution_Environment_.28ThumbEE.29
Thumb Execution Environment (ThumbEE)
ThumbEE，也就是所謂的Thumb-2EE，業界稱為Jazelle RCT技術，於2005年發表，首見於 Cortex-A8 處理器。ThumbEE 提供從 Thumb-2 而來的一些擴充性，在所處的執行環境（Execution Environment）下，使得指令集能特別適用於執行階段（Runtime）的編碼產生（例如即時編譯）。Thumb-2EE 是專為一些語言如 Limbo、Java、C#、Perl 和 Python，並能讓 即時編譯器 能夠輸出更小的編譯碼卻不會影響到效能。

ThumbEE 所提供的新功能，包括在每次存取指令時自動檢查是否有無效指標，以及一種可以執行陣列範圍檢查的指令，並能夠分支到分類器（handlers），其包含一小部份經常呼叫的編碼，通常用於高階語言功能的實作，例如對一個新物件做記憶體配置。

3, cortex-a8不支持TCM, 目前还不知道用什么代替. 
参见"16:16 2009-11-5"2-1)

4, "2.9 Data types": 支持double word(64bit)

5, <TODO>阅读到"p73"</TODO>

9:53 2009-10-28
VC1600, VC0882, VC0718, cortex-a8, TI omap3530, cortex-a8开发板(TI omap3530)补充调查
1, 开发板(google+taobao搜索)
1), 北京瑞泰创新, ICETEK-OMAP3530-EVM
http://www.realtimedsp.com.cn/product/detail.asp?ID=287
瑞泰的omap3530开发板和天漠(英倍特)都是推出比较早的omap3板子. 
瑞泰还有一个mini板, 淘宝报价1500左右. 可以问一下功能差异.
Tel:010-62105690(8线)/91－97
Support:welcome@realtimedsp.com.c

1), 龙人, DMC-OMAP3530开发板
http://www.embsky.com/product_view.asp?id=205
联 系 地 址：深圳市福田区福虹路世界贸易广场B座12F/13F
地 区 邮 编：518052
联 系 电 话：+86-0755-25327151/83690619/83690800
传       真：+86-0755-83346949/83679983
邮       箱：market2@pcblab.net
我 们 网 站：http://www.embsky.com
2), 
http://www.ema-tech.com/home/shownews.php?a_id=77
咨询和购买联系方式：
固话：020-61230220/61230221
手机：18922754957
联系人：符先生、梁先生

2, 系统要求
1), OS支持, Linux和winCE要求直接能跑, 可以自己编译. 最好能跑android;
2), 直接有对应的lcd, 一般是400x282, 最好是800x480的.
3), 输入设备: 支持usb鼠标和键盘或触摸屏, 最好都支持. 
4), 2d/3d demo
5), 其它: 有无摄像头模块.

10:48 2009-10-28
VC1600, VC0882, 2d/3d, TI OMAP3530
TI OMAP3530的2d/3d是POWERVR公司的: 
The SGX is an instantiation of the POWERVR? SGX from Imagination Technologies? Ltd.
从POWERVR公司看是"SGX Series5 Graphics IP Core", http://www.imgtec.com/powervr/sgx_series5.asp: 
The POWERVR SGX Series5 Graphics Processing Unit (GPU) IP core family is a series of highly efficient graphics acceleration IP cores that meets the multimedia requirements of a wide range of next generation consumer, communications and computing applications.
POWERVR SGX Series5 architecture is fully scalable for a wide range of area and performance requirements, enabling it to target a wide range of markets from low cost feature-rich mobile multimedia products to very high performance consoles and computing devices.
The family incorporates the revolutionary Universal Scalable Shader Engine (USSE), with a feature set that exceeds the requirements of OpenGL 2.0 and Microsoft Shader Model 3, enabling 2D, 3D and general purpose (GP-GPU) processing in a single core.

12:51 2009-10-28
时间管理
1, 计划:

2, 执行:
1), 9:53-11:40 TI OMAP3530 cortex-a8 开发板选型;
2), 午饭;
3), 12:53-14:00 TI OMAP3530 cortex-a8 开发板选型, 续. 
4), 14:02-16:00 VC0718 MRD.
5), 16:00-17:03 TI OMAP3530 cortex-a8 开发板选型, 续. 
6), 17:05-18:46 cortex-a8学习

13:25 2009-10-28
VC1600, VC0882, VC0718, cortex-a8, TI omap3530, cortex-a8开发板(TI omap3530)补充调查, POP封装(Package On Package, 芯片摞在一起)
1, 天漠
1), 
(1), 能不能把mddr, flash扩大: 下月会买的底板核心板的OMAP3530开发板是512的memory, 而且支持wifi, gps. 
(2), 有没有DVI转VGA接口. 忽略.
(3), usb host到底支持如何, 送的usb hub是给USB OTG用的? 忽略.
(4), sdio wifi支持如何? 无模块.
(5), 是否需要模拟摄像头模块(需要买一个转接板和摄像头模块). 293+293.
2), Mini8100核心板
http://www.timll.com/chinese/OMAP/mini8100.asp
底板要11月出. 

2, LiaoZhiCheng邮件"开发板"20091028_1646
今天重新质询了全国现有cortex-a8开发板的公司（暂时有的全国就4家，分别如下），
1. 天漠(英倍特) DevKit8000
http://www.timll.com/chinese/OMAP/devkit8000.asp
2. 北京瑞泰创新, ICETEK-OMAP3530-EVM
http://www.realtimedsp.com.cn/product/detail.asp?ID=287
3. 龙人, DMC-OMAP3530开发板
http://www.embsky.com/product_view.asp?id=205
4.广州英码
http://www.ema-tech.com/home/shownews.php?a_id=77
经过对比，我跟zhanjian觉得天漠(英倍特)的板子最好，资料和接口都比较全，价格也比较低
所以我们直接选用天漠的开发板
具体信息如下：
公司：深圳天漠科技有限公司
网址：http://www.timll.com/chinese/OMAP/devkit8000.asp
联系电话：0755-25500944 / 0755-25631357
需要购买的产品型号：DevKit8000 omap3530  7寸屏完全套餐 + 摄像头子版套件
咨询价格：evKit8000 cortex-a8 7 寸屏完全套餐  不带票（1799元）， 带票（2100元）
摄像头子版套件 不带票（模块250元 + 摄像头250元 = 500元） 带票（模块293元 + 摄像头293元 = 586元）
合计价格 不带票（1799+500=2299元） 带票（2100+596=2696元）

3, (13:34 2009-10-30)
OMAP3530 BeagleBoard采用POP封装, OMAP3530上面是Micron MCP(memory和flash), 从TI OMAP3530(http://focus.ti.com.cn/cn/docs/prod/folders/print/omap3530.html)资料看, 支持POP封装的芯片是上下都有引脚的: 
515-pin s-PBGA Package (CBB Suffix), .5mm Ball Pitch (Top), .4mm Ball Pitch (Bottom)
示意图: "\\10.0.2.36\sqmshare\Share\Linux\doc\arm soc\board\TI OMAP3530\POP M(CPU and emory)_from_BeagleBoard.jpg"

17:30 2009-10-28
(15:27 2009-10-29)
VC1600, VC0882, VC0718, cortex-a8, 学习, cortex-a8, arm926, arm1176比较, 续, 性能比较
1, cortex-a8, arm11, x86性能比较, 从下面结果看, cortex-a8性能比同频率x86性能好. 
自: http://forum.linuxbj.com/node/9
1), 测试软件: nbench(用于测试处理器，存储器性能的基准测试程序)和fp_fir(单精度浮点FIR性能测试程序)
2), 新版本gcc-4.3已经加入了neon向量指令支持
在arm架构下使用向量指令自动生成功能:  
-mfloat-abi=softfp -mfpu=neon -ftree-vectorize -ffast-math

3), nbench测试:
nbench测试中, 除了浮点运算测试外(未使用cortex-a8 NEON指令), cortex-a8(OMAP3530 600MHz)与PentiumIII 800MHz在性能类似. 
(1), nbench测试MEM部分(数值大越好): 新架构的Cortex-a8和强劲的桌面x86占有很大优势，其中很大一部分是源于片上的二级CACHE结构
PentiumIII 800MHz 3.74 
OMAP3530 600MHz 3.04 
(2), nbench测试INT部分: 主频是最主要的性能因素，指令集的并行度也有很大影响，所以超标量处理器PentiumIII和Cortex-a8的优势不仅来自于主频，也来自于单周期执行多条指令、分支预测等综合能力。
PentiumIII 800MHz 3.39 
OMAP3530 600MHz 3.57 
(3), nbench测试FP部分(越大越好): 
PentiumIII 800MHz 6.62 
OMAP3530 600MHz 0.98 

4), fp_fir测试(zhangjian: finite impulse response, 有限冲击响应)
在fp_fir测试中，为了对Cortex-a8的noen向量处理能力进行对比，加入了高性能的处理器PentiumD 920 3.0GHz的对比评测。该系统配备2GB双通道DDR2内存，运行Linux-2.6.27 x86_64 64-bits系统。同样，也加入了基于老式arm920t的S3C2410“陪太子读书”
需要知道的是PentiumD 920除了拥有嵌入式处理器难以企及的3GHz主频，更有2MB L2CACHE和800MHz 64-bits前端总线，并且同样集成了SSE3 128-bit SIMD指令集。
测试结果如下, cortex-a8在极低的频率也有不错的性能:
处理器名称 1M samples 1024点单精度浮点FIR用时（越小越好）：秒 
S3C2410 200MHz softfloat  1175.22 
OMAP3530 600MHz auto vectorized  6.98
OMAP3530 600MHz manual vectorized  2.99 
PentiumD920 3.0GHz scalar fpu 6.91
PentiumD920 3.0GHz SSE3 vectorized 0.95 

2, AMBA3简述:
自: http://forum.linuxbj.com/node/12
AMBA v3规范定义了几种总线，其中
AMBA3 AXI总线是用于替代原来AHB的新一代总线，主要应用于嵌入式系统的高速互联，特别是embedded soc。
AMBA3 AHB总线用于替代原来的AHB-lite，不支持多时钟domain，并且是单工的。虽然性能上不如AXI，但是能够兼容原来的AHB-lite
AMBA3 APB总线用于替代原来的APB，基本功能一致并且保持了和老版本之间的完全兼容性
AMBA3 ATB总线用于提供一条调试总线，所有需要调试的模块可以通过ATB连接，得到调试支持
其中最新引入AXI有如下几个特点：
专为高速通讯准备的完全流水线化互联
能够高效率连接不同的异步时钟domain，简化动态能源管理
能够同时进行读写传送
对传输初始化开销大的设备支持效率较好
目前AMBA 3已经在Cortex家族中广泛使用，如cortex-a8和cortex-a9，部分arm11处理器也有采用

3, cortex-a8和arm926ej-s, arm1176差异很大
1), 从外部接口看, 
(1), arm926ej-s提供了BIU连接AHB总线, ETM接口用于trace, External coprocessor interfae, TCM interface用于连接Tight Coupled Memory, 这个接口在cortex-R,M中都有支持, cortex-A不支持. <TODO>原因未知, 查</TODO>
(2), cortex-a8的BIU则连接AXI总线; 原来的ETM通过cortex-a8提供的APB总线连接, 此外这个APB还连接CTI(Cross Tigger Interface, 用于调试)和the debug registers.
ETM也通过ATB与a8连接. 此外a8还有DFT接口便于IC流片后的测试. 
2), 工作模式:
cortex-a8有8中工作模式:
 User mode is the usual ARM program execution state, and is used for executing
most application programs
 Fast interrupt (FIQ) mode is used for handling fast interrupts
 Interrupt (IRQ) mode is used for general-purpose interrupt handling
 Supervisor mode is a protected mode for the OS
 Abort mode is entered after a data abort or prefetch abort
 System mode is a privileged user mode for the OS
 Undefined mode is entered when an Undefined Instruction exception occurs
 Monitor mode is a Secure mode for the Security Extensions Secure Monitor code.
arm1176也是8种, arm9ej是7种(没有Monitor mode).
a8的寄存器数目也从arm9ej的37增加到40个. (22:40 2010-2-23)多出的三个是monitor mode下的r13(sp, r13_mon), r14(lr, r14_mon), cpsr(SPSR_mon)"22:40 2010-2-23"end

4, cortex-a8 TRM阅读:
1), 出现Data abort时, 会把base register恢复到出现data abort出现之前的数: 
With the base restored Data Abort model, when a data abort exception occurs during the execution of a memory access instruction, the processor hardware always restores the base register to the value it contained before the instruction was executed. This removes the requirement for the Data Abort handler to unwind any base register update, that the aborted instruction might have specified. This simplifies the software Data Abort handler. 

2), 2.15.7, imprecise data abort是指访问外部设备时出现的data aboart, 发生data abort的时间是和引起data abort的指令异步的. 为了避免出现imprecise data abort时, 冲掉已有Abort mode的状态, 在CPSR中加入了A bit(CPSR[8]: imprecise data abort disable bit), A=1时表示不允许imprecise data abort发生, =0时允许发生. 进入Abort Mode, IRQ, and FIQ Modes, and on Reser时arm会自动设置A=1.
An imprecise data abort caused, for example, by an external error on a write that has been held in a write buffer, is asynchronous to the execution of the causing instruction. The imprecise data abort can occur many cycles after the instruction that caused the memory access has retired. For this reason, the imprecise data abort can occur at a time that the processor is in Abort mode because of a precise data abort, or can have live state in Abort mode, but be handling an interrupt. To avoid the loss of the Abort mode state (r14_abt and SPSR_abt) in these cases, that leads the processor to enter an unrecoverable state, the system must hold the existence of a pending imprecise data abort until a time when the Abort mode can safely be entered. A mask is included in the CPSR to indicate that an imprecise data abort can be accepted. This bit is referred to as the A bit. The imprecise data abort causes a data abort to be taken when imprecise data aborts are not masked. When imprecise data aborts are masked, then the implementation is responsible for holding the presence of a pending imprecise data abort until the mask is cleared to 0 and the abort is taken. The A bit is set to 1 automatically on entry into Abort Mode, IRQ, and FIQ Modes, and on Reset.

9:58 2009-10-29
时间管理
1, 计划
1), 今天以sdio spec为主. 要定出sd代码整理思路, 争取下班前给beizhan发邮件. 
sd代码需要对比830, 598接口要求, HeJu代码, Linux代码(mmc和sdio).
计划下周二下午开会讨论. 

2, 执行:
0), 25分钟: 阅读sdio simplified spec.
1), -9:59 杂, 邮件. 
2), -10:24 阅读linchuan memory总结
3), 11:07-11:27 830 mobile 动态切频支持. 
4), 11:28-11:40 看huangwei cortex-a8和arm1176资料, 发邮件问有无ARM ARM 7AR
5), 午饭.
6), 35分钟: 阅读sdio simplified spec.
7), 15:06-15:27 cortex-a8 TRM学习.
8), 晚上: 30分钟, arm11板子资料; 50分钟 Linux sdio代码分析. 

10:01 2009-10-29
(10:59 2009-11-10)
VC0830, VC0816, memory, linchuan memory总结, 项目总结
1, YangZuoXing邮件"转发: 830 & 816 memory review"20091029_1000
位置: "D:\work\VC0830\SV\clk_memory\VC0830&816 memory review.doc"
2, 阅读+笔记
1) AXI lite:
marb和其它master之间采用AXI lite协议. 这个协议不是AMBA(Advanced Microcontroller Bus Architecture)标准的AXI lite, 是vimicro自己定义的. 目的是改善AHB的带宽, 同时支持AHB的IP不需要做较大修改. 
830/816中没有加入的读写握手在882中已经加入:
(1), AXI要求slave即使无法接收数据也要buffer这些数据. 
(2), 写数据没有握手会降低效率. 
(3), 不使用读握手要求master必须接收读回来的数据, 这样会增加master设计难度, 但对性能影响不大.
2), marb:
marb最后综合频率超过200MHz，其流水线划分相对平衡，主要运算集中在第一级检查非法地址，主要congestion集中在data mux。由于marb一般处在floor plan的中央，所以各个对外接口的逻辑深度需要控制得很短，留出足够margin给各个master和slave
marb的综合频率瓶颈主要在data选择上。由于通道连线多，控制信号扇出大，实际延迟在chip会较module要大，需要留下margin.
4k sram本来是被usb boot增加的. 后来发现软件喜欢用这个buffer加速, 但是830中不是所有master都有权限访问(不能访问的模块地址高4位固定为0x4, 仅仅是为了省高4个bit), 造成不变. 另外这个sram有点小. 
3), APB bridge:
(1), APB时钟同步多次(印象是两次, 不确定)同步会影响配寄存器速度, 软件感觉比820慢. 
(2), 如果访问slave的错误地址, 会一直得不到响应, 830用timeout解决. 这影响效率. 
(3), BIU和ARM竞争APB总线时, 830是round robin, 实际发现BIU应该优先级更高. 
4), sdrc(这部分比较细节, 没有完成总结, 详见小本p20):
SDRC的测试在特定pattern下性能在系统的实际应用中往往很难达到。原因一方面是SDRC设计初期没有完全覆盖到软件和系统的所有高带宽case，另一方面是一些case考虑到，但SDRC解决的方案，对软件限制较大，无法最后实现。所以SDRC的性能需要在整体系统进行一定阶段的磨合调试。尤其是瞬间带宽和平均带宽之间的平衡。
SDRC的综合频率瓶颈主要在cmd queue的优先级比较，以及状态机。这两部分也是不易做流水线划分的地方，需要仔细推敲设计
SDRC在动态切频上支持的还不是很好，如在不同频率间修改DRAM的MRS，EMR配置都没做到完全自动，导致软件使用不方便。另外，830在动态切频期间，DRAM处在正常的工作状态，只是在切频的开始和结束各发出一次refresh命令来保护。这个机制还不是最安全，在816中采用动态切频期间，DRAM处在self refresh状态，是一种更安全的方式
830的地址寄存器和SDRAM写数据寄存器，直接从SDRC连到对应的PAD，所以timing margin比较少。导致一个是后端在这个本来不是关键路径上出现较大路径延迟。另一个是输出的clock本来在板级没有相位要求，但由于地址的时序紧张，需要输出的clock调整相位来补偿。816在这条路径上作了优化，地址和写数据从SDRC的寄存器出来，到phy ip直接再用寄存器采样一拍，再经过简单测试逻辑输出到PAD，满足2）和 3）的要求，板子实测结果有很大改善。

16:04 2009-10-29
VC0830, MP4量产, clkrst, clkswitch, MP4量产中遇到的切频问题总结
1, 切频时保证audio声音不变(关键是pll2不重新产生): 
pll2频率 72_36, 切频时间大约1ms, gate audio clk, dma有fifo. codec clock可以不gate.
2, 切频时保证屏正常, 且不访问memory: 
pclk打开, 其余gate. 

16:34 2009-10-29
VC1600, VC0882, VC0718, VC0830, VC0598, storage, sdio, wifi, 代码整理, sdio_register_driver是sdio设备注册函数
1, 协议和完全driver分开.
2, 发送命令和等待命令完成用不同函数实现, 这样更符合OS(Linux)架构. 
3, sdio的interrupt如何支持: 830 sdio二级中断: SDIO_CARD_INT.
4, Linux对mmc,sd/sdio的支持: 
1), 对mmc/sd支持很好.
2), sdio支持: 
(1), 27主线: uart, bluetooth, wifi(Marvell Libertas 8385 and 8686)
sdio wifi支持: http://groups.google.com/group/linux.kernel/browse_thread/thread/b60a4676725c9891/5b13f6256ab731ae?
(2), sdio stack(for 2.6.18)和openmoko都有atheros 6xxx系统 wifi支持, 此外前者还支持GPS和memory.
(3), 32主线, 从搜索(sdio_register_driver(), sdio注册函数)结果看, 增加了对dvb和wimax的支持, bluetooth支持也多了
A, bluetooth/btmrvl_sdio.c: marvell SD8688
B, bluetooth/btsdio.c: 通用bluetooth支持
C, media/dvb/siano/smssdio.c: 支持Siano SMS1xxx的DVB移动电视.
D, mmc/card/sdio_uart.c: 通用sdio uart.
E, net/wimax/i2400m/sdio.c: WIMAX_I2400M
F, net/wireless/b43/sdio.c: Broadcom 43xx SDIO device
G, net/wireless/iwmc3200wifi/sdio.c: The Intel Wireless Multicomm 3200 hardware is a combo card with GPS, Bluetooth, WiMax and 802.11 radios. It runs over SDIO and is typically found on Moorestown based platform.
H, net/wireless/libertas/if_sdio.c: Marvell Libertas 8385 and 8686
I, net/wireless/wl12xx/wl1251_sdio.c: TI wl1251 SDIO, TI方案厂商:
http://www.jorjin.com/Product_SiPmodule_WG7210.htm, http://www.52rd.com/bbs/Dispbbs.asp?BoardID=89&ID=150141, 13732663036 李先生, 
郵箱：tiborlee@wdi-ks.com.cn
J, atheros(Linux2.6.18)
a, http://www.cardaccess-inc.com/
b, http://www.dtonet.com
产品链接: http://www.dtonet.com/sx-sdwag.htm
自: http://7822liqixin.blog.yidaba.com/blogdetail/1250476.sthml
同一人的另一个链接: http://bj.zhantai.com/bj/31/117/9496985.html
联系电话：010-88578007、13901213328、13911133717
联系人：李齐心. liqixin@sina.com
c, http://www.silexamerica.com/, 中国有sales.

5, "16:55 2009-11-17"wifi芯片补充.
GainSpan GS1010: http://www.gainspan.com/products/GS1010_single__chip.php.
GainSpan是Intel投资的, 核心团队是从Intel分出来的. 
brief: "D:\work\Documentation\datasheet\wifi\GS1010"

18:43 2009-10-29
Linux移植, 内核版本, release, 2.6.31
自: http://www.cbifamily.com/software/softsystem/2009-09-16/1253072279d104679.html
Linux 2.6.31内核发布
新版本加入对USB 3.0的支持；新增字符设备的一个相当于使用用户空间文件系统（FUSE）使OSS音频与高级Linux声音架构（ALSA）相兼容的工具；改进内存管理以在桌面应用中优化交互性；改进预先读取；支持ATI Radeon Modesetting；支持Intel Wireless Multicomm 3200 Wifi设备；增加kernel支持和一个性能计数器（performance counter）的用户空间（userspace）工具；具有gcov支持；加入一个未初始化内存的内存检查工具；新增一个内存泄漏（memory leak）探测工具；增加一个在新的文件系统通知结构（filesystem notification infrastructure）之上的inotify与dnotify的重新导入（reimplementation）机制；改进btrfs；支持IEEE 802.15.4网络标准和Firewire之上的IPv4；加入许多新设备驱动；其他一些修正和改进。

21:04 2009-10-29
软件技巧, VC0830, c语言, 跳转到任意地址, 利用函数指针(blx指令)跳转到任意地址
1, by LingMing:
arm c语言中没法直接跳转到32M以外的空间, 编译会提示出错. 830中中断处理函数do_irq用如下方式跳转到中断地址, 这样跳转是不受32M限制的.
//call the ISR	  
((void (*)(void))(hal_interrupt_handlers[vector]))();	
2a5dc:	e59d2000 	ldr	r2, [sp]
2a5e0:	e59f3020 	ldr	r3, [pc, #32]	; 2a608 <.text+0x2a608>
2a5e4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
2a5e8:	e12fff33 	blx	r3
从汇编代码可以清楚看出, 编译器用blx(机器码可以看出是blx(2), 不是blx(1))指令实现跳转, blx会把返回地址写入lr.  blx是从v5开始支持的.

2, 之前我clkrst切频是用汇编代码跳转的, 自己写汇编跳转时需要考虑返回地址:  
clkrst/app/clkrst_app_switch.c: 
    asm volatile (													\
		"stmdb	sp!, {r0 - r12};"									\
		/* 临时保存要配置的sdrc_mode到sdrc_mode_tempAddr */			\
		"mov	r1, %2;"											\
		"mov	r0, %1;"											\
		"str	r0,[r1];"											\
		/* 意图是跳到"ldmia	sp!, {r0 - r12};", 考虑到流水线 */		\
		/* pc+=(36-8)=28.*/											\
		"add	r0, pc, #28;"										\
		/*r1保存的是pc_bak_addr.*/									\
		"mov	r1,	%0;"											\
		/* 保存pc指针 */											\
		"str	r0,[r1];"											\
		/*															\
		"mov	r1, #400;"											\
		"loop:	sub	r1, r1, #1;"									\
		"cmp	r1, #0;"											\
		"bne 	loop;"	*/											\
		"nop;"														\
		"nop;"														\
		"nop;"														\
		"nop;"														\
		"nop;"														\
		"mov	pc, %3;"											\
		"ldmia	sp!, {r0 - r12};"									\
	:																\
	: "r" (pc_bak_addr), "r" (sdrc_mode), "r" (sdrc_mode_tempAddr), \
	"r" (switchFunc_addr)											\
	: "cc", "r0", "r1"												\
	);

9:41 2009-10-30
软件技巧, Linux, 服务器上firefox无法打开问题的解决, 常用命令: grep, sed, cut等
1, 发现每天不用Linux快废了, 今天又想不起来提取一列是cut这个命令了.
cut: 提取某一列, "cut -d x -f n", 提取用'x'分隔的第n列(从1开始).
2, 有时服务器端firefox异常后, 再登录到服务器后firefox打不开(提示firefox已运行).
可以用"ps -U username"方式显示自己所有进程, 并杀死firefox进程. 
为了简单也可以"ps -U username | cut -d \  -f 1 | xargs kill", 这样是杀死username在服务器的所有进程(包括当前登录窗口).
感谢ZhuLiYing帮忙. 

10:27 2009-10-30
VC1600, VC0882, VC0718, jtag, openocd
1, 使用wiggler小板调试:
"--enable-parport"是使能wiggler调试接口, 包括
 wiggler The original Wiggler layout, also supported by several clones, such as the Olimex ARM-JTAG
 old amt wiggler The Wiggler configuration that comes with Amontec’s Chameleon
Programmer. The new version available from the website uses the original Wiggler
layout (’wiggler’)
 chameleon The Amontec Chameleon’s CPLD when operated in configuration
mode. This is only used to program the Chameleon itself, not a connected target.
 dlc5 The Xilinx Parallel cable III.
 triton The parallel port adapter found on the ’Karo Triton 1 Development
Board’. This is also the layout used by the HollyGates design (see
http://www.lartmaker.nl/projects/jtag/).
 flashlink The ST Parallel cable.
我那个就是wiggler. 可以先用s3c2440板子实验. 
openocd代码: openocd/src/jtag/parport.c

wiggler链接: http://www.macraigor.com/wiggler.htm

10:44 2009-10-30
时间管理
1, 计划
0), 9:15-
1), sdio协议, 
2), 周一下午linchuan讲memory, 需要提前准备周二sd ppt, 本周工作总结. 

2, 执行
1), 20分钟: sdio spec.
2), 45分钟: arm jtag.
3), 10:58-11:30 sdio spec, sdio spec大致有了了解. 
4), 午饭. 
5), -13:54, 30分钟, OMAP3530, POP封装. 
6), 14:04-14:38 sdio simplified spec 2.0 done.
7), 70分钟. qemu机制研究. 见"15:51 2009-10-30"
8), 40分钟. VC0830 Linux mmc/sd porting
8), 19:53-21:00  VC0830 Linux mmc/sd porting. 计划用"dma_alloc_coherent()"分配. 

10:58 2009-10-30
VC1600, VC0882, VC0718, storage, sdio, sdio spec学习
wifi资料: 自beizhan"\\10.0.2.36\sqmshare\Share\fengbeizhan\wifi"

阅读sdio simplified spec 2.0.
1, simplified中未写明的部分:
1), 2.4 signal pins;
2), 4.7 (4. Differences with SD Memory Specification), timing.
3), 5.3.2 Special Timing for CMD53 Multi-Block Read
4), SDIO卡如何切频到高速模式. 
5), sd 4bit时interrrupt period定义. 不知道这个, 可能会影响4bit时中断调试.(可能一般情况下sdio module会自动监测到, VC0882 sdio mas中有部分描述)

2, 关于timeout
p5,p6写明CMD5, ACMD41的timeout是1s, sdio spec说: 这个数值可以从sd spec Ncr查到. 但Ncr只是cycle数. 不到1s. \todo查.

3, I/O卡进入command状态前只能使用CMD0, CMD3, CMD5, CMD7;
memory卡进入trans状态前只能使用CMD0, ACMD41, CMD2, CMD3, CMD7

4, (14:15 2009-10-30)Fuction
1), FSx Current Transaction
0000 Transaction of function 0 (CIA)
0001-0111 Transaction to functions 1-7
1000 Transaction of memory in combo card
2), FBR:
FBR 0x100[3:0]如果是0xF, 表示This function supports an SDIO standard interface number greater than 0xE. In this case, the value in byte 0x101 identifies the standard SDIO interfaces type.
3), 设置block size只能用CMD52, 不能用CMD53(返回OUT_OF_RANGE error):
host sets the block size for a function’s multiple block transfers by writing to the 16-bit Function I/O Block Size register in the FBR (see Table 6-4). The host shall not write this register using CMD53 with Block Mode set to 1. If the card detects an invalid block size before executing CMD53 with Block Mode set to 1, it shall indicate an OUT_OF_RANGE error in the current response and shall not perform data transfer. This will also stop the interrupt period (see section 8.1.3)
4), CSA(Code Storage Area):
The data stored in the CSA shall be structured using the FAT12/FAT16 format.

14:25 2009-10-30
VC1600, VC0882, VC0718, storage, sdio, sdio spec学习, 续
1, sdio与mmc/sd差异:
1), 初始化流程: 现有代码已经实现;
2), 命令: CMD5(已支持), CMD52, CMD53: 现有代码未实现;

15:51 2009-10-30
VC1600, VC0882, VC0830, cortex-a8, 研究qemu模拟cortex-a8, 研究qemu加入VC0830的可行性
1, qemu-0.11.0
下载了qemu-0.11.0, 发现代码结构有改变. 
编译: ./configure --target-list="arm-softmmu arm-linux-user armeb-linux-user" --disable-kvm && make
kvm可以加速, 需要2.6.29以上支持. 

2, 关于processor id(jtag中称为"device id"):
1), arm系列CPU都能读到这个ID(C15的c0), cortex-a8虽然不再支持jtag, 但是仍然符合jtag的命名规则. qemu过程正好相反:
cpu_arm_init()(target-arm/helper.c):
 * cpu_arm_find_by_name() 根据用户传入的 cpu_model 查找到 processsor id, 并把这
 * 个id写入到 cpu15 c0 cpuid

2), 举几个例子: 
(1), A8(r1p1, a8第一版是r1p0): 
Main ID Register 0x411FC081
FPSID Register 0x410330C1
A8最新版(r3p2): 
Main ID Register 0x413FC082
FPSID Register 0x410330C3
qemu中支持的cortex-a8的id是0x411FC080, 说明是r1p0版本的a8.
(2), arm926ej-s: 0x41069265
3), 规则: 参考cortex-a8 TRM, 可以知道:
Bits Field Function
[31:24] Implementor Indicates the implementor, ARM: 0x41.
[23:20] Variant Indicates the variant number, or major revision, of the processor: 0x3.
[19:16] Architecture Indicates that the architecture is given in the feature registers: 0xF.
[15:4] Primary part number Indicates the part number, Cortex-A8: 0xC08.
[3:0] Revision Indicates the revision number, or minor revision, of the processor: 0x2.
(1), 参考ARM_ARM可以知道Implementor: 
Bits[31:24] of the main ID register contain an implementor code.
The following codes are defined (all other values of the architecture code are reserved by ARM Limited.):
0x41 A (ARM Limited)
0x44 D (Digital Equipment Corporation)
0x4D M (Motorola - Freescale Semiconductor Inc.)
0x56 V (Marvell Semiconductor Inc.)
0x69 i (Intel Corporation)
(2), [15:4]
0xc08, 0xc=12: 表示cortex(arm12), 0表示cortex-a系列(因为cortex-M3是0x410fc231), 8表示cortex-a8的8.
之前arm1176用b76表示. 所以看这几位就知道arm的版本了. 

3, 对应开发板的初始化在hw目录的xxx.c中的xxx_init中. 
hw目录包括所有硬件的模拟代码. 

4, 具体模块, 例如timer需要板子自己实现. 通用的mmc/sd qemu已有支持, 基本只需要做接口. 
简单看了看timer的代码量, 感觉比timer验证c代码略多. 

18:40 2009-10-30
Linux移植, VC0830, storage, sdio
1, 寄存器读写函数加入IO_ADDRESS, 只如下结果的都可以:
#define SdioBase_SelectSocket(x)		HAL_WRITE_UINT32_BITVAL(SDIO_DEVICE_SEL, 0, 0, (x))
除了下面这个(HAL_READ_REG外面有括号): 
#define SdioBase_GetCurSocket()			(HAL_READ_REG(SDIO_DEVICE_SEL) & 1)

find: "(#define\ [A-Za-z0-9_]*\(.*\)[\ \t]*[A-Z0-9_]*\()([A-Z0-9_]*)(,*.*\))"
replace: "\1IO_ADDRESS(\2)\3"

19:57 2009-10-30
加班
1, 10-15起到10月30日, 共加班9个晚上, 加班时间大于30小时. 
2, 计划: 11.1加班8小时. 后面两周每周加班4个晚上(4x3)+周末: (4x3+6)x2=36小时. 
这样这个月总加班时间是74小时. 
(17:12 2009-11-10)
10月31日-11月10日共加班22小时. 目前总加班时间是52小时. 
3, 计划本周再加班两个晚上(6小时, 需要早晨9点到公司), 14日加班8小时. 这样总加班时间是52+3x2+8=66小时. 

20:55 2009-10-30
Linux移植, kernel, 内存分配
Linux 内核中的内存分配
自: http://blog.chinaunix.net/u2/78837/showart_1270427.html
posted in Linux Kernel & Driver |
本文出处:http://www.mykernelspace.com  (转载请保留此行，谢谢)
既然说到了内存管理，就顺带说一下内存分配。内存的管理细节以及实现可以看mm部分的源码。暴露给内核程序员的基本内存分配函数是经常要用到的东东。
简单说来，有三种分配内存的方法：
* kmalloc：这个用到很多。这个函数将会分配一片连续的物理内存。通常分配连续物理内存的好处就是构造页表的时候开销很低（通常线性地址加上一个偏移就是物理地址），同时访问起来效率也高。当然连续的物理内存也是很宝贵的资源。内核中使用的buddy algorithm和slab机制都是为了尽量减少内存碎片，增加连续内存分配成功的几率。kmalloc有很多mode，比如说GFP_KERNEL， GFP_ATOMIC。这些mode其实是一些更细节的flag的组合，比如说 GFP_KERNEL 就是 __GFP_WAIT | __GFP_IO | __GFP_FS ； 而 GFP_ATOMIC 就是 __GFP_HIGH。在一些中断处理中需要内存分配立刻返回，这样就需要不同的kmalloc 模式。这些flag具体的意思可以参考LDD3的第八章。 
* kmem_cache：这个是Linux内核Slab机制提供的特殊的内存分配函数。“slab”直译过来就是“水泥预制板”:) 其实这个名字非常的形象。内核中经常要分配一些常用的struct，比如说filp, task_struct, file等等。Slab是一个lookaside cache机制，在内存中会创建一个memory pool。这个pool里面当然就是这些指定大小的object。这样分配或者释放起来都很高效（省去了内存分配和初始化的过程）。 
*  __get_free_pages：是直接获取整页的内存（页数是2的幂）。其实kmalloc在实现的时候也调用了这个函数。当需要分配大量的内存的时候，使用这个函数能够提高效率。 
* vmalloc：这个函数分配一片连续的“虚拟内存”。也就是说返回的线性地址虽然是连续的，但是映射到的物理内存是不连续的，而且跟物理地址可能不是一一对应的（不同于kmalloc和__get_free_pages）。所以在使用分配到的内存时，页表的查询比较频繁，所以效率相对较低。但是 LDD3中提到了Linux内核在create_module的时候，采用的就是vmalloc。我看了看/proc/kallsyms，我load的 module里面的symbol确实都分布在不同的内存区域。 
