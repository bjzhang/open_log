diff -up libvirt-0.9.12.orig.0627/src/libxl/libxl_driver.c libvirt-0.9.12/src/libxl/libxl_driver.c
--- libvirt-0.9.12.orig.0627/src/libxl/libxl_driver.c	2012-06-28 11:40:18.000000000 +0800
+++ libvirt-0.9.12/src/libxl/libxl_driver.c	2012-06-28 11:33:26.000000000 +0800
@@ -117,6 +117,7 @@ VIR_ENUM_IMPL(libxlDomainAsyncJob, LIBXL
 static int
 libxlDomainObjInitJob(libxlDomainObjPrivatePtr priv)
 {
+    VIR_INFO("");
     memset(&priv->job, 0, sizeof(priv->job));
 
     if (virCondInit(&priv->job.cond) < 0)
@@ -127,6 +128,7 @@ libxlDomainObjInitJob(libxlDomainObjPriv
         return -1;
     }
 
+    VIR_INFO("successful");
     return 0;
 }
 
@@ -134,6 +136,7 @@ static void
 libxlDomainObjResetJob(libxlDomainObjPrivatePtr priv)
 {
     struct libxlDomainJobObj *job = &priv->job;
+    VIR_INFO("");
 
     job->active = LIBXL_JOB_NONE;
     job->owner = 0;
@@ -143,6 +146,7 @@ static void
 libxlDomainObjResetAsyncJob(libxlDomainObjPrivatePtr priv)
 {
     struct libxlDomainJobObj *job = &priv->job;
+    VIR_INFO("");
 
     job->asyncJob = LIBXL_ASYNC_JOB_NONE;
     job->asyncOwner = 0;
@@ -155,19 +159,23 @@ libxlDomainObjResetAsyncJob(libxlDomainO
 static void
 libxlDomainObjFreeJob(libxlDomainObjPrivatePtr priv)
 {
+    VIR_INFO("");
     ignore_value(virCondDestroy(&priv->job.cond));
     ignore_value(virCondDestroy(&priv->job.asyncCond));
+    VIR_INFO("done");
 }
 
 static bool
 libxlDomainTrackJob(enum libxlDomainJob job)
 {
+    VIR_INFO("");
     return (LIBXL_DOMAIN_TRACK_JOBS & JOB_MASK(job)) != 0;
 }
 
 static void
 libxlDomainObjSaveJob(libxlDriverPrivatePtr driver, virDomainObjPtr obj)
 {
+    VIR_INFO("");
     if (!virDomainObjIsActive(obj)) {
         /* don't write the state file yet, it will be written once the domain
          * gets activated */
@@ -176,11 +184,13 @@ libxlDomainObjSaveJob(libxlDriverPrivate
 
     if (virDomainSaveStatus(driver->caps, driver->stateDir, obj) < 0)
         VIR_WARN("Failed to save status on vm %s", obj->def->name);
+    VIR_INFO("done");
 }
 
 static bool
 libxlDomainNestedJobAllowed(libxlDomainObjPrivatePtr priv, enum libxlDomainJob job)
 {
+    VIR_INFO("");
     return !priv->job.asyncJob || (priv->job.mask & JOB_MASK(job)) != 0;
 }
 
@@ -189,6 +199,7 @@ libxlDomainObjSetAsyncJobMask(virDomainO
                              unsigned long long allowedJobs)
 {
     libxlDomainObjPrivatePtr priv = obj->privateData;
+    VIR_INFO("");
 
     if (!priv->job.asyncJob)
         return;
@@ -215,6 +226,7 @@ libxlDomainObjBeginJobInternal(libxlDriv
     unsigned long long then;
     bool nested = job == LIBXL_JOB_ASYNC_NESTED;
 
+    VIR_INFO("");
     priv->jobs_queued++;
 
     if (virTimeMillisNow(&now) < 0)
@@ -222,8 +234,11 @@ libxlDomainObjBeginJobInternal(libxlDriv
     then = now + LIBXL_JOB_WAIT_TIME;
 
     virDomainObjRef(obj);
-    if (driver_locked)
+    VIR_INFO(": virDomainObjRef done");
+    if (driver_locked) {
         libxlDriverUnlock(driver);
+        VIR_INFO(": libxlDriverUnlock done");
+    }
 
 retry:
     if (driver->max_queued &&
@@ -232,11 +247,13 @@ retry:
     }
 
     while (!nested && !libxlDomainNestedJobAllowed(priv, job)) {
+        VIR_INFO("");
         if (virCondWaitUntil(&priv->job.asyncCond, &obj->lock, then) < 0)
             goto error;
     }
 
     while (priv->job.active) {
+        VIR_INFO("");
         if (virCondWaitUntil(&priv->job.cond, &obj->lock, then) < 0)
             goto error;
     }
@@ -252,11 +269,13 @@ retry:
         VIR_DEBUG("Starting job: %s (async=%s)",
                    libxlDomainJobTypeToString(job),
                    libxlDomainAsyncJobTypeToString(priv->job.asyncJob));
+        VIR_INFO("");
         priv->job.active = job;
         priv->job.owner = virThreadSelfID();
     } else {
         VIR_DEBUG("Starting async job: %s",
                   libxlDomainAsyncJobTypeToString(asyncJob));
+        VIR_INFO("");
         libxlDomainObjResetAsyncJob(priv);
         priv->job.asyncJob = asyncJob;
         priv->job.asyncOwner = virThreadSelfID();
@@ -264,14 +283,17 @@ retry:
     }
 
     if (driver_locked) {
+        VIR_INFO("driver lock start");
         virDomainObjUnlock(obj);
         libxlDriverLock(driver);
         virDomainObjLock(obj);
+        VIR_INFO("driver lock done");
     }
 
     if (libxlDomainTrackJob(job))
         libxlDomainObjSaveJob(driver, obj);
 
+
     return 0;
 
 error:
@@ -319,6 +341,7 @@ static int
 libxlDomainObjEndAsyncJob(libxlDriverPrivatePtr driver, virDomainObjPtr obj)
 {
     libxlDomainObjPrivatePtr priv = obj->privateData;
+    VIR_INFO("done");
 
     priv->jobs_queued--;
 
@@ -328,6 +351,7 @@ libxlDomainObjEndAsyncJob(libxlDriverPri
     libxlDomainObjResetAsyncJob(priv);
     libxlDomainObjSaveJob(driver, obj);
     virCondBroadcast(&priv->job.asyncCond);
+    VIR_INFO("virCondBroadcast done");
 
     return virDomainObjUnref(obj);
 }
@@ -338,6 +362,7 @@ libxlMigrationJobStart(libxlDriverPrivat
                       enum libxlDomainAsyncJob job)
 {
     libxlDomainObjPrivatePtr priv = vm->privateData;
+    VIR_INFO("");
 
     if (libxlDomainObjBeginAsyncJobWithDriver(driver, vm, job) < 0)
         return -1;
@@ -351,6 +376,7 @@ libxlMigrationJobStart(libxlDriverPrivat
     }
 
     priv->job.info.type = VIR_DOMAIN_JOB_UNBOUNDED;
+    VIR_INFO("done");
 
     return 0;
 }
@@ -358,6 +384,7 @@ libxlMigrationJobStart(libxlDriverPrivat
 static int
 libxlMigrationJobFinish(libxlDriverPrivatePtr driver, virDomainObjPtr vm)
 {
+    VIR_INFO("done");
     return libxlDomainObjEndAsyncJob(driver, vm);
 }
 /* job function finish */
@@ -366,6 +393,7 @@ static void *
 libxlDomainObjPrivateAlloc(void)
 {
     libxlDomainObjPrivatePtr priv;
+    VIR_INFO("");
 
     if (VIR_ALLOC(priv) < 0)
         return NULL;
@@ -377,6 +405,7 @@ libxlDomainObjPrivateAlloc(void)
     priv->waiterFD = -1;
     priv->eventHdl = -1;
 
+    VIR_INFO("successful");
     return priv;
 
 error:
@@ -2167,7 +2196,13 @@ libxlDoDomainSave(libxlDriverPrivatePtr
         goto cleanup;
     }
 
-    if (libxl_domain_suspend(&priv->ctx, NULL, vm->def->id, fd) != 0) {
+    virDomainObjUnlock(vm);
+    libxlDriverUnlock(driver);
+    ret = libxl_domain_suspend(&priv->ctx, NULL, vm->def->id, fd);
+    libxlDriverLock(driver);
+    virDomainObjLock(vm);
+ 
+    if (ret != 0) {
         libxlError(VIR_ERR_INTERNAL_ERROR,
                     _("Failed to save domain '%d' with libxenlight"),
                     vm->def->id);
@@ -4312,28 +4347,18 @@ cleanup:
     return;
 }
 
-static int doMigrateSend(virDomainPtr dom, unsigned long flags, int sockfd)
+static int doMigrateSend(libxlDriverPrivatePtr driver, virDomainObjPtr vm, unsigned long flags, int sockfd)
 {
-    libxlDriverPrivatePtr driver = dom->conn->privateData;
-    virDomainObjPtr vm;
     libxlDomainObjPrivatePtr priv;
     libxl_domain_suspend_info suspinfo;
     virDomainEventPtr event = NULL;
     int live = 0;
     int ret = -1;
 
+    VIR_INFO("");
     if (flags & VIR_MIGRATE_LIVE)
         live = 1;
 
-    vm = virDomainFindByUUID(&driver->domains, dom->uuid);
-    if (!vm) {
-        char uuidstr[VIR_UUID_STRING_BUFLEN];
-        virUUIDFormat(dom->uuid, uuidstr);
-        libxlError(VIR_ERR_OPERATION_INVALID,
-                         _("no domain with matching uuid '%s'"), uuidstr);
-        goto cleanup;
-    }
-
     priv = vm->privateData;
 
     /* read fixed message from dest (ready to receive) */
@@ -4346,12 +4371,20 @@ static int doMigrateSend(virDomainPtr do
     memset(&suspinfo, 0, sizeof(suspinfo));
     if (live == 1)
         suspinfo.flags |= XL_SUSPEND_LIVE;
-    if (libxl_domain_suspend(&priv->ctx, &suspinfo, vm->def->id, sockfd) != 0) {
+
+    VIR_INFO("suspend start");
+    virDomainObjUnlock(vm);
+    libxlDriverUnlock(driver);
+    ret = libxl_domain_suspend(&priv->ctx, &suspinfo, vm->def->id, sockfd);
+    libxlDriverLock(driver);
+    virDomainObjLock(vm);
+    if (ret != 0) {
         libxlError(VIR_ERR_INTERNAL_ERROR,
                     _("Failed to save domain '%d' with libxenlight"),
                     vm->def->id);
         goto cleanup;
     }
+    VIR_INFO("suspend successful");
 
     /* read fixed message from dest (receive completed) */
     if (libxlCheckMessageBanner(sockfd, migrate_receiver_ready,
@@ -4374,10 +4407,9 @@ static int doMigrateSend(virDomainPtr do
     ret = 0;
 
 cleanup:
-    if (vm)
-        virDomainObjUnlock(vm);
     if (event)
         libxlDomainEventQueue(driver, event);
+    VIR_INFO("");
     return ret;
 }
 
@@ -4548,11 +4580,18 @@ libxlDomainMigratePerform3(virDomainPtr
     int sockfd = -1;
     int ret = -1;
     virDomainObjPtr vm;
-    vm = virDomainFindByUUID(&driver->domains, dom->uuid);
 
     virCheckFlags(LIBXL_MIGRATION_FLAGS, -1);
 
     libxlDriverLock(driver);
+    vm = virDomainFindByUUID(&driver->domains, dom->uuid);
+    if (!vm) {
+        char uuidstr[VIR_UUID_STRING_BUFLEN];
+        virUUIDFormat(dom->uuid, uuidstr);
+        libxlError(VIR_ERR_OPERATION_INVALID,
+                         _("no domain with matching uuid '%s'"), uuidstr);
+        goto cleanup;
+    }
 
     if (doParseURI(uri, &hostname, &port))
         goto cleanup;
@@ -4575,7 +4614,7 @@ libxlDomainMigratePerform3(virDomainPtr
 
     sockfd = virNetSocketGetFD(sock);
     libxlMigrationJobStart(driver, vm, LIBXL_ASYNC_JOB_MIGRATION_OUT);
-    ret = doMigrateSend(dom, flags, sockfd);
+    ret = doMigrateSend(driver, vm, flags, sockfd);
     libxlMigrationJobFinish(driver, vm);
 
 cleanup:
