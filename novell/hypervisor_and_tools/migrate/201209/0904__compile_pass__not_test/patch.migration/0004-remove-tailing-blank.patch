From f1bf2337afbd576c2d2b8fac8c3114ac7a6f29d5 Mon Sep 17 00:00:00 2001
From: Bamvor Jian Zhang <bjzhang@suse.com>
Date: Tue, 4 Sep 2012 14:19:04 +0800
Subject: [PATCH 4/4] remove tailing blank

---
 src/libxl/libxl_driver.c | 58 ++++++++++++++++++++++++------------------------
 1 file changed, 29 insertions(+), 29 deletions(-)

diff --git a/src/libxl/libxl_driver.c b/src/libxl/libxl_driver.c
index 3fe5375..eba3368 100644
--- a/src/libxl/libxl_driver.c
+++ b/src/libxl/libxl_driver.c
@@ -4417,11 +4417,11 @@ static int libxlCheckMessageBanner(int fd, const char *banner, int banner_sz)
     char buf[banner_sz];
     int ret = 0;
 
-    do { 
+    do {
         ret = saferead(fd, buf, banner_sz);
     } while ( -1 == ret && EAGAIN == errno );
 
-    if ( ret != banner_sz || memcmp(buf, banner, banner_sz) ) 
+    if ( ret != banner_sz || memcmp(buf, banner, banner_sz) )
         return -1;
 
     return 0;
@@ -4440,7 +4440,7 @@ static int doParseURI(const char *uri, char **p_hostname, int *p_port)
         int n;
 
         if (virStrToLong_i(p+1, NULL, 10, &port_nr) < 0) {
-            virReportError(VIR_ERR_INVALID_ARG, "%s", 
+            virReportError(VIR_ERR_INVALID_ARG, "%s",
                         _("Invalid port number"));
             return -1;
         }
@@ -4448,7 +4448,7 @@ static int doParseURI(const char *uri, char **p_hostname, int *p_port)
         /* Get the hostname. */
         n = p - uri; /* n = Length of hostname in bytes. */
         if (n <= 0) {
-            virReportError(VIR_ERR_INVALID_ARG, "%s", 
+            virReportError(VIR_ERR_INVALID_ARG, "%s",
                        _("Hostname must be specified in the URI"));
             return -1;
         }
@@ -4502,7 +4502,7 @@ libxlDomainMigrateBegin3(virDomainPtr domain,
         goto cleanup;
 
     if (!virDomainObjIsActive(vm)) {
-        virReportError(VIR_ERR_OPERATION_INVALID, "%s", 
+        virReportError(VIR_ERR_OPERATION_INVALID, "%s",
                          _("domain is not running"));
         goto endjob;
     }
@@ -4520,8 +4520,8 @@ libxlDomainMigrateBegin3(virDomainPtr domain,
 
     ret = 0;
 endjob:
-    if ( ret < 0 ) 
-        if (libxlMigrationJobFinish(driver, vm) == 0) 
+    if ( ret < 0 )
+        if (libxlMigrationJobFinish(driver, vm) == 0)
             vm = NULL;
 cleanup:
     if (vm)
@@ -4548,7 +4548,7 @@ static void doMigrateReceive(void *opaque)
     } while(recv_fd < 0 && errno == EINTR);
 
     if (recv_fd < 0) {
-        virReportError(VIR_ERR_OPERATION_FAILED, "%s", 
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
                    _("Could not accept migration connection"));
         goto cleanup;
     }
@@ -4556,7 +4556,7 @@ static void doMigrateReceive(void *opaque)
 
     len = sizeof(migrate_receiver_banner);
     if (safewrite(recv_fd, migrate_receiver_banner, len) != len) {
-        virReportError(VIR_ERR_OPERATION_FAILED, "%s", 
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
                          _("Failed to write migrate_receiver_banner"));
         goto cleanup;
     }
@@ -4567,19 +4567,19 @@ static void doMigrateReceive(void *opaque)
     libxlDriverLock(driver);
     virDomainObjLock(vm);
     if ( ret < 0) {
-        virReportError(VIR_ERR_INTERNAL_ERROR, "%s", 
+        virReportError(VIR_ERR_INTERNAL_ERROR, "%s",
                     _("Failed to restore domain with libxenlight"));
-        //bamvor: this should handled by Finish3 while cancelled == 1
-//        if (!vm->persistent) {
-//            virDomainRemoveInactive(&driver->domains, vm);
-//            vm = NULL;
-//        }
+        //bamvor: this should handled by Finish3 while cancelled == 1 ?
+        if (!vm->persistent) {
+            virDomainRemoveInactive(&driver->domains, vm);
+            vm = NULL;
+        }
         goto cleanup;
     }
 
     len = sizeof(migrate_receiver_ready);
     if (safewrite(recv_fd, migrate_receiver_ready, len) != len) {
-        virReportError(VIR_ERR_OPERATION_FAILED, "%s", 
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
                          _("Failed to write migrate_receiver_ready"));
     }
 
@@ -4625,7 +4625,7 @@ static int doMigrateSend(libxlDriverPrivatePtr driver, virDomainObjPtr vm, unsig
     libxlDriverLock(driver);
     virDomainObjLock(vm);
     if (ret != 0) {
-        virReportError(VIR_ERR_INTERNAL_ERROR, 
+        virReportError(VIR_ERR_INTERNAL_ERROR,
                     _("Failed to save domain '%d' with libxenlight"),
                     vm->def->id);
         goto cleanup;
@@ -4684,7 +4684,7 @@ libxlDomainMigratePrepare3(virConnectPtr dconn,
 
     libxlDriverLock(driver);
     if (!dom_xml) {
-        virReportError(VIR_ERR_OPERATION_INVALID, "%s", 
+        virReportError(VIR_ERR_OPERATION_INVALID, "%s",
                          _("no domain XML passed"));
         goto cleanup;
     }
@@ -4751,7 +4751,7 @@ libxlDomainMigratePrepare3(virConnectPtr dconn,
 
     sockfd = socket(AF_INET, SOCK_STREAM, 0);
     if (sockfd == -1) {
-        virReportError(VIR_ERR_OPERATION_FAILED, "%s", 
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
                    _("Failed to create socket for incoming migration"));
         goto endjob;
     }
@@ -4762,13 +4762,13 @@ libxlDomainMigratePrepare3(virConnectPtr dconn,
     addr.sin_addr.s_addr = htonl(INADDR_ANY);
 
     if (bind(sockfd, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
-        virReportError(VIR_ERR_OPERATION_FAILED, "%s", 
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
                    _("Fail to bind port for incoming migration"));
         goto endjob;
     }
 
     if (listen(sockfd, MAXCONN_NUM) < 0){
-        virReportError(VIR_ERR_OPERATION_FAILED, "%s", 
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
                    _("Fail to listen to incoming migration"));
         goto endjob;
     }
@@ -4794,8 +4794,8 @@ libxlDomainMigratePrepare3(virConnectPtr dconn,
     goto end;
 
 endjob:
-    if ( ret < 0 ) 
-        if (libxlMigrationJobFinish(driver, vm) == 0) 
+    if ( ret < 0 )
+        if (libxlMigrationJobFinish(driver, vm) == 0)
             vm = NULL;
 cleanup:
     if (VIR_CLOSE(sockfd) < 0)
@@ -4837,7 +4837,7 @@ libxlDomainMigratePerform3(virDomainPtr dom,
     if (!vm) {
         char uuidstr[VIR_UUID_STRING_BUFLEN];
         virUUIDFormat(dom->uuid, uuidstr);
-        virReportError(VIR_ERR_OPERATION_INVALID, 
+        virReportError(VIR_ERR_OPERATION_INVALID,
                          _("no domain with matching uuid '%s'"), uuidstr);
         goto cleanup;
     }
@@ -4856,7 +4856,7 @@ libxlDomainMigratePerform3(virDomainPtr dom,
     }
 
     if (virNetSocketNewConnectTCP(hostname, servname, &sock) < 0 ){
-        virReportError(VIR_ERR_OPERATION_FAILED, "%s", 
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
                    _("Failed to create socket"));
         goto cleanup;
     }
@@ -4864,8 +4864,8 @@ libxlDomainMigratePerform3(virDomainPtr dom,
     sockfd = virNetSocketGetFD(sock);
     ret = doMigrateSend(driver, vm, flags, sockfd);
 cleanup:
-    if ( ret < 0 ) 
-        if (libxlMigrationJobFinish(driver, vm) == 0) 
+    if ( ret < 0 )
+        if (libxlMigrationJobFinish(driver, vm) == 0)
             vm = NULL;
     virObjectUnref(sock);
     VIR_FREE(hostname);
@@ -4919,7 +4919,7 @@ libxlDomainMigrateFinish3(virConnectPtr dconn,
             priv = vm->privateData;
             rc = libxl_domain_unpause(&priv->ctx, vm->def->id);
             if (rc) {
-                virReportError(VIR_ERR_OPERATION_FAILED, "%s", 
+                virReportError(VIR_ERR_OPERATION_FAILED, "%s",
                            _("Failed to unpause domain"));
                 goto error;
             }
@@ -4936,7 +4936,7 @@ libxlDomainMigrateFinish3(virConnectPtr dconn,
 
 error:
     if (libxlVmReap(driver, vm, 1, VIR_DOMAIN_SHUTOFF_SAVED)) {
-        virReportError(VIR_ERR_INTERNAL_ERROR, 
+        virReportError(VIR_ERR_INTERNAL_ERROR,
                    _("Failed to destroy domain '%d'"), vm->def->id);
         goto cleanup;
     }
-- 
1.7.12

