From 1ee1d281cd786bfb7fdfbb0b698bfddd294e27f6 Mon Sep 17 00:00:00 2001
From: Bamvor Jian Zhang <bjzhang@suse.com>
Date: Thu, 13 Sep 2012 14:02:23 +0800
Subject: [PATCH 3/3] Add Migration for libxl

It is not worked after update to the lastest libvirt upstream.
And it failed after libxl_domain_suspend: libvirt think the
migration successful but xenlight do not.

Changes since Chunyan Liu Mar,28 patch
1), only unlock during libxl_domain_suspend in
libxlMigationPerform3. not unlock at the beginning of the
libxlMigationPerform3. The miration will be proteced by
async job.
2), add retry statement in libxlCheckMessageBanner. Because
the socket in libvirt is non-block. libxlCheckMessageBanner
should handle the EAGAIN.

Signed-off-by: Bamvor Jian Zhang <bjzhang@suse.com>
---
 src/libxl/libxl_conf.c   |  22 +-
 src/libxl/libxl_conf.h   |   3 +
 src/libxl/libxl_driver.c | 646 +++++++++++++++++++++++++++++++++++++++++++++++
 src/libxl/libxl_driver.h |  16 ++
 4 files changed, 674 insertions(+), 13 deletions(-)

diff --git a/src/libxl/libxl_conf.c b/src/libxl/libxl_conf.c
index e9eaed7..c5194f6 100644
--- a/src/libxl/libxl_conf.c
+++ b/src/libxl/libxl_conf.c
@@ -61,21 +61,19 @@ struct guest_arch {
 static const char *xen_cap_re = "(xen|hvm)-[[:digit:]]+\\.[[:digit:]]+-(x86_32|x86_64|ia64|powerpc64)(p|be)?";
 static regex_t xen_cap_rec;
 
-
-static int
-libxlNextFreeVncPort(libxlDriverPrivatePtr driver, int startPort)
+int
+libxlNextFreePort(virBitmapPtr bitmap, int startPort, int numPorts)
 {
     int i;
 
-    for (i = startPort ; i < LIBXL_VNC_PORT_MAX; i++) {
+    for (i = startPort ; i < startPort + numPorts; i++) {
         int fd;
         int reuse = 1;
         struct sockaddr_in addr;
         bool used = false;
 
-        if (virBitmapGetBit(driver->reservedVNCPorts,
-                            i - LIBXL_VNC_PORT_MIN, &used) < 0)
-            VIR_DEBUG("virBitmapGetBit failed on bit %d", i - LIBXL_VNC_PORT_MIN);
+        if (virBitmapGetBit(bitmap, i - startPort, &used) < 0)
+            VIR_DEBUG("virBitmapGetBit failed on bit %d", i - startPort);
 
         if (used)
             continue;
@@ -96,10 +94,8 @@ libxlNextFreeVncPort(libxlDriverPrivatePtr driver, int startPort)
             /* Not in use, lets grab it */
             VIR_FORCE_CLOSE(fd);
             /* Add port to bitmap of reserved ports */
-            if (virBitmapSetBit(driver->reservedVNCPorts,
-                                i - LIBXL_VNC_PORT_MIN) < 0) {
-                VIR_DEBUG("virBitmapSetBit failed on bit %d",
-                          i - LIBXL_VNC_PORT_MIN);
+            if (virBitmapSetBit(bitmap, i - startPort) < 0) {
+                VIR_DEBUG("virBitmapSetBit failed on bit %d", i - startPort);
             }
             return i;
         }
@@ -115,7 +111,6 @@ libxlNextFreeVncPort(libxlDriverPrivatePtr driver, int startPort)
     return -1;
 }
 
-
 static int libxlDefaultConsoleType(const char *ostype)
 {
     if (STREQ(ostype, "hvm"))
@@ -695,7 +690,8 @@ libxlMakeVfb(libxlDriverPrivatePtr driver, virDomainDefPtr def,
             /* driver handles selection of free port */
             x_vfb->vncunused = 0;
             if (l_vfb->data.vnc.autoport) {
-                port = libxlNextFreeVncPort(driver, LIBXL_VNC_PORT_MIN);
+                port = libxlNextFreePort(driver->reservedVNCPorts, LIBXL_VNC_PORT_MIN,
+                                         LIBXL_VNC_PORT_MAX - LIBXL_VNC_PORT_MIN);
                 if (port < 0) {
                     virReportError(VIR_ERR_INTERNAL_ERROR,
                                    "%s", _("Unable to find an unused VNC port"));
diff --git a/src/libxl/libxl_conf.h b/src/libxl/libxl_conf.h
index 7d30f8a..7cc2c38 100644
--- a/src/libxl/libxl_conf.h
+++ b/src/libxl/libxl_conf.h
@@ -61,6 +61,7 @@ struct _libxlDriverPrivate {
     libxl_ctx ctx;
 
     virBitmapPtr reservedVNCPorts;
+    virBitmapPtr reservedMigPorts; /* reserved migration ports */
     virDomainObjList domains;
 
     virDomainEventStatePtr domainEventState;
@@ -170,5 +171,7 @@ libxlMakeVfb(libxlDriverPrivatePtr driver, virDomainDefPtr def,
 int
 libxlBuildDomainConfig(libxlDriverPrivatePtr driver,
                        virDomainDefPtr def, libxl_domain_config *d_config);
+int
+libxlNextFreePort(virBitmapPtr bitmap, int startPort, int numPorts);
 
 #endif /* LIBXL_CONF_H */
diff --git a/src/libxl/libxl_driver.c b/src/libxl/libxl_driver.c
index ad2948f..a536c6c 100644
--- a/src/libxl/libxl_driver.c
+++ b/src/libxl/libxl_driver.c
@@ -1162,6 +1162,7 @@ libxlShutdown(void)
         VIR_FORCE_FCLOSE(libxl_driver->logger_file);
 
     virBitmapFree(libxl_driver->reservedVNCPorts);
+    virBitmapFree(libxl_driver->reservedMigPorts);
 
     VIR_FREE(libxl_driver->configDir);
     VIR_FREE(libxl_driver->autostartDir);
@@ -1218,6 +1219,10 @@ libxlStartup(int privileged) {
          virBitmapAlloc(LIBXL_VNC_PORT_MAX - LIBXL_VNC_PORT_MIN)) == NULL)
         goto out_of_memory;
 
+    if ((libxl_driver->reservedMigPorts =
+         virBitmapAlloc(LIBXL_MIGRATION_MAX_PORT - LIBXL_MIGRATION_MIN_PORT)) == NULL)
+        goto out_of_memory;
+
     if (virDomainObjListInit(&libxl_driver->domains) < 0)
         goto out_of_memory;
 
@@ -1438,6 +1443,17 @@ libxlClose(virConnectPtr conn ATTRIBUTE_UNUSED)
     return 0;
 }
 
+static int
+libxlSupportsFeature(virConnectPtr conn ATTRIBUTE_UNUSED, int feature)
+{
+    switch (feature) {
+    case VIR_DRV_FEATURE_MIGRATION_V3:
+        return 1;
+    default:
+        return 0;
+    }
+}
+
 static const char *
 libxlGetType(virConnectPtr conn ATTRIBUTE_UNUSED)
 {
@@ -4437,11 +4453,636 @@ libxlListAllDomains(virConnectPtr conn,
 
 
 
+
+static int libxlCheckMessageBanner(int fd, const char *banner, int banner_sz)
+{
+    char buf[banner_sz];
+    int ret = 0;
+
+    do {
+        ret = saferead(fd, buf, banner_sz);
+    } while ( -1 == ret && EAGAIN == errno );
+
+    if ( ret != banner_sz || memcmp(buf, banner, banner_sz) )
+        return -1;
+
+    return 0;
+}
+
+static int doParseURI(const char *uri, char **p_hostname, int *p_port)
+{
+    char *p, *hostname;
+    int port_nr = 0;
+
+    if (uri == NULL)
+        return -1;
+
+    /* URI passed is a string "hostname[:port]" */
+    if ((p = strrchr(uri, ':')) != NULL) { /* "hostname:port" */
+        int n;
+
+        if (virStrToLong_i(p+1, NULL, 10, &port_nr) < 0) {
+            virReportError(VIR_ERR_INVALID_ARG, "%s",
+                        _("Invalid port number"));
+            return -1;
+        }
+
+        /* Get the hostname. */
+        n = p - uri; /* n = Length of hostname in bytes. */
+        if (n <= 0) {
+            virReportError(VIR_ERR_INVALID_ARG, "%s",
+                       _("Hostname must be specified in the URI"));
+            return -1;
+        }
+
+        if (virAsprintf(&hostname, "%s", uri) < 0) {
+            virReportOOMError();
+            return -1;
+        }
+
+        hostname[n] = '\0';
+    }
+    else {/* "hostname" (or IP address) */
+        if (virAsprintf(&hostname, "%s", uri) < 0) {
+            virReportOOMError();
+            return -1;
+        }
+    }
+    *p_hostname = hostname;
+    *p_port = port_nr;
+    return 0;
+}
+
+static char *
+libxlDomainMigrateBegin3(virDomainPtr domain,
+                          const char *xmlin,
+                          char **cookieout ATTRIBUTE_UNUSED,
+                          int *cookieoutlen ATTRIBUTE_UNUSED,
+                          unsigned long flags,
+                          const char *dname ATTRIBUTE_UNUSED,
+                          unsigned long resource ATTRIBUTE_UNUSED)
+{
+    libxlDriverPrivatePtr driver = domain->conn->privateData;
+    virDomainObjPtr vm;
+    virDomainDefPtr def = NULL;
+    char *xml = NULL;
+    int ret = -1;
+
+    virCheckFlags(LIBXL_MIGRATION_FLAGS, NULL);
+
+    libxlDriverLock(driver);
+    vm = virDomainFindByUUID(&driver->domains, domain->uuid);
+    if (!vm) {
+        char uuidstr[VIR_UUID_STRING_BUFLEN];
+        virUUIDFormat(domain->uuid, uuidstr);
+        virReportError(VIR_ERR_OPERATION_INVALID,
+                   _("no domain with matching uuid '%s'"), uuidstr);
+        goto cleanup;
+    }
+
+    if ( libxlMigrationJobStart(driver, vm, LIBXL_ASYNC_JOB_MIGRATION_OUT) < 0)
+        goto cleanup;
+
+    if (!virDomainObjIsActive(vm)) {
+        virReportError(VIR_ERR_OPERATION_INVALID, "%s",
+                         _("domain is not running"));
+        goto endjob;
+    }
+
+    if (xmlin) {
+        if (!(def = virDomainDefParseString(driver->caps, xmlin,
+                         1 << VIR_DOMAIN_VIRT_XEN,
+                         VIR_DOMAIN_XML_INACTIVE)))
+            goto endjob;
+
+        xml = virDomainDefFormat(def, VIR_DOMAIN_XML_SECURE);
+    } else {
+        xml = virDomainDefFormat(vm->def, VIR_DOMAIN_XML_SECURE);
+    }
+
+    ret = 0;
+endjob:
+    if ( ret < 0 )
+        if (libxlMigrationJobFinish(driver, vm) == 0)
+            vm = NULL;
+cleanup:
+    if (vm)
+        virDomainObjUnlock(vm);
+    libxlDriverUnlock(driver);
+    return xml;
+}
+
+static void doMigrateReceive(void *opaque)
+{
+    migrate_receive_args *data = opaque;
+    virConnectPtr conn = data->conn;
+    int sockfd = data->sockfd;
+    virDomainObjPtr vm = data->vm;
+    libxlDriverPrivatePtr driver = conn->privateData;
+    int recv_fd;
+    struct sockaddr_in new_addr;
+    socklen_t socklen = sizeof(new_addr);
+    int len;
+    int ret = -1;
+
+    do {
+        recv_fd = accept(sockfd, (struct sockaddr *)&new_addr, &socklen);
+    } while(recv_fd < 0 && errno == EINTR);
+
+    if (recv_fd < 0) {
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
+                   _("Could not accept migration connection"));
+        goto cleanup;
+    }
+    VIR_DEBUG("Accepted migration\n");
+
+    len = sizeof(migrate_receiver_banner);
+    if (safewrite(recv_fd, migrate_receiver_banner, len) != len) {
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
+                         _("Failed to write migrate_receiver_banner"));
+        goto cleanup;
+    }
+
+    virDomainObjUnlock(vm);
+    libxlDriverUnlock(driver);
+    ret = libxlVmStart(driver, vm, false, recv_fd);
+    libxlDriverLock(driver);
+    virDomainObjLock(vm);
+    if ( ret < 0) {
+        virReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+                    _("Failed to restore domain with libxenlight"));
+        //bamvor: this should handled by Finish3 while cancelled == 1 ?
+        if (!vm->persistent) {
+            virDomainRemoveInactive(&driver->domains, vm);
+            vm = NULL;
+        }
+        goto cleanup;
+    }
+
+    len = sizeof(migrate_receiver_ready);
+    if (safewrite(recv_fd, migrate_receiver_ready, len) != len) {
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
+                         _("Failed to write migrate_receiver_ready"));
+    }
+
+cleanup:
+    if (VIR_CLOSE(recv_fd) < 0)
+        virReportSystemError(errno, "%s", _("cannot close recv_fd"));
+    if (VIR_CLOSE(sockfd) < 0)
+        virReportSystemError(errno, "%s", _("cannot close sockfd"));
+    if (vm)
+        virDomainObjUnlock(vm);
+    VIR_FREE(opaque);
+    libxlDriverUnlock(driver);
+    return;
+}
+
+static int doMigrateSend(libxlDriverPrivatePtr driver, virDomainObjPtr vm, unsigned long flags, int sockfd)
+{
+    libxlDomainObjPrivatePtr priv;
+    libxl_domain_suspend_info suspinfo;
+    virDomainEventPtr event = NULL;
+    int live = 0;
+    int ret = -1;
+
+    if (flags & VIR_MIGRATE_LIVE)
+        live = 1;
+
+    priv = vm->privateData;
+
+    /* read fixed message from dest (ready to receive) */
+    if (libxlCheckMessageBanner(sockfd, migrate_receiver_banner,
+                              sizeof(migrate_receiver_banner))) {
+        goto cleanup;
+    }
+
+    /* send suspend data */
+    memset(&suspinfo, 0, sizeof(suspinfo));
+    if (live == 1)
+        suspinfo.flags |= XL_SUSPEND_LIVE;
+
+    virDomainObjUnlock(vm);
+    libxlDriverUnlock(driver);
+    ret = libxl_domain_suspend(&priv->ctx, &suspinfo, vm->def->id, sockfd);
+    libxlDriverLock(driver);
+    virDomainObjLock(vm);
+    if (ret != 0) {
+        virReportError(VIR_ERR_INTERNAL_ERROR,
+                    _("Failed to save domain '%d' with libxenlight"),
+                    vm->def->id);
+        goto cleanup;
+    }
+
+    /* read fixed message from dest (receive completed) */
+    if (libxlCheckMessageBanner(sockfd, migrate_receiver_ready,
+                              sizeof(migrate_receiver_ready))) {
+        /* Src side should be resumed, but for ret < 0, virsh won't call Src side
+         * Confirm3, handle it here.
+         */
+        if (libxl_domain_resume(&priv->ctx, vm->def->id) != 0) {
+            VIR_DEBUG("Failed to resume domain '%d' with libxenlight",
+                      vm->def->id);
+            virDomainObjSetState(vm, VIR_DOMAIN_PAUSED, VIR_DOMAIN_PAUSED_MIGRATION);
+            event = virDomainEventNewFromObj(vm, VIR_DOMAIN_EVENT_SUSPENDED,
+                                             VIR_DOMAIN_EVENT_SUSPENDED_MIGRATED);
+            if (virDomainSaveStatus(driver->caps, driver->stateDir, vm) < 0)
+                goto cleanup;
+        }
+        goto cleanup;
+    }
+    ret = 0;
+
+cleanup:
+    if (event)
+        libxlDomainEventQueue(driver, event);
+    return ret;
+}
+
+static int
+libxlDomainMigratePrepare3(virConnectPtr dconn,
+                            const char *cookiein ATTRIBUTE_UNUSED,
+                            int cookieinlen ATTRIBUTE_UNUSED,
+                            char **cookieout ATTRIBUTE_UNUSED,
+                            int *cookieoutlen ATTRIBUTE_UNUSED,
+                            const char *uri_in,
+                            char **uri_out,
+                            unsigned long flags,
+                            const char *dname,
+                            unsigned long resource ATTRIBUTE_UNUSED,
+                            const char *dom_xml)
+{
+    libxlDriverPrivatePtr driver = dconn->privateData;
+    virDomainDefPtr def = NULL;
+    virDomainObjPtr vm = NULL;
+    char *hostname = NULL;
+    int port = 0;
+    int sockfd = -1;
+    struct sockaddr_in addr;
+    virThread migrate_receive_thread;
+    migrate_receive_args *args;
+    int ret = -1;
+
+    virCheckFlags(LIBXL_MIGRATION_FLAGS, -1);
+
+    libxlDriverLock(driver);
+    if (!dom_xml) {
+        virReportError(VIR_ERR_OPERATION_INVALID, "%s",
+                         _("no domain XML passed"));
+        goto cleanup;
+    }
+
+    def = virDomainDefParseString(driver->caps, dom_xml,
+                                 1 << VIR_DOMAIN_VIRT_XEN,
+                                 VIR_DOMAIN_XML_INACTIVE);
+
+    /* Target domain name, maybe renamed. */
+    if (dname) {
+        def->name = strdup(dname);
+        if (def->name == NULL)
+            goto cleanup;
+    }
+
+    if (virDomainObjIsDuplicate(&driver->domains, def, 1) < 0)
+        goto cleanup;
+
+    if (!(vm = virDomainAssignDef(driver->caps, &driver->domains, def, true)))
+        goto cleanup;
+
+    def = NULL;
+
+    if ( libxlMigrationJobStart(driver, vm, LIBXL_ASYNC_JOB_MIGRATION_OUT) < 0)
+        goto cleanup;
+
+    /* Create socket connection to receive migration data */
+    if (!uri_in) {
+        hostname = virGetHostname(dconn);
+        if (hostname == NULL)
+            goto endjob;
+
+        port = libxlNextFreePort(driver->reservedMigPorts, LIBXL_MIGRATION_MIN_PORT,
+                                 LIBXL_MIGRATION_NUM_PORTS);
+        if (port < 0) {
+            virReportError(VIR_ERR_INTERNAL_ERROR,
+                       "%s", _("Unable to find an unused migration port"));
+            goto endjob;
+        }
+
+        if (virAsprintf(uri_out, "%s:%d", hostname, port) < 0) {
+            virReportOOMError();
+            goto endjob;
+        }
+    } else {
+        if (doParseURI(uri_in, &hostname, &port))
+            goto endjob;
+
+        if (port <= 0) {
+            port = libxlNextFreePort(driver->reservedMigPorts, LIBXL_MIGRATION_MIN_PORT,
+                                     LIBXL_MIGRATION_NUM_PORTS);
+            if (port < 0) {
+                virReportError(VIR_ERR_INTERNAL_ERROR,
+                           "%s", _("Unable to find an unused migration port"));
+                goto endjob;
+            }
+
+            if (virAsprintf(uri_out, "%s:%d", hostname, port) < 0) {
+                virReportOOMError();
+                goto endjob;
+            }
+        }
+    }
+
+    sockfd = socket(AF_INET, SOCK_STREAM, 0);
+    if (sockfd == -1) {
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
+                   _("Failed to create socket for incoming migration"));
+        goto endjob;
+    }
+
+    memset(&addr, 0, sizeof(addr));
+    addr.sin_family = AF_INET;
+    addr.sin_port = htons(port);
+    addr.sin_addr.s_addr = htonl(INADDR_ANY);
+
+    if (bind(sockfd, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
+                   _("Fail to bind port for incoming migration"));
+        goto endjob;
+    }
+
+    if (listen(sockfd, MAXCONN_NUM) < 0){
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
+                   _("Fail to listen to incoming migration"));
+        goto endjob;
+    }
+
+    if (VIR_ALLOC(args) < 0) {
+        virReportOOMError();
+        goto endjob;
+    }
+
+    args->conn = dconn;
+    args->vm = vm;
+    args->sockfd = sockfd;
+    if (virThreadCreate(&migrate_receive_thread,
+                        true,
+                        doMigrateReceive, args) < 0 ) {
+        virReportSystemError(errno, "%s",
+                             _("Unable to create migration thread"));
+        VIR_FREE(args);
+        goto endjob;
+    }
+
+    ret = 0;
+    goto end;
+
+endjob:
+    if ( ret < 0 )
+        if (libxlMigrationJobFinish(driver, vm) == 0)
+            vm = NULL;
+cleanup:
+    if (VIR_CLOSE(sockfd) < 0)
+        virReportSystemError(errno, "%s", _("cannot close sockfd"));
+end:
+    if (vm)
+        virDomainObjUnlock(vm);
+    VIR_FREE(hostname);
+    libxlDriverUnlock(driver);
+    return ret;
+}
+
+static int
+libxlDomainMigratePerform3(virDomainPtr dom,
+                            const char *xmlin ATTRIBUTE_UNUSED,
+                            const char *cookiein ATTRIBUTE_UNUSED,
+                            int cookieinlen ATTRIBUTE_UNUSED,
+                            char **cookieout ATTRIBUTE_UNUSED,
+                            int *cookieoutlen ATTRIBUTE_UNUSED,
+                            const char *dconnuri ATTRIBUTE_UNUSED,
+                            const char *uri,
+                            unsigned long flags,
+                            const char *dname ATTRIBUTE_UNUSED,
+                            unsigned long resource ATTRIBUTE_UNUSED)
+{
+    libxlDriverPrivatePtr driver = dom->conn->privateData;
+    char *hostname = NULL;
+    int port = 0;
+    char *servname = NULL;
+    virNetSocketPtr sock;
+    int sockfd = -1;
+    int ret = -1;
+    virDomainObjPtr vm;
+
+    virCheckFlags(LIBXL_MIGRATION_FLAGS, -1);
+
+    libxlDriverLock(driver);
+    vm = virDomainFindByUUID(&driver->domains, dom->uuid);
+    if (!vm) {
+        char uuidstr[VIR_UUID_STRING_BUFLEN];
+        virUUIDFormat(dom->uuid, uuidstr);
+        virReportError(VIR_ERR_OPERATION_INVALID,
+                         _("no domain with matching uuid '%s'"), uuidstr);
+        goto cleanup;
+    }
+
+    if (doParseURI(uri, &hostname, &port))
+        goto cleanup;
+
+    VIR_DEBUG("hostname = %s, port = %d", hostname, port);
+
+    if (port <= 0)
+        goto cleanup;
+
+    if (virAsprintf(&servname, "%d", port) < 0) {
+        virReportOOMError();
+        goto cleanup;
+    }
+
+    if (virNetSocketNewConnectTCP(hostname, servname, &sock) < 0 ){
+        virReportError(VIR_ERR_OPERATION_FAILED, "%s",
+                   _("Failed to create socket"));
+        goto cleanup;
+    }
+
+    sockfd = virNetSocketGetFD(sock);
+    ret = doMigrateSend(driver, vm, flags, sockfd);
+cleanup:
+    if ( ret < 0 )
+        if (libxlMigrationJobFinish(driver, vm) == 0)
+            vm = NULL;
+    virObjectUnref(sock);
+    VIR_FREE(hostname);
+    VIR_FREE(servname);
+    if (vm)
+        virDomainObjUnlock(vm);
+    libxlDriverUnlock(driver);
+    return ret;
+}
+
+static virDomainPtr
+libxlDomainMigrateFinish3(virConnectPtr dconn,
+                           const char *dname,
+                           const char *cookiein ATTRIBUTE_UNUSED,
+                           int cookieinlen ATTRIBUTE_UNUSED,
+                           char **cookieout ATTRIBUTE_UNUSED,
+                           int *cookieoutlen ATTRIBUTE_UNUSED,
+                           const char *dconnuri ATTRIBUTE_UNUSED,
+                           const char *uri,
+                           unsigned long flags,
+                           int cancelled)
+{
+    libxlDriverPrivatePtr driver = dconn->privateData;
+    char *hostname = NULL;
+    int port = 0;
+    virDomainObjPtr vm = NULL;
+    virDomainPtr dom = NULL;
+    libxlDomainObjPrivatePtr priv;
+    virDomainEventPtr event = NULL;
+    int rc;
+
+    virCheckFlags(LIBXL_MIGRATION_FLAGS, NULL);
+
+    libxlDriverLock(driver);
+
+    if (doParseURI(uri, &hostname, &port))
+        VIR_DEBUG("Fail to parse port from URI");
+
+    if (LIBXL_MIGRATION_MIN_PORT <= port && port < LIBXL_MIGRATION_MAX_PORT) {
+        if (virBitmapClearBit(driver->reservedMigPorts,
+                              port - LIBXL_MIGRATION_MIN_PORT) < 0)
+            VIR_DEBUG("Could not mark port %d as unused", port);
+    }
+
+    vm = virDomainFindByName(&driver->domains, dname);
+    if (!vm)
+        goto cleanup;
+
+    if (!cancelled) {
+        if (!(flags & VIR_MIGRATE_PAUSED)) {
+            priv = vm->privateData;
+            rc = libxl_domain_unpause(&priv->ctx, vm->def->id);
+            if (rc) {
+                virReportError(VIR_ERR_OPERATION_FAILED, "%s",
+                           _("Failed to unpause domain"));
+                goto error;
+            }
+
+            virDomainObjSetState(vm, VIR_DOMAIN_RUNNING, VIR_DOMAIN_RUNNING_BOOTED);
+            if (virDomainSaveStatus(driver->caps, driver->stateDir, vm) < 0)
+                VIR_WARN("Failed to save status on vm %s", vm->def->name);
+                goto error;
+        }
+
+        dom = virGetDomain(dconn, vm->def->name, vm->def->uuid);
+        goto cleanup;
+    }
+
+error:
+    if (libxlVmReap(driver, vm, 1, VIR_DOMAIN_SHUTOFF_SAVED)) {
+        virReportError(VIR_ERR_INTERNAL_ERROR,
+                   _("Failed to destroy domain '%d'"), vm->def->id);
+        goto cleanup;
+    }
+    event = virDomainEventNewFromObj(vm, VIR_DOMAIN_EVENT_STOPPED,
+                                     VIR_DOMAIN_EVENT_STOPPED_SAVED);
+
+cleanup:
+    if (libxlMigrationJobFinish(driver, vm) == 0) {
+        vm = NULL;
+    } else if (!vm->persistent && !virDomainObjIsActive(vm)) {
+        virDomainRemoveInactive(&driver->domains, vm);
+        vm = NULL;
+    }
+
+    VIR_FREE(hostname);
+    if (vm)
+        virDomainObjUnlock(vm);
+    if (event)
+        libxlDomainEventQueue(driver, event);
+    libxlDriverUnlock(driver);
+    return dom;
+}
+
+static int
+libxlDomainMigrateConfirm3(virDomainPtr domain,
+                            const char *cookiein ATTRIBUTE_UNUSED,
+                            int cookieinlen ATTRIBUTE_UNUSED,
+                            unsigned long flags,
+                            int cancelled)
+{
+    libxlDriverPrivatePtr driver = domain->conn->privateData;
+    virDomainObjPtr vm;
+    libxlDomainObjPrivatePtr priv;
+    virDomainEventPtr event = NULL;
+    int ret = -1;
+
+    virCheckFlags(LIBXL_MIGRATION_FLAGS, -1);
+
+    libxlDriverLock(driver);
+    vm = virDomainFindByUUID(&driver->domains, domain->uuid);
+    if (!vm) {
+        char uuidstr[VIR_UUID_STRING_BUFLEN];
+        virUUIDFormat(domain->uuid, uuidstr);
+        virReportError(VIR_ERR_NO_DOMAIN,
+                   _("no domain with matching uuid '%s'"), uuidstr);
+        goto cleanup;
+    }
+
+    if (cancelled) {
+        priv = vm->privateData;
+        virReportError(VIR_ERR_INTERNAL_ERROR, "%s",
+                   _("migration failed, try to resume on our end"));
+        if (!libxl_domain_resume(&priv->ctx, vm->def->id)) {
+            ret = 0;
+        } else {
+            VIR_DEBUG("Failed to resume domain '%d' with libxenlight",
+                      vm->def->id);
+            virDomainObjSetState(vm, VIR_DOMAIN_PAUSED, VIR_DOMAIN_PAUSED_MIGRATION);
+            event = virDomainEventNewFromObj(vm, VIR_DOMAIN_EVENT_SUSPENDED,
+                                             VIR_DOMAIN_EVENT_SUSPENDED_MIGRATED);
+            if (virDomainSaveStatus(driver->caps, driver->stateDir, vm) < 0)
+                goto cleanup;
+        }
+
+        goto cleanup;
+    }
+
+    if (libxlVmReap(driver, vm, 1, VIR_DOMAIN_SHUTOFF_SAVED)) {
+        virReportError(VIR_ERR_INTERNAL_ERROR,
+                   _("Failed to destroy domain '%d'"), vm->def->id);
+        goto cleanup;
+    }
+
+    event = virDomainEventNewFromObj(vm, VIR_DOMAIN_EVENT_STOPPED,
+                                     VIR_DOMAIN_EVENT_STOPPED_SAVED);
+
+    if (flags & VIR_MIGRATE_UNDEFINE_SOURCE)
+        virDomainDeleteConfig(driver->configDir, driver->autostartDir, vm);
+
+    if ( libxlMigrationJobFinish(driver, vm) == 0 ) {
+        vm = NULL;
+    } else if (!vm->persistent || (flags & VIR_MIGRATE_UNDEFINE_SOURCE)) {
+        virDomainRemoveInactive(&driver->domains, vm);
+        vm = NULL;
+    }
+
+    VIR_DEBUG("Migration successful.\n");
+    ret = 0;
+
+cleanup:
+    if (vm)
+        virDomainObjUnlock(vm);
+    if (event)
+        libxlDomainEventQueue(driver, event);
+    libxlDriverUnlock(driver);
+    return ret;
+}
+
 static virDriver libxlDriver = {
     .no = VIR_DRV_LIBXL,
     .name = "xenlight",
     .open = libxlOpen, /* 0.9.0 */
     .close = libxlClose, /* 0.9.0 */
+    .supports_feature = libxlSupportsFeature, /* 0.10.0 */
     .type = libxlGetType, /* 0.9.0 */
     .version = libxlGetVersion, /* 0.9.0 */
     .getHostname = virGetHostname, /* 0.9.0 */
@@ -4501,6 +5142,11 @@ static virDriver libxlDriver = {
     .domainGetSchedulerParametersFlags = libxlDomainGetSchedulerParametersFlags, /* 0.9.2 */
     .domainSetSchedulerParameters = libxlDomainSetSchedulerParameters, /* 0.9.0 */
     .domainSetSchedulerParametersFlags = libxlDomainSetSchedulerParametersFlags, /* 0.9.2 */
+    .domainMigrateBegin3 = libxlDomainMigrateBegin3, /* 0.10.0 */
+    .domainMigratePrepare3 = libxlDomainMigratePrepare3, /* 0.10.0 */
+    .domainMigratePerform3 = libxlDomainMigratePerform3, /* 0.10.0 */
+    .domainMigrateFinish3 = libxlDomainMigrateFinish3, /* 0.10.0 */
+    .domainMigrateConfirm3 = libxlDomainMigrateConfirm3, /* 0.9.11 */
     .nodeGetFreeMemory = libxlNodeGetFreeMemory, /* 0.9.0 */
     .domainEventRegister = libxlDomainEventRegister, /* 0.9.0 */
     .domainEventDeregister = libxlDomainEventDeregister, /* 0.9.0 */
diff --git a/src/libxl/libxl_driver.h b/src/libxl/libxl_driver.h
index 364adf9..f4760b1 100644
--- a/src/libxl/libxl_driver.h
+++ b/src/libxl/libxl_driver.h
@@ -25,6 +25,22 @@
 
 # include <config.h>
 
+# define LIBXL_MIGRATION_FLAGS                   \
+    (VIR_MIGRATE_LIVE |                         \
+     VIR_MIGRATE_UNDEFINE_SOURCE |              \
+     VIR_MIGRATE_PAUSED)
+
+# define MAXCONN_NUM 10
+# define LIBXL_MIGRATION_MIN_PORT 49512
+# define LIBXL_MIGRATION_NUM_PORTS 64
+# define LIBXL_MIGRATION_MAX_PORT                \
+    (LIBXL_MIGRATION_MIN_PORT + LIBXL_MIGRATION_NUM_PORTS)
+
+static const char migrate_receiver_banner[]=
+    "xl migration receiver ready, send binary domain data";
+static const char migrate_receiver_ready[]=
+    "domain received, ready to unpause";
+
 int libxlRegister(void);
 
 #endif /* LIBXL_DRIVER_H */
-- 
1.7.12

