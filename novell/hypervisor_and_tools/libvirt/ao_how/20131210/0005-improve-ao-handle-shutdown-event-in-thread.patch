From d60d453f607a0edcdc4fd3a44b2291f7f85c75c9 Mon Sep 17 00:00:00 2001
From: Bamvor Jian Zhang <bjzhang@suse.com>
Date: Tue, 10 Dec 2013 16:32:58 +0800
Subject: [PATCH 5/5] improve ao: handle shutdown event in thread

the domain destroy with ao wait for the ao complete which is received
by libxlEventHandler. and the domain destroy maybe also triggered in
libxlEventHandler(e.g. domain shutdown, reboot..). it is a deadlock
in this situation.
move the original libxlEventHandler to thread, right now the
libxlEventHandler only wait the ao complete event.

Signed-off-by: Bamvor Jian Zhang <bjzhang@suse.com>
---
 src/libxl/libxl_driver.c | 60 ++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 51 insertions(+), 9 deletions(-)

diff --git a/src/libxl/libxl_driver.c b/src/libxl/libxl_driver.c
index ebf93da..6cc7a3a 100644
--- a/src/libxl/libxl_driver.c
+++ b/src/libxl/libxl_driver.c
@@ -443,24 +443,20 @@ libxlVmReap(libxlDriverPrivatePtr driver,
  * Detect which signature to use based on
  * LIBXL_HAVE_NONCONST_EVENT_OCCURS_EVENT_ARG.
  */
-
-#ifdef LIBXL_HAVE_NONCONST_EVENT_OCCURS_EVENT_ARG
-# define VIR_LIBXL_EVENT_CONST /* empty */
-#else
-# define VIR_LIBXL_EVENT_CONST const
-#endif
-
 static void
-libxlEventHandler(void *data, VIR_LIBXL_EVENT_CONST libxl_event *event)
+libxlEventHandlerThread(void *opaque)
 {
+    libxlDomainEventPtr domain_event = opaque;
+    libxlDomainObjPrivatePtr priv = domain_event->priv;
+    libxl_event *event = domain_event->event;
     libxlDriverPrivatePtr driver = libxl_driver;
-    libxlDomainObjPrivatePtr priv = ((virDomainObjPtr)data)->privateData;
     virDomainObjPtr vm = NULL;
     virDomainEventPtr dom_event = NULL;
     libxl_shutdown_reason xl_reason = event->u.domain_shutdown.shutdown_reason;
 
     if (event->type == LIBXL_EVENT_TYPE_DOMAIN_SHUTDOWN) {
         virDomainShutoffReason reason;
+        VIR_INFO("LIBXL_EVENT_TYPE_DOMAIN_SHUTDOWN");
 
         /*
          * Similar to the xl implementation, ignore SUSPEND.  Any actions needed
@@ -507,6 +503,52 @@ cleanup:
         libxlDomainEventQueue(driver, dom_event);
     /* Cast away any const */
     libxl_event_free(priv->ctx, (libxl_event *)event);
+    VIR_FREE(domain_event);
+}
+
+#ifdef LIBXL_HAVE_NONCONST_EVENT_OCCURS_EVENT_ARG
+# define VIR_LIBXL_EVENT_CONST /* empty */
+#else
+# define VIR_LIBXL_EVENT_CONST const
+#endif
+
+static void
+libxlEventHandler(void *data, VIR_LIBXL_EVENT_CONST libxl_event *event)
+{
+    libxlDomainObjPrivatePtr priv = ((virDomainObjPtr)data)->privateData;
+    //FIXME: it will freed when libxlEventHandler exit, it is not safe.
+    virThread thread;
+    libxlDomainEventPtr domain_event = NULL;
+    libxl_event *cp = NULL;
+
+    if ( event->type == LIBXL_EVENT_TYPE_OPERATION_COMPLETE ) {
+        VIR_INFO("LIBXL_EVENT_TYPE_OPERATION_COMPLETE");
+        if (!ao_how_enable_cb) {
+            priv->ao.ao_complete=1;
+            return;
+        }
+    }
+
+    if ( VIR_ALLOC(domain_event) < 0 )
+        goto error;
+
+    if ( VIR_ALLOC(cp) < 0 )
+        goto error;
+
+    memcpy(cp, event, sizeof(libxl_event));
+    domain_event->priv = priv;
+    domain_event->event = cp;
+    if (virThreadCreate(&thread, true, libxlEventHandlerThread, domain_event) < 0) {
+        //TODO error handle
+        VIR_ERROR("libxlEventHandlerThread create fail.");
+        goto error;
+    }
+    return;
+
+error:
+    VIR_FREE(domain_event);
+    VIR_FREE(cp);
+    return;
 }
 
 static const struct libxl_event_hooks ev_hooks = {
-- 
1.8.1.4

