From 4aed246719f2b6de681cd9e3c312caef8e097f11 Mon Sep 17 00:00:00 2001
From: Bamvor Jian Zhang <bjzhang@suse.com>
Date: Tue, 3 Dec 2013 10:59:34 +0800
Subject: [PATCH 1/1] one domain pass

hvm test pass: create -> save -> restore -> reboot -> save -> restore -> shutdown -> create -> save -> restore -> destroy
---
 cfg.mk                   |  10 +-
 daemon/libvirtd.conf     |   2 +-
 src/libxl/libxl_domain.c |  65 ++++++++++
 src/libxl/libxl_domain.h |  36 ++++++
 src/libxl/libxl_driver.c | 308 +++++++++++++++++++++++++++++++++++++++++++----
 5 files changed, 389 insertions(+), 32 deletions(-)

diff --git a/cfg.mk b/cfg.mk
index bd3dd48..e3007fd 100644
--- a/cfg.mk
+++ b/cfg.mk
@@ -898,11 +898,11 @@ ifeq (0,$(MAKELEVEL))
       stamp="$$($(_submodule_hash) $(_curr_status) 2>/dev/null)";	\
       test "$$stamp" = "$$actual"; echo $$?)
   _clean_requested = $(filter %clean,$(MAKECMDGOALS))
-  ifeq (1,$(_update_required)$(_clean_requested))
-    $(info INFO: gnulib update required; running ./autogen.sh first)
-    $(shell touch $(srcdir)/AUTHORS $(srcdir)/ChangeLog)
-maint.mk Makefile: _autogen
-  endif
+#  ifeq (1,$(_update_required)$(_clean_requested))
+#    $(info INFO: gnulib update required; running ./autogen.sh first)
+#    $(shell touch $(srcdir)/AUTHORS $(srcdir)/ChangeLog)
+#maint.mk Makefile: _autogen
+#  endif
 endif
 
 # It is necessary to call autogen any time gnulib changes.  Autogen
diff --git a/daemon/libvirtd.conf b/daemon/libvirtd.conf
index 5353927..3e05a08 100644
--- a/daemon/libvirtd.conf
+++ b/daemon/libvirtd.conf
@@ -301,7 +301,7 @@
 
 # Logging level: 4 errors, 3 warnings, 2 information, 1 debug
 # basically 1 will log everything possible
-#log_level = 3
+log_level = 2
 
 # Logging filters:
 # A filter allows to select a different logging level for a given category
diff --git a/src/libxl/libxl_domain.c b/src/libxl/libxl_domain.c
index 68009db..e109460 100644
--- a/src/libxl/libxl_domain.c
+++ b/src/libxl/libxl_domain.c
@@ -72,6 +72,14 @@ struct _libxlEventHookInfo {
     int id;
 };
 
+sigchild_info child_info;
+
+libxl_asyncop_how ao_how;
+int ao_how_enable;
+int ao_how_enable_cb;
+int ao_how_enable_print_status;
+int ao_complete;
+
 static virClassPtr libxlDomainObjPrivateClass;
 
 static void
@@ -401,6 +409,56 @@ virDomainDefParserConfig libxlDomainDefParserConfig = {
     .devicesPostParseCallback = libxlDomainDeviceDefPostParse,
 };
 
+static pid_t
+libxl_fork_replacement(void *user)
+{
+    sigchild_info *info = user;
+    pid_t pid;
+    size_t i = 0;
+
+    pid = fork();
+    VIR_INFO("libxl_fork_replacement pid is %d", pid);
+    if (pid > 0) {
+        while(info->child[i].pid != 0) {
+            //TODO check overflow
+            i++;
+        }
+        info->child[i].pid = pid;
+//        info->child[i].pending = 1;
+        info->child[i].called = 0;
+    }
+    return pid;
+}
+
+//int
+//libxl_reaped(pid_t pid, int status, void *user)
+//{
+//    sigchild_info *info = user;
+//    size_t i = 0;
+//
+//    //handle child reap in mainloop. because i do not have(or should not have?) ctx here.
+//    while(info->child[i].pid != pid) {
+//        //TODO check overflow
+//        i++;
+//    }
+//    info->child[i].status = status;
+//    info->child[i].pending = 1;
+//    //TODO usng completion?
+//}
+
+static const libxl_childproc_hooks childproc_hooks = {
+    .chldowner = libxl_sigchld_owner_mainloop,
+    .fork_replacement = libxl_fork_replacement,
+};
+
+static void
+ao_how_callback(libxl_ctx *ctx ATTRIBUTE_UNUSED, int rc ATTRIBUTE_UNUSED, void *for_callback ATTRIBUTE_UNUSED)
+{
+    VIR_INFO("%s", __FUNCTION__);
+    ao_complete=1;
+    return;
+}
+
 int
 libxlDomainObjPrivateInitCtx(virDomainObjPtr vm)
 {
@@ -439,6 +497,13 @@ libxlDomainObjPrivateInitCtx(virDomainObjPtr vm)
 
     libxl_osevent_register_hooks(priv->ctx, &libxl_event_callbacks, priv);
 
+    if (ao_how_enable) {
+        if (ao_how_enable_cb)
+            ao_how.callback = ao_how_callback;
+
+        child_info.ctx = priv->ctx;
+        libxl_childproc_setmode(priv->ctx, &childproc_hooks, &child_info);
+    }
     ret = 0;
 
 cleanup:
diff --git a/src/libxl/libxl_domain.h b/src/libxl/libxl_domain.h
index e4695ef..873200d 100644
--- a/src/libxl/libxl_domain.h
+++ b/src/libxl/libxl_domain.h
@@ -30,6 +30,13 @@
 # include "libxl_conf.h"
 # include "virchrdev.h"
 
+//typedef struct _libxlDomainAo libxlDomainAo;
+//typedef libxlDomainAo *libxlDomainAoPtr;
+//struct _libxlDomainAo {
+//    libxl_asyncop_how ao_how;
+//    int ao_complete;
+//};
+
 typedef struct _libxlDomainObjPrivate libxlDomainObjPrivate;
 typedef libxlDomainObjPrivate *libxlDomainObjPrivatePtr;
 struct _libxlDomainObjPrivate {
@@ -46,12 +53,41 @@ struct _libxlDomainObjPrivate {
 
     /* list of libxl timeout registrations */
     libxlEventHookInfoPtr timerRegistrations;
+
+//    libxlDomainAo ao;
 };
 
+#define MAX_CHILD 100
+typedef struct {
+    pid_t pid;
+    int status;
+    int called;
+    int pending;
+} per_sigchild_info;
+
+typedef struct {
+    libxl_ctx *ctx;
+    int id;
+    per_sigchild_info child[MAX_CHILD];
+} sigchild_info;
+
+typedef struct _libxlDomainEvent libxlDomainEvent;
+typedef libxlDomainEvent *libxlDomainEventPtr;
+struct _libxlDomainEvent {
+    libxlDomainObjPrivatePtr priv;
+    libxl_event             *event;
+};
 
+#define MAX_CHILD 100
 extern virDomainXMLPrivateDataCallbacks libxlDomainXMLPrivateDataCallbacks;
 extern virDomainDefParserConfig libxlDomainDefParserConfig;
 
+extern libxl_asyncop_how ao_how;
+extern int ao_how_enable;
+extern sigchild_info child_info;
+extern int ao_how_enable_cb;
+extern int ao_how_enable_print_status;
+extern int ao_complete;
 
 int
 libxlDomainObjPrivateInitCtx(virDomainObjPtr vm);
diff --git a/src/libxl/libxl_driver.c b/src/libxl/libxl_driver.c
index 1b42f14..53b7e8c 100644
--- a/src/libxl/libxl_driver.c
+++ b/src/libxl/libxl_driver.c
@@ -66,8 +66,12 @@
 /* Number of Xen scheduler parameters */
 #define XEN_SCHED_CREDIT_NPARAM   2
 
+//#define LIBXL_AO_SIGHANDLER
 
 static libxlDriverPrivatePtr libxl_driver = NULL;
+#ifdef LIBXL_AO_SIGHANDLER
+static struct sigaction sigchld_saved_action;
+#endif
 
 /* Function declarations */
 static int
@@ -76,7 +80,7 @@ libxlDomainManagedSaveLoad(virDomainObjPtr vm,
 
 static int
 libxlVmStart(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
-             bool start_paused, int restore_fd);
+             bool start_paused, int restore_fd, bool async);
 
 
 /* Function definitions */
@@ -105,6 +109,73 @@ libxlDomainEventQueue(libxlDriverPrivatePtr driver, virDomainEventPtr event)
     virDomainEventStateQueue(driver->domainEventState, event);
 }
 
+static void
+ao_how_init(libxlDomainObjPrivatePtr priv ATTRIBUTE_UNUSED, sigchild_info *info ATTRIBUTE_UNUSED)
+{
+    ao_complete = 0;
+}
+
+static void
+ao_how_wait(libxlDriverPrivatePtr driver ATTRIBUTE_UNUSED, virDomainObjPtr vm, sigchild_info *info)
+{
+    int status;
+    pid_t pid;
+    int i = 0;
+
+    VIR_INFO("Waiting for libxl event");
+    while (1) {
+        virObjectUnlock(vm);
+        sleep(1);
+        virObjectLock(vm);
+        if (ao_complete) {
+            VIR_INFO("got ao_complete, exit");
+            break;
+        }
+        i = 0;
+        while(info->child[i].pid != 0) {
+            VIR_INFO("<%d>:<%d>", i, info->child[i].pid);
+            if ( !info->child[i].called ) {
+                VIR_INFO("wait pid <%d>", info->child[i].pid);
+                pid = waitpid(info->child[i].pid, &status, WNOHANG);
+                VIR_INFO("the waitpid return value<%d>, status<%d>", pid, status);
+                switch (pid) {
+                    case 0:
+                        VIR_INFO("waitpid return: child <%d> state not changed.", info->child[i].pid);
+                        break;
+                    case -1:
+                        VIR_INFO("waitpid fail while waiting<%d>.", info->child[i].pid);
+                        break;
+                    default:
+                        if ( ao_how_enable_print_status ) {
+                            VIR_INFO("the child<%d> exit status<%d>", pid, WEXITSTATUS(status));
+                            if ( WIFEXITED(status) ) {
+                                VIR_INFO("the child<%d> terminated normally", pid);
+                            }
+                            if ( WIFSIGNALED(status) ) {
+                                VIR_INFO("the child<%d> process was terminated by a signal", pid);
+                                VIR_INFO("the number<%d> of the signal that caused the child<%d> process to terminate.", WTERMSIG(status), pid);
+                            }
+                            if ( WCOREDUMP(status) )
+                                VIR_INFO("the child<%d> produced a core dump.", pid);
+
+                            if ( WIFSTOPPED(status) ) {
+                                VIR_INFO("the child<%d> process was stopped by delivery of a signal.", pid);
+                                VIR_INFO("the number<%d> of the signal which caused the child<%d> to stop.", WSTOPSIG(status), pid);
+                            }
+                            if ( WIFCONTINUED(status) )
+                                VIR_INFO("the child process was resumed by delivery of SIGCONT.");
+                        }
+                        libxl_childproc_reaped(info->ctx, pid, status);
+                        VIR_INFO("libxl_childproc_reaped: pid<%d> done. status<%d>", pid, status);
+                        info->child[i].called = 1;
+                        break;
+                }
+            }
+            i++;
+        }
+    }
+}
+
 static int
 libxlAutostartDomain(virDomainObjPtr vm,
                      void *opaque)
@@ -117,7 +188,7 @@ libxlAutostartDomain(virDomainObjPtr vm,
     virResetLastError();
 
     if (vm->autostart && !virDomainObjIsActive(vm) &&
-        libxlVmStart(driver, vm, false, -1) < 0) {
+        libxlVmStart(driver, vm, false, -1, false) < 0) {
         err = virGetLastError();
         VIR_ERROR(_("Failed to autostart VM '%s': %s"),
                   vm->def->name,
@@ -317,6 +388,28 @@ libxlVmCleanup(libxlDriverPrivatePtr driver,
     virObjectUnref(cfg);
 }
 
+static int
+libxlDoDomainDestroy(libxlDriverPrivatePtr driver, virDomainObjPtr vm)
+{
+    libxlDomainObjPrivatePtr priv = vm->privateData;
+    libxl_asyncop_how *ao_how_p = NULL;
+
+    if (ao_how_enable) {
+        ao_how_init(priv, &child_info);
+        ao_how_p = &ao_how;
+    }
+
+    if (libxl_domain_destroy(priv->ctx, vm->def->id, ao_how_p) < 0) {
+        return -1;
+    }
+
+    if (ao_how_enable) {
+        ao_how_wait(driver, vm, &child_info);
+    }
+
+    return 0;
+}
+
 /*
  * Reap a domain from libxenlight.
  *
@@ -327,9 +420,7 @@ libxlVmReap(libxlDriverPrivatePtr driver,
             virDomainObjPtr vm,
             virDomainShutoffReason reason)
 {
-    libxlDomainObjPrivatePtr priv = vm->privateData;
-
-    if (libxl_domain_destroy(priv->ctx, vm->def->id, NULL) < 0) {
+    if (libxlDoDomainDestroy(driver, vm) < 0) {
         virReportError(VIR_ERR_INTERNAL_ERROR,
                        _("Unable to cleanup domain %d"), vm->def->id);
         return -1;
@@ -346,24 +437,23 @@ libxlVmReap(libxlDriverPrivatePtr driver,
  * Detect which signature to use based on
  * LIBXL_HAVE_NONCONST_EVENT_OCCURS_EVENT_ARG.
  */
-
-#ifdef LIBXL_HAVE_NONCONST_EVENT_OCCURS_EVENT_ARG
-# define VIR_LIBXL_EVENT_CONST /* empty */
-#else
-# define VIR_LIBXL_EVENT_CONST const
-#endif
-
 static void
-libxlEventHandler(void *data, VIR_LIBXL_EVENT_CONST libxl_event *event)
+libxlEventHandlerThread(void *opaque)
 {
+    libxlDomainEventPtr domain_event = opaque;
+    libxlDomainObjPrivatePtr priv = domain_event->priv;
+    libxl_event *event = domain_event->event;
     libxlDriverPrivatePtr driver = libxl_driver;
-    libxlDomainObjPrivatePtr priv = ((virDomainObjPtr)data)->privateData;
     virDomainObjPtr vm = NULL;
     virDomainEventPtr dom_event = NULL;
     libxl_shutdown_reason xl_reason = event->u.domain_shutdown.shutdown_reason;
 
     if (event->type == LIBXL_EVENT_TYPE_DOMAIN_SHUTDOWN) {
         virDomainShutoffReason reason;
+        VIR_INFO("LIBXL_EVENT_TYPE_DOMAIN_SHUTDOWN");
+//        if (!ao_how_enable_cb) {
+//            ao_complete=1;
+//        }
 
         /*
          * Similar to the xl implementation, ignore SUSPEND.  Any actions needed
@@ -395,7 +485,7 @@ libxlEventHandler(void *data, VIR_LIBXL_EVENT_CONST libxl_event *event)
                 break;
             case LIBXL_SHUTDOWN_REASON_REBOOT:
                 libxlVmReap(driver, vm, VIR_DOMAIN_SHUTOFF_SHUTDOWN);
-                libxlVmStart(driver, vm, 0, -1);
+                libxlVmStart(driver, vm, 0, -1, true);
                 break;
             default:
                 VIR_INFO("Unhandled shutdown_reason %d", xl_reason);
@@ -410,6 +500,51 @@ cleanup:
         libxlDomainEventQueue(driver, dom_event);
     /* Cast away any const */
     libxl_event_free(priv->ctx, (libxl_event *)event);
+    VIR_FREE(domain_event);
+}
+
+#ifdef LIBXL_HAVE_NONCONST_EVENT_OCCURS_EVENT_ARG
+# define VIR_LIBXL_EVENT_CONST /* empty */
+#else
+# define VIR_LIBXL_EVENT_CONST const
+#endif
+
+static void
+libxlEventHandler(void *data, VIR_LIBXL_EVENT_CONST libxl_event *event)
+{
+    libxlDomainObjPrivatePtr priv = ((virDomainObjPtr)data)->privateData;
+    //FIXME: it will freed when libxlEventHandler exit, it is not safe.
+    virThread thread;
+    libxlDomainEventPtr domain_event = NULL;
+    libxl_event *cp = NULL;
+
+    if ( event->type == LIBXL_EVENT_TYPE_OPERATION_COMPLETE ) {
+        VIR_INFO("LIBXL_EVENT_TYPE_OPERATION_COMPLETE");
+        if (!ao_how_enable_cb) {
+            ao_complete=1;
+            return;
+        }
+    }
+
+    if ( VIR_ALLOC(domain_event) < 0 )
+        goto error;
+
+    if ( VIR_ALLOC(cp) < 0 )
+        goto error;
+
+    memcpy(cp, event, sizeof(libxl_event));
+    domain_event->priv = priv;
+    domain_event->event = cp;
+    if (virThreadCreate(&thread, true, libxlEventHandlerThread, domain_event) < 0) {
+        //TODO error handle
+        goto error;
+    }
+    return;
+
+error:
+    VIR_FREE(domain_event);
+    VIR_FREE(cp);
+    return;
 }
 
 static const struct libxl_event_hooks ev_hooks = {
@@ -427,7 +562,7 @@ libxlCreateDomEvents(virDomainObjPtr vm)
 {
     libxlDomainObjPrivatePtr priv = vm->privateData;
 
-    libxl_event_register_callbacks(priv->ctx, &ev_hooks, vm);
+//    libxl_event_register_callbacks(priv->ctx, &ev_hooks, vm);
 
     if (libxl_evenable_domain_death(priv->ctx, vm->def->id, 0, &priv->deathW))
         goto error;
@@ -542,7 +677,7 @@ libxlFreeMem(libxlDomainObjPrivatePtr priv, libxl_domain_config *d_config)
  */
 static int
 libxlVmStart(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
-             bool start_paused, int restore_fd)
+             bool start_paused, int restore_fd, bool async)
 {
     libxl_domain_config d_config;
     virDomainDefPtr def = NULL;
@@ -558,6 +693,7 @@ libxlVmStart(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
 #ifdef LIBXL_HAVE_DOMAIN_CREATE_RESTORE_PARAMS
     libxl_domain_restore_params params;
 #endif
+    libxl_asyncop_how *ao_how_p = NULL;
 
     if (libxlDomainObjPrivateInitCtx(vm) < 0)
         goto error;
@@ -616,22 +752,36 @@ libxlVmStart(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
         goto error;
     }
 
+    libxl_event_register_callbacks(priv->ctx, &ev_hooks, vm);
+
     /* use as synchronous operations => ao_how = NULL and no intermediate reports => ao_progress = NULL */
 
+    if (ao_how_enable && async ) {
+        ao_how_init(priv, &child_info);
+        ao_how_p = &ao_how;
+    }
+
     if (restore_fd < 0) {
         ret = libxl_domain_create_new(priv->ctx, &d_config,
-                                      &domid, NULL, NULL);
+                                      &domid, ao_how_p, NULL);
     } else {
 #ifdef LIBXL_HAVE_DOMAIN_CREATE_RESTORE_PARAMS
         params.checkpointed_stream = 0;
         ret = libxl_domain_create_restore(priv->ctx, &d_config, &domid,
-                                          restore_fd, &params, NULL, NULL);
+                                          restore_fd, &params, ao_how_p, NULL);
 #else
         ret = libxl_domain_create_restore(priv->ctx, &d_config, &domid,
-                                          restore_fd, NULL, NULL);
+                                          restore_fd, ao_how_p, NULL);
+
 #endif
     }
 
+    if (ao_how_enable && async ) {
+        ao_how_wait(driver, vm, &child_info);
+    }
+
+    vm->def->id = domid;
+
     if (ret) {
         if (restore_fd < 0)
             virReportError(VIR_ERR_INTERNAL_ERROR,
@@ -644,7 +794,6 @@ libxlVmStart(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
         goto error;
     }
 
-    vm->def->id = domid;
     if ((dom_xml = virDomainDefFormat(vm->def, 0)) == NULL)
         goto error;
 
@@ -690,7 +839,7 @@ libxlVmStart(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
 
 error:
     if (domid > 0) {
-        libxl_domain_destroy(priv->ctx, domid, NULL);
+        libxlDoDomainDestroy(driver, vm);
         vm->def->id = -1;
         virDomainObjSetState(vm, VIR_DOMAIN_SHUTOFF, VIR_DOMAIN_SHUTOFF_FAILED);
     }
@@ -767,12 +916,82 @@ libxlReconnectDomains(libxlDriverPrivatePtr driver)
     virDomainObjListForEach(driver->domains, libxlReconnectDomain, driver);
 }
 
+#ifdef LIBXL_AO_SIGHANDLER
+static void
+sigchld_handler(int signo)
+{
+    int status;
+    pid_t pid;
+    size_t i = 0;
+
+    if (signo != SIGCHLD) {
+        VIR_ERROR("%s: signo<%d> is not SIGCHLD", __FUNCTION__, signo);
+        return;
+    }
+retry:
+//    pid = waitpid(-1, &status, WNOHANG | __WNOTHREAD); //FIXME NOT TEST. ONLY FOR LINUX.
+    pid = waitpid(-1, &status, WNOHANG);
+    if (pid == 0) {
+        VIR_INFO("%s: no child found", __FUNCTION__);
+        return;
+    }
+
+    if (pid == -1) {
+        if (errno == ECHILD) {
+            VIR_INFO("%s: ECHILD", __FUNCTION__);
+            return;
+        }
+        if (errno == EINTR) {
+            VIR_INFO("%s: EINTR: try again", __FUNCTION__);
+            goto retry;
+        }
+        VIR_ERROR("waitpid() failed. error: %d", errno);
+        return;
+    }
+
+    while(child_info.child[i].pid != pid) {
+        i++;
+        if (i == MAX_CHILD) {
+            VIR_ERROR("child info overflow!!! (pid<%d> status<%d>)", pid, status);
+            return;
+        }
+    }
+    libxl_childproc_reaped(child_info.ctx, pid, status);
+    VIR_INFO("libxl_childproc_reaped pid<%d> done. status<%d>", pid, status);
+}
+
+static void
+libxl_sigchld_register(void)
+{
+    struct sigaction ours;
+
+    memset(&ours,0,sizeof(ours));
+    ours.sa_handler = sigchld_handler;
+    sigemptyset(&ours.sa_mask);
+    ours.sa_flags = SA_NOCLDSTOP | SA_RESTART;
+    sigaction(SIGCHLD, &ours, &sigchld_saved_action);
+}
+
+static void
+libxl_sigchld_unregister(void)
+{
+    struct sigaction was;
+
+    sigaction(SIGCHLD, &sigchld_saved_action, &was);
+}
+#endif
+
 static int
 libxlStateCleanup(void)
 {
     if (!libxl_driver)
         return -1;
 
+#ifdef LIBXL_AO_SIGHANDLER
+    if ( ao_how_enable )
+        libxl_sigchld_unregister();
+#endif
+
     virObjectUnref(libxl_driver->config);
     virObjectUnref(libxl_driver->xmlopt);
     virObjectUnref(libxl_driver->domains);
@@ -930,6 +1149,33 @@ libxlStateInitialize(bool privileged,
     virDomainObjListForEach(libxl_driver->domains, libxlDomainManagedSaveLoad,
                             libxl_driver);
 
+    if (virFileExists("/var/lib/libvirt/libxl/ao_how")) {
+        VIR_INFO("use ao_how");
+        ao_how_enable = 1;
+        if (virFileExists("/var/lib/libvirt/libxl/ao_how_cb")) {
+            VIR_INFO("use ao_how callback function");
+            ao_how_enable_cb = 1;
+        } else {
+            VIR_INFO("do not use ao_how callback function");
+            ao_how_enable_cb = 0;
+        }
+        if (virFileExists("/var/lib/libvirt/libxl/ao_how__print_status")) {
+            VIR_INFO("print child exit status when ao_how used");
+            ao_how_enable_print_status = 1;
+        } else {
+            VIR_INFO("do not print child exit status when ao_how used");
+            ao_how_enable_print_status = 0;
+        }
+    } else {
+        VIR_INFO("do not use ao_how");
+        ao_how_enable = 0;
+    }
+
+#ifdef LIBXL_AO_SIGHANDLER
+    if ( ao_how_enable )
+        libxl_sigchld_register();
+#endif
+
     return 0;
 
 error:
@@ -1195,7 +1441,7 @@ libxlDomainCreateXML(virConnectPtr conn, const char *xml,
     def = NULL;
 
     if (libxlVmStart(driver, vm, (flags & VIR_DOMAIN_START_PAUSED) != 0,
-                     -1) < 0) {
+                     -1, true) < 0) {
         virDomainObjListRemove(driver->domains, vm);
         vm = NULL;
         goto cleanup;
@@ -1778,6 +2024,7 @@ libxlDoDomainSave(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
     uint32_t xml_len;
     int fd = -1;
     int ret = -1;
+    libxl_asyncop_how *ao_how_p = NULL;
 
     if (virDomainObjGetState(vm, NULL) == VIR_DOMAIN_PAUSED) {
         virReportError(VIR_ERR_OPERATION_INVALID,
@@ -1814,13 +2061,22 @@ libxlDoDomainSave(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
         goto cleanup;
     }
 
-    if (libxl_domain_suspend(priv->ctx, vm->def->id, fd, 0, NULL) != 0) {
+    if (ao_how_enable) {
+        ao_how_init(priv, &child_info);
+        ao_how_p = &ao_how;
+    }
+
+    if (libxl_domain_suspend(priv->ctx, vm->def->id, fd, 0, ao_how_p) != 0) {
         virReportError(VIR_ERR_INTERNAL_ERROR,
                        _("Failed to save domain '%d' with libxenlight"),
                        vm->def->id);
         goto cleanup;
     }
 
+    if (ao_how_enable) {
+        ao_how_wait(driver, vm, &child_info);
+    }
+
     event = virDomainEventNewFromObj(vm, VIR_DOMAIN_EVENT_STOPPED,
                                          VIR_DOMAIN_EVENT_STOPPED_SAVED);
 
@@ -1931,7 +2187,7 @@ libxlDomainRestoreFlags(virConnectPtr conn, const char *from,
     libxlDriverUnlock(driver);
     def = NULL;
 
-    ret = libxlVmStart(driver, vm, (flags & VIR_DOMAIN_SAVE_PAUSED) != 0, fd);
+    ret = libxlVmStart(driver, vm, (flags & VIR_DOMAIN_SAVE_PAUSED) != 0, fd, true);
     if (ret < 0 && !vm->persistent) {
         virDomainObjListRemove(driver->domains, vm);
         vm = NULL;
@@ -2643,7 +2899,7 @@ libxlDomainCreateWithFlags(virDomainPtr dom,
         goto cleanup;
     }
 
-    ret = libxlVmStart(driver, vm, (flags & VIR_DOMAIN_START_PAUSED) != 0, -1);
+    ret = libxlVmStart(driver, vm, (flags & VIR_DOMAIN_START_PAUSED) != 0, -1, true);
 
 cleanup:
     if (vm)
-- 
1.8.1.4

