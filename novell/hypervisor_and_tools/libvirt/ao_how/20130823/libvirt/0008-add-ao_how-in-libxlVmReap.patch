From 28384cff8ad992ad3db7491f8a9e1b1b0de212f5 Mon Sep 17 00:00:00 2001
From: Bamvor Jian Zhang <bjzhang@suse.com>
Date: Mon, 19 Aug 2013 16:52:17 +0800
Subject: [PATCH 8/9] add ao_how in libxlVmReap

---
 src/libxl/libxl_driver.c | 148 +++++++++++++++++++++++++++++++----------------
 1 file changed, 98 insertions(+), 50 deletions(-)

diff --git a/src/libxl/libxl_driver.c b/src/libxl/libxl_driver.c
index 2db4c87..ee43d8d 100644
--- a/src/libxl/libxl_driver.c
+++ b/src/libxl/libxl_driver.c
@@ -404,6 +404,55 @@ static const libxl_osevent_hooks libxl_event_callbacks = {
     .timeout_deregister = libxlTimeoutDeregisterEventHook,
 };
 
+static void
+ao_how_callback(libxl_ctx *ctx ATTRIBUTE_UNUSED, int rc ATTRIBUTE_UNUSED, void *for_callback ATTRIBUTE_UNUSED)
+{
+    return;
+}
+
+typedef struct {
+    libxl_ctx *ctx;
+    pid_t pid;
+    int status;
+    int id;
+} sigchild_info;
+
+static pid_t
+libxl_fork_replacement(void *user)
+{
+    sigchild_info *info = user;
+    pid_t pid;
+
+    pid = fork();
+    VIR_INFO("pid is %d", pid);
+    if (pid > 0)
+        info->pid = pid;
+    return pid;
+}
+
+static const libxl_childproc_hooks childproc_hooks = {
+    .chldowner = libxl_sigchld_owner_libxl_always,
+    .fork_replacement = libxl_fork_replacement,
+};
+
+static void
+libxl_sigchld_callback(int watch ATTRIBUTE_UNUSED,
+                     int fd ATTRIBUTE_UNUSED,
+                     int vir_events,
+                     void *fd_info)
+{
+    sigchild_info *info = fd_info;
+
+    if (!sigchld_callback_done) {
+        sigchld_callback_done = 1;
+        VIR_INFO("vir_events: %d", vir_events);
+        VIR_INFO("call libxl_childproc_reaped");
+        libxl_childproc_reaped(info->ctx, info->pid, info->status);
+    } else {
+        VIR_INFO("skip libxl_childproc_reaped");
+    }
+}
+
 static void *
 libxlDomainObjPrivateAlloc(void)
 {
@@ -700,13 +749,58 @@ libxlVmReap(libxlDriverPrivatePtr driver,
             virDomainShutoffReason reason)
 {
     libxlDomainObjPrivatePtr priv = vm->privateData;
+    libxl_asyncop_how *ao_how_p = NULL;
+    sigchild_info info;
+    int vir_events = VIR_EVENT_HANDLE_ERROR;
+    int pipe_fd;
+
+    if (ao_how_enable) {
+        if(VIR_ALLOC(ao_how_p) < 0)
+            return -1;
+        if (ao_how_enable_cb)
+            return -1;
+            ao_how_p->callback = ao_how_callback;
+
+        ao_complete = 0;
+
+        info.ctx = priv->ctx;
+        libxl_childproc_setmode(priv->ctx, &childproc_hooks, &info);
+        vir_events |= VIR_EVENT_HANDLE_READABLE;
+        vir_events |= VIR_EVENT_HANDLE_WRITABLE;
+
+        pipe_fd = libxl_get_pipe_handle(priv->ctx, 0);
+        sigchld_callback_done = 0;
+        info.id = virEventAddHandle(pipe_fd, vir_events, libxl_sigchld_callback,
+                                     &info, NULL);
+        VIR_INFO("id is %d", info.id);
+    }
 
-    if (libxl_domain_destroy(priv->ctx, vm->def->id, NULL) < 0) {
+    if (libxl_domain_destroy(priv->ctx, vm->def->id, ao_how_p) < 0) {
         virReportError(VIR_ERR_INTERNAL_ERROR,
                        _("Unable to cleanup domain %d"), vm->def->id);
         return -1;
     }
 
+    if (ao_how_enable) {
+        VIR_INFO("Waiting for libxl event");
+
+        while (1) {
+            virObjectUnlock(vm);
+            libxlDriverUnlock(driver);
+            sleep(1);
+            libxlDriverLock(driver);
+            virObjectLock(vm);
+            if (1 == sigchld_callback_done) {
+                VIR_INFO("to remove sigchld_callback");
+                virEventRemoveHandle(info.id);
+                sigchld_callback_done++;
+            }
+            if (ao_complete)
+                break;
+        }
+    }
+
+    VIR_FREE(ao_how_p);
     libxlVmCleanup(driver, vm, reason);
     return 0;
 }
@@ -736,6 +830,8 @@ libxlEventHandler(void *data, VIR_LIBXL_EVENT_CONST libxl_event *event)
 
     if (event->type == LIBXL_EVENT_TYPE_DOMAIN_SHUTDOWN) {
         virDomainShutoffReason reason;
+        VIR_INFO("LIBXL_EVENT_TYPE_DOMAIN_SHUTDOWN");
+        ao_complete=1;
 
         /*
          * Similar to the xl implementation, ignore SUSPEND.  Any actions needed
@@ -2330,55 +2426,6 @@ libxlDomainGetState(virDomainPtr dom,
     return ret;
 }
 
-static void
-ao_how_callback(libxl_ctx *ctx ATTRIBUTE_UNUSED, int rc ATTRIBUTE_UNUSED, void *for_callback ATTRIBUTE_UNUSED)
-{
-    return;
-}
-
-typedef struct {
-    libxl_ctx *ctx;
-    pid_t pid;
-    int status;
-    int id;
-} sigchild_info;
-
-static pid_t
-libxl_fork_replacement(void *user)
-{
-    sigchild_info *info = user;
-    pid_t pid;
-
-    pid = fork();
-    VIR_INFO("pid is %d", pid);
-    if (pid > 0)
-        info->pid = pid;
-    return pid;
-}
-
-static const libxl_childproc_hooks childproc_hooks = {
-    .chldowner = libxl_sigchld_owner_libxl_always,
-    .fork_replacement = libxl_fork_replacement,
-};
-
-static void
-libxl_sigchld_callback(int watch ATTRIBUTE_UNUSED,
-                     int fd ATTRIBUTE_UNUSED,
-                     int vir_events,
-                     void *fd_info)
-{
-    sigchild_info *info = fd_info;
-
-    if (!sigchld_callback_done) {
-        sigchld_callback_done = 1;
-        VIR_INFO("vir_events: %d", vir_events);
-        VIR_INFO("call libxl_childproc_reaped");
-        libxl_childproc_reaped(info->ctx, info->pid, info->status);
-    } else {
-        VIR_INFO("skip libxl_childproc_reaped");
-    }
-}
-
 /* This internal function expects the driver lock to already be held on
  * entry and the vm must be active. */
 static int
@@ -2449,6 +2496,7 @@ libxlDoDomainSave(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
         ctx = priv->ctx;
         //pipe_fd = ctx->sigchld_selfpipe[0];
         pipe_fd = libxl_get_pipe_handle(ctx, 0);
+        sigchld_callback_done = 0;
         info.id = virEventAddHandle(pipe_fd, vir_events, libxl_sigchld_callback,
                                      &info, NULL);
         VIR_INFO("id is %d", info.id);
-- 
1.8.1.4

