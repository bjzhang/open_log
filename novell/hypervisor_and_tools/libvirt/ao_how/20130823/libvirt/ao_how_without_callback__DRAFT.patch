diff --git a/src/libxl/libxl_driver.c b/src/libxl/libxl_driver.c
index 358d387..a776763 100644
--- a/src/libxl/libxl_driver.c
+++ b/src/libxl/libxl_driver.c
@@ -31,6 +31,7 @@
 #include <libxl_utils.h>
 #include <fcntl.h>
 #include <regex.h>
+#include <unistd.h> // for sleep
 
 #include "internal.h"
 #include "virlog.h"
@@ -105,6 +106,11 @@ static virClassPtr libxlDomainObjPrivateClass;
 
 static libxlDriverPrivatePtr libxl_driver = NULL;
 
+static int ao_how_enable = 0;
+static int ao_how_enable_cb = 0;
+static int sigchld_callback_done = 0;
+static int ao_complete= 0;
+
 /* Function declarations */
 static int
 libxlDomainManagedSaveLoad(virDomainObjPtr vm,
@@ -398,6 +404,58 @@ static const libxl_osevent_hooks libxl_event_callbacks = {
     .timeout_deregister = libxlTimeoutDeregisterEventHook,
 };
 
+static void
+ao_how_callback(libxl_ctx *ctx ATTRIBUTE_UNUSED, int rc ATTRIBUTE_UNUSED, void *for_callback ATTRIBUTE_UNUSED)
+{
+    return;
+}
+
+typedef struct {
+    libxl_ctx *ctx;
+    pid_t pid;
+    int status;
+    int id;
+    int called;
+} sigchild_info;
+
+static pid_t
+libxl_fork_replacement(void *user)
+{
+    sigchild_info *info = user;
+    pid_t pid;
+
+    pid = fork();
+    VIR_INFO("libxl_fork_replacement pid is %d", pid);
+    if (pid > 0)
+        info->pid = pid;
+    return pid;
+}
+
+static const libxl_childproc_hooks childproc_hooks = {
+    .chldowner = libxl_sigchld_owner_libxl_always,
+    .fork_replacement = libxl_fork_replacement,
+};
+
+static void
+libxl_sigchld_callback(int watch ATTRIBUTE_UNUSED,
+                     int fd ATTRIBUTE_UNUSED,
+                     int vir_events,
+                     void *fd_info)
+{
+    sigchild_info *info = fd_info;
+    int rc;
+
+    if (1 == info->called)
+        return;
+
+    info->called = 1;
+    VIR_INFO("vir_events: %d", vir_events);
+    VIR_INFO("libxl_childproc_reaped pid: %d", info->pid);
+    rc = libxl_childproc_reaped(info->ctx, info->pid, info->status);
+    VIR_INFO("libxl_childproc_reaped rc: %d", rc);
+
+}
+
 static void *
 libxlDomainObjPrivateAlloc(void)
 {
@@ -694,13 +752,53 @@ libxlVmReap(libxlDriverPrivatePtr driver,
             virDomainShutoffReason reason)
 {
     libxlDomainObjPrivatePtr priv = vm->privateData;
+    libxl_asyncop_how *ao_how_p = NULL;
+    sigchild_info info;
+    int vir_events = VIR_EVENT_HANDLE_ERROR;
+    int pipe_fd;
+
+    if (ao_how_enable) {
+        if(VIR_ALLOC(ao_how_p) < 0)
+            return -1;
+        if (ao_how_enable_cb)
+            return -1;
+            ao_how_p->callback = ao_how_callback;
+
+        ao_complete = 0;
 
-    if (libxl_domain_destroy(priv->ctx, vm->def->id, NULL) < 0) {
+        info.ctx = priv->ctx;
+        libxl_childproc_setmode(priv->ctx, &childproc_hooks, &info);
+        vir_events |= VIR_EVENT_HANDLE_READABLE;
+        vir_events |= VIR_EVENT_HANDLE_WRITABLE;
+
+        pipe_fd = libxl_get_pipe_handle(priv->ctx, 0);
+        info.called = 0;
+        info.id = virEventAddHandle(pipe_fd, vir_events, libxl_sigchld_callback,
+                                     &info, NULL);
+        VIR_INFO("id is %d", info.id);
+    }
+
+    if (libxl_domain_destroy(priv->ctx, vm->def->id, ao_how_p) < 0) {
         virReportError(VIR_ERR_INTERNAL_ERROR,
                        _("Unable to cleanup domain %d"), vm->def->id);
         return -1;
     }
 
+    if (ao_how_enable) {
+        VIR_INFO("Waiting for libxl event");
+
+        while (1) {
+            virObjectUnlock(vm);
+            libxlDriverUnlock(driver);
+            sleep(1);
+            libxlDriverLock(driver);
+            virObjectLock(vm);
+            if (ao_complete)
+                break;
+        }
+    }
+
+    VIR_FREE(ao_how_p);
     libxlVmCleanup(driver, vm, reason);
     return 0;
 }
@@ -730,6 +828,8 @@ libxlEventHandler(void *data, VIR_LIBXL_EVENT_CONST libxl_event *event)
 
     if (event->type == LIBXL_EVENT_TYPE_DOMAIN_SHUTDOWN) {
         virDomainShutoffReason reason;
+        VIR_INFO("LIBXL_EVENT_TYPE_DOMAIN_SHUTDOWN");
+        ao_complete=1;
 
         /*
          * Similar to the xl implementation, ignore SUSPEND.  Any actions needed
@@ -770,6 +870,9 @@ libxlEventHandler(void *data, VIR_LIBXL_EVENT_CONST libxl_event *event)
                 VIR_INFO("Unhandled shutdown_reason %d", xl_reason);
                 break;
         }
+    } else if ( event->type == LIBXL_EVENT_TYPE_OPERATION_COMPLETE ) {
+        VIR_INFO("LIBXL_EVENT_TYPE_OPERATION_COMPLETE");
+        ao_complete=1;
     }
 
 cleanup:
@@ -924,6 +1027,7 @@ libxlVmStart(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
     char *managed_save_path = NULL;
     int managed_save_fd = -1;
     libxlDomainObjPrivatePtr priv = vm->privateData;
+    libxl_asyncop_how *ao_how_p = NULL;
 
     /* If there is a managed saved state restore it instead of starting
      * from scratch. The old state is removed once the restoring succeeded. */
@@ -980,12 +1084,45 @@ libxlVmStart(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
 
     /* use as synchronous operations => ao_how = NULL and no intermediate reports => ao_progress = NULL */
 
+    if (ao_how_enable)
+        if(VIR_ALLOC(ao_how_p) < 0)
+            goto error;
+
     if (restore_fd < 0)
         ret = libxl_domain_create_new(priv->ctx, &d_config,
-                                      &domid, NULL, NULL);
+                                      &domid, ao_how_p, NULL);
     else
         ret = libxl_domain_create_restore(priv->ctx, &d_config, &domid,
-                                          restore_fd, NULL, NULL);
+                                          restore_fd, ao_how_p, NULL);
+
+    if (ao_how_enable) {
+        VIR_INFO("Waiting for libxl event");
+
+        while (1) {
+            libxl_event *xl_event;
+            virObjectUnlock(vm);
+            libxlDriverUnlock(driver);
+            ret = libxl_event_wait(priv->ctx, &xl_event, LIBXL_EVENTMASK_ALL, 0,0);
+            libxlDriverLock(driver);
+            virObjectLock(vm);
+            if (ret) {
+                VIR_ERROR("libxl_event_wait fail");
+                break;
+            }
+
+            switch (xl_event->type) {
+            case LIBXL_EVENT_TYPE_OPERATION_COMPLETE:
+                VIR_INFO("OPERATION_COMPLETE");
+                break;
+            default:
+                VIR_INFO("got %d xl_event", xl_event->type);
+                break;
+            }
+            break;
+        }
+    }
+
+    VIR_FREE(ao_how_p);
 
     if (ret) {
         if (restore_fd < 0)
@@ -1354,6 +1491,21 @@ libxlStateInitialize(bool privileged,
     virDomainObjListForEach(libxl_driver->domains, libxlDomainManagedSaveLoad,
                             libxl_driver);
 
+    if (virFileExists("/var/lib/libvirt/libxl/ao_how")) {
+        VIR_INFO("use ao_how");
+        ao_how_enable = 1;
+    } else {
+        VIR_INFO("do not use ao_how");
+        ao_how_enable = 0;
+    }
+    if (virFileExists("/var/lib/libvirt/libxl/ao_how_cb")) {
+        VIR_INFO("use ao_how callback function");
+        ao_how_enable_cb = 1;
+    } else {
+        VIR_INFO("do not use ao_how callback function");
+        ao_how_enable_cb = 0;
+    }
+
     libxlDriverUnlock(libxl_driver);
 
     return 0;
@@ -2285,6 +2437,11 @@ libxlDoDomainSave(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
     uint32_t xml_len;
     int fd = -1;
     int ret = -1;
+    libxl_asyncop_how *ao_how_p = NULL;
+    int vir_events = VIR_EVENT_HANDLE_ERROR;
+    sigchild_info info;
+    libxl_ctx *ctx;
+    int pipe_fd;
 
     if (virDomainObjGetState(vm, NULL) == VIR_DOMAIN_PAUSED) {
         virReportError(VIR_ERR_OPERATION_INVALID,
@@ -2321,13 +2478,53 @@ libxlDoDomainSave(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
         goto cleanup;
     }
 
-    if (libxl_domain_suspend(priv->ctx, vm->def->id, fd, 0, NULL) != 0) {
+    if (ao_how_enable) {
+        if(VIR_ALLOC(ao_how_p) < 0)
+            goto cleanup;
+        if (ao_how_enable_cb)
+            ao_how_p->callback = ao_how_callback;
+
+        ao_complete = 0;
+
+        info.ctx = priv->ctx;
+        libxl_childproc_setmode(priv->ctx, &childproc_hooks, &info);
+        vir_events |= VIR_EVENT_HANDLE_READABLE;
+        vir_events |= VIR_EVENT_HANDLE_WRITABLE;
+
+        ctx = priv->ctx;
+        pipe_fd = libxl_get_pipe_handle(ctx, 0);
+        sigchld_callback_done = 0;
+        info.id = virEventAddHandle(pipe_fd, vir_events, libxl_sigchld_callback,
+                                     &info, NULL);
+        VIR_INFO("id is %d", info.id);
+    }
+
+    if (libxl_domain_suspend(priv->ctx, vm->def->id, fd, 0, ao_how_p) != 0) {
         virReportError(VIR_ERR_INTERNAL_ERROR,
                        _("Failed to save domain '%d' with libxenlight"),
                        vm->def->id);
         goto cleanup;
     }
 
+    if (ao_how_enable) {
+        VIR_INFO("Waiting for libxl event");
+
+        while (1) {
+            virObjectUnlock(vm);
+            libxlDriverUnlock(driver);
+            sleep(1);
+            libxlDriverLock(driver);
+            virObjectLock(vm);
+            if (1 == sigchld_callback_done) {
+                VIR_INFO("to remove sigchld_callback");
+                virEventRemoveHandle(info.id);
+                sigchld_callback_done++;
+            }
+            if (ao_complete)
+                break;
+        }
+    }
+
     event = virDomainEventNewFromObj(vm, VIR_DOMAIN_EVENT_STOPPED,
                                          VIR_DOMAIN_EVENT_STOPPED_SAVED);
 
@@ -2337,6 +2534,8 @@ libxlDoDomainSave(libxlDriverPrivatePtr driver, virDomainObjPtr vm,
         goto cleanup;
     }
 
+    VIR_FREE(ao_how_p);
+
     vm->hasManagedSave = true;
     ret = 0;
 
