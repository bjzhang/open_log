/* snapshot relative APIs */

/*
 * Management functions for domain snapshot libxl-json file. this
 * file is located at "/var/lib/xen/snapshots/<domain_uuid>" with
 * name "snapshotdata-<snapshot_name>.libxl-json". reference
 * docs/misc/snapshot-HOWTO.txt for the details.
 */
/*
 * retrieve domain snapshot configuration file content from
 * "/var/lib/xen/snapshots/<domain_uuid>/"snapshotdata-<snapshot->name>.libxl-json"
 * and push the information to libxl_domain_snapshot struct(snapshot).
 * domid:    domain id. will get domain_uuid from domid.
 * snapshot: caller should provide valid snapshot->name. on return, snapshot
             hold the domain snapshot information retrieve from file.
 * return value:
 *   0:            successful
 *   <0:           fail. domain snapshot configuration file inexist.
 *                 or file format wrong.
 */
int libxl_load_dom_snapshot_conf(libxl_ctx *ctx, uint32_t domid,
                                    libxl_domain_snapshot *snapshot);
/*
 * this api will convert the struct snapshot to libxl-json format, then
 * store to
 * /var/lib/xen/snapshots/<domain_uuid>/"snapshotdata-<snapshot->name>.libxl-json"
 * domid:    domain id. will get domain_uuid from domid.
 * snapshot: snapshot->name should be valid name in caller's file system.
 *           other string in this strcut should not be NULL, for the
 *           empty item the caller should set as "".
 * return value:
 *   0:            successful
 *   ERROR_INVAL:  snapshot name is empty
 *   <0:           fail. snapshot information invalid or write file fail.
 */
int libxl_store_dom_snapshot_conf(libxl_ctx *ctx, uint32_t domid,
                                     libxl_domain_snapshot *snapshot);
/*
 * delete domain snapshot configuration file:
 * /var/lib/xen/snapshots/<domain_uuid>/"snapshotdata-<snapshot->name>.libxl-json"
 * domid:    domain id. will get domain_uuid from domid.
 * snapshot: caller should provide valid snapshot->name. other value this
 *           struct will be ignored in this function.
 * return value:
 *   0:            successful
 *   <0:           fail. file delete fail.
 */
int libxl_delete_dom_snapshot_conf(libxl_ctx *ctx, uint32_t domid,
                                   libxl_domain_snapshot *snapshot);

/*
 * retrieve all the snapshot information for speicfic domain from
 * /var/lib/xen/snapshots/<domain_uuid>" and return the result to
 * libxl_domain_snapshot array. put the number to num.
 * caller is responsible for free the libxl_domain_snapshot array.
 * domid:    domain id. will get domain_uuid from domid.
 * num:      number of snapshot array.
 * return value:
 *   NULL:         no valid snapshot configuration for such domain.
 *   no NULL:      successful
 */
libxl_domain_snapshot *libxl_domain_snapshot_list(libxl_ctx *ctx,
                                                  uint32_t domid, int *num);

/* functions for disk snapshot operations */

/*
 * create disk snapshot according to the configuration in snapshot
 * array. reference docs/misc/snapshot-HOWTO.txt about how to create
 * internal or external snapshot for disk.
 * all the disk snapshot in this operation is handled by qmp
 * transaction. the transaction operationa ensure that all the disk
 * is consistent.
 * domid:    domain id
 * snapshot: array of disk snapshot
 * nb:       number of disk snapshot struct in above array
 * return value:
 *   0:            successful
 *   <0:           fail
 */
int libxl_disk_snapshot_create(libxl_ctx *ctx, int domid,
                               libxl_disk_snapshot *snapshot, int nb);

/*
 * delete disk snapshot according to the configuration in snapshot
 * array. reference docs/misc/snapshot-HOWTO.txt about what
 * information is needed.
 * only internal snapshot is support at this time. it will call
 * blockdev-snapshot-delete-internal-sync qmp command for each disk
 * snapshot delete operation.
 * domid:    domain id
 * snapshot: array of disk snapshot
 * nb:       number of disk snapshot struct in above array
 * return value:
 *   0:            successful
 *   <0:           fail. it will exit in when disk snapshot delete
 *                 fails at the first time.
 */
int libxl_disk_snapshot_delete(libxl_ctx *ctx, int domid,
                               libxl_disk_snapshot *snapshot, int nb);

/*
 * revert disk snapshot state according to snapshot array. it will
 * call "qemu-img snapshot -a snapshot_name" for each revert
 * operation.
 * domid:    domain id
 * snapshot: array of disk snapshot
 * nb:       number of disk snapshot struct in above array
 * return value:
 *   0:            successful
 *   <0:           fail
 */
int libxl_disk_snapshot_revert(libxl_ctx *ctx, uint32_t domid,
                               libxl_disk_snapshot *snapshot, int nb);

/*
 * while operation on disk snapshot, some of information of disks
 * is needed. this function copy disk information to disk snapshot
 * array, put the number of it to num.
 * domid:    domain id
 * snapshot: array of disk snapshot. if empty, will allocate the array
 *           depend on how many disk exist in such domain.
 *           if not empty, will only fill out the disk information
 *           when the device name match.
 * num:       number of disk snapshot struct in above array
 * return value:
 *   0:            successful
 *   <0:           fail
 */
int libxl_disk_to_snapshot(libxl_ctx *ctx, uint32_t domid, libxl_disk_snapshot **snapshot, int *num);
