--- wireshark-1.0.16.orig/epan/dissectors/packet-bacapp.c	2010-08-30 06:01:25.000000000 +0800
+++ wireshark-1.0.16/epan/dissectors/packet-bacapp.c	2012-06-12 15:24:01.000000000 +0800
@@ -1459,7 +1459,7 @@ fSigned64 (tvbuff_t *tvb, guint offset,
 }
 
 static guint
-fTagHeaderTree (tvbuff_t *tvb, proto_tree *tree, guint offset,
+fTagHeaderTree (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset,
 	guint8 *tag_no, guint8* tag_info, guint32 *lvt)
 {
 	guint8 tag;
@@ -1549,20 +1549,30 @@ fTagHeaderTree (tvbuff_t *tvb, proto_tre
 		} else
 			proto_tree_add_uint(subtree, hf_bacapp_tag_lvt,
 				tvb, lvt_offset, lvt_len, *lvt);
-	}
+
+        if (*lvt > tvb_length(tvb)) {
+            expert_add_info_format(pinfo, ti, PI_MALFORMED, PI_ERROR,
+                    "LVT length too long: %d > %d", *lvt,
+                    tvb_length(tvb));
+            *lvt = 1;
+        }
+    }
+    else if (*lvt > tvb_length(tvb))
+        /* We can't add expert info, but we can still stop infinite loops */
+        *lvt = 1;
 
 	return tag_len;
 }
 
 static guint
-fTagHeader (tvbuff_t *tvb, guint offset, guint8 *tag_no, guint8* tag_info,
+fTagHeader (tvbuff_t *tvb, packet_info *pinfo, guint offset, guint8 *tag_no, guint8* tag_info,
 	guint32 *lvt)
 {
-	return fTagHeaderTree (tvb, NULL, offset, tag_no, tag_info, lvt);
+	return fTagHeaderTree (tvb, pinfo, NULL, offset, tag_no, tag_info, lvt);
 }
 
 static guint
-fNullTag (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fNullTag (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	guint8 tag_no, tag_info;
 	guint32 lvt;
@@ -1571,13 +1581,13 @@ fNullTag (tvbuff_t *tvb, proto_tree *tre
 
 	ti = proto_tree_add_text(tree, tvb, offset, 1, "%sNULL", label);
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree (tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree (tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset + 1;
 }
 
 static guint
-fBooleanTag (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fBooleanTag (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	guint8 tag_no, tag_info;
 	guint32 lvt = 0;
@@ -1586,7 +1596,7 @@ fBooleanTag (tvbuff_t *tvb, proto_tree *
 	proto_tree *subtree;
 	guint bool_len = 1;
 
-	tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	if (tag_info && lvt == 1)
 	{
 		lvt = tvb_get_guint8(tvb, offset+1);
@@ -1596,13 +1606,13 @@ fBooleanTag (tvbuff_t *tvb, proto_tree *
 	ti = proto_tree_add_text(tree, tvb, offset, bool_len,
 		"%s%s", label, lvt == 0 ? "FALSE" : "TRUE");
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree (tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree (tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset + bool_len;
 }
 
 static guint
-fUnsignedTag (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fUnsignedTag (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	guint64 val = 0;
 	guint8 tag_no, tag_info;
@@ -1611,7 +1621,7 @@ fUnsignedTag (tvbuff_t *tvb, proto_tree
 	proto_item *ti;
 	proto_tree *subtree;
 
-	tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	/* only support up to an 8 byte (64-bit) integer */
 	if (fUnsigned64 (tvb, offset + tag_len, lvt, &val))
 		ti = proto_tree_add_text(tree, tvb, offset, lvt+tag_len,
@@ -1620,14 +1630,14 @@ fUnsignedTag (tvbuff_t *tvb, proto_tree
 		ti = proto_tree_add_text(tree, tvb, offset, lvt+tag_len,
 			"%s - %u octets (Unsigned)", label, lvt);
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree (tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree (tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset+tag_len+lvt;
 }
 
 /* set split_val to zero when not needed */
 static guint
-fEnumeratedTagSplit (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label,
+fEnumeratedTagSplit (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label,
 	const value_string *vs, guint32 split_val)
 {
 	guint32 val = 0;
@@ -1637,7 +1647,7 @@ fEnumeratedTagSplit (tvbuff_t *tvb, prot
 	proto_item *ti;
 	proto_tree *subtree;
 
-	tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	/* only support up to a 4 byte (32-bit) enumeration */
 	if (fUnsigned32 (tvb, offset+tag_len, lvt, &val)) {
 		if (vs)
@@ -1652,20 +1662,20 @@ fEnumeratedTagSplit (tvbuff_t *tvb, prot
 			"%s - %u octets (enumeration)", label, lvt);
 	}
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree (tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree (tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset+tag_len+lvt;
 }
 
 static guint
-fEnumeratedTag (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label,
+fEnumeratedTag (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label,
 	const value_string *vs)
 {
-	return fEnumeratedTagSplit (tvb, tree, offset, label, vs, 0);
+	return fEnumeratedTagSplit (tvb, pinfo, tree, offset, label, vs, 0);
 }
 
 static guint
-fSignedTag (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fSignedTag (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	gint64 val = 0;
 	guint8 tag_no, tag_info;
@@ -1674,7 +1684,7 @@ fSignedTag (tvbuff_t *tvb, proto_tree *t
 	proto_item *ti;
 	proto_tree *subtree;
 
-	tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	if (fSigned64 (tvb, offset + tag_len, lvt, &val))
 		ti = proto_tree_add_text(tree, tvb, offset, lvt+tag_len,
 			"%s(Signed) %" G_GINT64_MODIFIER "d", label, val);
@@ -1682,13 +1692,13 @@ fSignedTag (tvbuff_t *tvb, proto_tree *t
 		ti = proto_tree_add_text(tree, tvb, offset, lvt+tag_len,
 			"%s - %u octets (Signed)", label, lvt);
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree(tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree(tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset+tag_len+lvt;
 }
 
 static guint
-fRealTag (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fRealTag (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	guint8 tag_no, tag_info;
 	guint32 lvt;
@@ -1697,18 +1707,18 @@ fRealTag (tvbuff_t *tvb, proto_tree *tre
 	proto_item *ti;
 	proto_tree *subtree;
 
-	tag_len = fTagHeader(tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader(tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	f_val = tvb_get_ntohieee_float(tvb, offset+tag_len);
 	ti = proto_tree_add_text(tree, tvb, offset, 4+tag_len,
 		"%s%f (Real)", label, f_val);
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree(tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree(tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset+tag_len+4;
 }
 
 static guint
-fDoubleTag (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fDoubleTag (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	guint8 tag_no, tag_info;
 	guint32 lvt;
@@ -1717,18 +1727,18 @@ fDoubleTag (tvbuff_t *tvb, proto_tree *t
 	proto_item *ti;
 	proto_tree *subtree;
 
-	tag_len = fTagHeader(tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader(tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	d_val = tvb_get_ntohieee_double(tvb, offset+tag_len);
 	ti = proto_tree_add_text(tree, tvb, offset, 8+tag_len,
 		"%s%lf (Double)", label, d_val);
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree(tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree(tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset+tag_len+8;
 }
 
 static guint
-fProcessId (tvbuff_t *tvb, proto_tree *tree, guint offset)
+fProcessId (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	guint32 val = 0, lvt;
 	guint8 tag_no, tag_info;
@@ -1736,7 +1746,7 @@ fProcessId (tvbuff_t *tvb, proto_tree *t
 	proto_tree *subtree;
 	guint tag_len;
 
-	tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	if (fUnsigned32 (tvb, offset+tag_len, lvt, &val))
 		ti = proto_tree_add_uint(tree, hf_bacapp_tag_ProcessId,
 			tvb, offset, lvt+tag_len, val);
@@ -1750,7 +1760,7 @@ fProcessId (tvbuff_t *tvb, proto_tree *t
 }
 
 static guint
-fTimeSpan (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fTimeSpan (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	guint32 val = 0, lvt;
 	guint8 tag_no, tag_info;
@@ -1758,7 +1768,7 @@ fTimeSpan (tvbuff_t *tvb, proto_tree *tr
 	proto_tree *subtree;
 	guint tag_len;
 
-	tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	if (fUnsigned32 (tvb, offset+tag_len, lvt, &val))
 		ti = proto_tree_add_text(tree, tvb, offset, lvt+tag_len,
 		"%s (hh.mm.ss): %d.%02d.%02d%s",
@@ -1769,13 +1779,13 @@ fTimeSpan (tvbuff_t *tvb, proto_tree *tr
 		ti = proto_tree_add_text(tree, tvb, offset, lvt+tag_len,
 			"%s - %u octets (Signed)", label, lvt);
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree(tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree(tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset+tag_len+lvt;
 }
 
 static guint
-fWeekNDay (tvbuff_t *tvb, proto_tree *tree, guint offset)
+fWeekNDay (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	guint32 month, weekOfMonth, dayOfWeek;
 	guint8 tag_no, tag_info;
@@ -1784,7 +1794,7 @@ fWeekNDay (tvbuff_t *tvb, proto_tree *tr
 	proto_item *ti;
 	proto_tree *subtree;
 
-	tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	month = tvb_get_guint8(tvb, offset+tag_len);
 	weekOfMonth = tvb_get_guint8(tvb, offset+tag_len+1);
 	dayOfWeek = tvb_get_guint8(tvb, offset+tag_len+2);
@@ -1793,13 +1803,13 @@ fWeekNDay (tvbuff_t *tvb, proto_tree *tr
                         val_to_str(weekOfMonth, weekofmonth, "week of month (%d) not found"),
                         val_to_str(dayOfWeek, day_of_week, "day of week (%d) not found"));
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree(tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree(tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset+tag_len+lvt;
 }
 
 static guint
-fDate (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fDate (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	guint32 year, month, day, weekday;
 	guint8 tag_no, tag_info;
@@ -1808,7 +1818,7 @@ fDate (tvbuff_t *tvb, proto_tree *tree,
 	proto_item *ti;
 	proto_tree *subtree;
 
-	tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	year = tvb_get_guint8(tvb, offset+tag_len);
 	month = tvb_get_guint8(tvb, offset+tag_len+1);
 	day = tvb_get_guint8(tvb, offset+tag_len+2);
@@ -1838,13 +1848,13 @@ fDate (tvbuff_t *tvb, proto_tree *tree,
 			day, val_to_str(weekday, day_of_week, "(%d) not found"));
 	}
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree (tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree (tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset+tag_len+lvt;
 }
 
 static guint
-fTime (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fTime (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	guint32 hour, minute, second, msec, lvt;
 	guint8 tag_no, tag_info;
@@ -1852,7 +1862,7 @@ fTime (tvbuff_t *tvb, proto_tree *tree,
 	proto_item *ti;
 	proto_tree *subtree;
 
-	tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	hour = tvb_get_guint8(tvb, offset+tag_len);
 	minute = tvb_get_guint8(tvb, offset+tag_len+1);
 	second = tvb_get_guint8(tvb, offset+tag_len+2);
@@ -1869,13 +1879,13 @@ fTime (tvbuff_t *tvb, proto_tree *tree,
 			hour >= 12 ? "P.M." : "A.M.",
 			hour, minute, second, msec);
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree (tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree (tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset+tag_len+lvt;
 }
 
 static guint
-fDateTime (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fDateTime (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	proto_tree *subtree = tree;
 	proto_item *tt;
@@ -1885,7 +1895,7 @@ fDateTime (tvbuff_t *tvb, proto_tree *tr
 		subtree = proto_item_add_subtree(tt, ett_bacapp_value);
 	}
 	offset = fDate (tvb,subtree,offset,"Date: ");
-	return fTime (tvb,subtree,offset,"Time: ");
+	return fTime (tvb, pinfo,subtree,offset,"Time: ");
 }
 
 static guint
@@ -1897,7 +1907,7 @@ fTimeValue (tvbuff_t *tvb, proto_tree *t
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {   /* closing Tag, but not for me */
 			return offset;
 		}
@@ -1932,7 +1942,7 @@ fCalendaryEntry (tvbuff_t *tvb, proto_tr
 	return offset;
 }
 
-static guint fTimeStamp (tvbuff_t *tvb, proto_tree *tree,
+static guint fTimeStamp (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,
 	guint offset, const gchar *label)
 {
 	guint8 tag_no = 0, tag_info = 0;
@@ -2025,7 +2035,7 @@ fDestination (tvbuff_t *tvb, proto_tree
 #endif
 
 static guint
-fOctetString (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label, guint32 lvt)
+fOctetString (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label, guint32 lvt)
 {
 	gchar *tmp;
     guint start = offset;
@@ -2045,13 +2055,13 @@ fOctetString (tvbuff_t *tvb, proto_tree
 	if (ti)
         subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
 
-    fTagHeaderTree(tvb, subtree, start, &tag_no, &tag_info, &lvt);
+    fTagHeaderTree(tvb, pinfo, subtree, start, &tag_no, &tag_info, &lvt);
 
 	return offset;
 }
 
 static guint
-fAddress (tvbuff_t *tvb, proto_tree *tree, guint offset)
+fAddress (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	guint8 tag_no, tag_info;
 	guint32 lvt;
@@ -2068,10 +2078,10 @@ fAddress (tvbuff_t *tvb, proto_tree *tre
 }
 
 static guint
-fSessionKey (tvbuff_t *tvb, proto_tree *tree, guint offset)
+fSessionKey (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	offset = fOctetString (tvb,tree,offset,"session key: ", 8);
-	return fAddress (tvb,tree,offset);
+	return fAddress (tvb, pinfo,tree,offset);
 }
 
 static guint
@@ -2084,7 +2094,7 @@ fObjectIdentifier (tvbuff_t *tvb, proto_
 	proto_tree *subtree;
 	guint32 object_id;
 
-	tag_length = fTagHeader(tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_length = fTagHeader(tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	object_id = tvb_get_ntohl(tvb,offset+tag_length);
 	object_type = object_id_type(object_id);
 	ti = proto_tree_add_text(tree, tvb, offset, tag_length + 4,
@@ -2097,7 +2107,7 @@ fObjectIdentifier (tvbuff_t *tvb, proto_
 		object_id_instance(object_id));
 	/* here are the details of how we arrived at the above text */
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree (tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree (tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 	offset += tag_length;
 	proto_tree_add_item(subtree, hf_bacapp_objectType, tvb, offset, 4, FALSE);
 	proto_tree_add_item(subtree, hf_bacapp_instanceNumber, tvb, offset, 4, FALSE);
@@ -2112,7 +2122,7 @@ fRecipient (tvbuff_t *tvb, proto_tree *t
 	guint8  tag_no, tag_info;
 	guint32 lvt;
 
-	fTagHeader(tvb, offset, &tag_no, &tag_info, &lvt);
+	fTagHeader(tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	if (tag_no < 2) {
 		if (tag_no == 0) { /* device */
 			offset = fObjectIdentifier (tvb, tree, offset);
@@ -2157,7 +2167,7 @@ static guint
 fAddressBinding (tvbuff_t *tvb, proto_tree *tree, guint offset)
 {
 	offset = fObjectIdentifier (tvb, tree, offset);
-	return fAddress (tvb, tree, offset);
+	return fAddress (tvb, pinfo, tree, offset);
 }
 
 static guint
@@ -2173,7 +2183,7 @@ fActionCommand (tvbuff_t *tvb, proto_tre
 	propertyArrayIndex = -1;
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			offset += fTagHeaderTree (tvb, subtree, offset,
 				&tag_no, &tag_info, &lvt);
@@ -2241,7 +2251,7 @@ fPropertyIdentifier (tvbuff_t *tvb, prot
 	proto_tree *subtree;
 
 	propertyIdentifier = 0; /* global Variable */
-	tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	if (fUnsigned32 (tvb, offset+tag_len, lvt, (guint32 *)&propertyIdentifier))
 		ti = proto_tree_add_text(tree, tvb, offset, lvt+tag_len,
 			"property Identifier: %s",
@@ -2253,13 +2263,13 @@ fPropertyIdentifier (tvbuff_t *tvb, prot
 		ti = proto_tree_add_text(tree, tvb, offset, lvt+tag_len,
 		"Property Identifier - %u octets", lvt);
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree (tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree (tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset+tag_len+lvt;
 }
 
 static guint
-fPropertyArrayIndex (tvbuff_t *tvb, proto_tree *tree, guint offset)
+fPropertyArrayIndex (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	guint8 tag_no, tag_info;
 	guint32 lvt;
@@ -2267,7 +2277,7 @@ fPropertyArrayIndex (tvbuff_t *tvb, prot
 	proto_item *ti;
 	proto_tree *subtree;
 
-	tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	if (fUnsigned32 (tvb, offset + tag_len, lvt, (guint32 *)&propertyArrayIndex))
 		ti = proto_tree_add_text(tree, tvb, offset, lvt+tag_len,
 			"property Array Index (Unsigned) %u", propertyArrayIndex);
@@ -2275,13 +2285,13 @@ fPropertyArrayIndex (tvbuff_t *tvb, prot
 		ti = proto_tree_add_text(tree, tvb, offset, lvt+tag_len,
 			"property Array Index - %u octets (Unsigned)", lvt);
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree (tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree (tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset+tag_len+lvt;
 }
 
 static guint
-fCharacterString (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fCharacterString (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	guint8 tag_no, tag_info, character_set;
 	guint32 lvt, l;
@@ -2356,7 +2366,7 @@ fCharacterString (tvbuff_t *tvb, proto_t
 
 		subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
 
-        fTagHeaderTree (tvb, subtree, start, &tag_no, &tag_info, &lvt);
+        fTagHeaderTree (tvb, pinfo, subtree, start, &tag_no, &tag_info, &lvt);
 		proto_tree_add_item(subtree, hf_BACnetCharacterSet, tvb, start+offs, 1, FALSE);
         if (character_set == 1)
         {
@@ -2367,7 +2377,7 @@ fCharacterString (tvbuff_t *tvb, proto_t
 }
 
 static guint
-fBitStringTagVS (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label,
+fBitStringTagVS (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label,
 	const value_string *src)
 {
 	guint8 tag_no, tag_info, tmp;
@@ -2389,7 +2399,7 @@ fBitStringTagVS (tvbuff_t *tvb, proto_tr
 	if (ti) {
 		subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
 	}
-	fTagHeaderTree(tvb, subtree, start, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree(tvb, pinfo, subtree, start, &tag_no, &tag_info, &lvt);
 	proto_tree_add_text(subtree, tvb, offset, 1,
 				"Unused bits: %u",
 				unused);
@@ -2431,9 +2441,9 @@ fBitStringTagVS (tvbuff_t *tvb, proto_tr
 }
 
 static guint
-fBitStringTag (tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fBitStringTag (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
-	return fBitStringTagVS (tvb, tree, offset, label, NULL);
+	return fBitStringTagVS (tvb, pinfo, tree, offset, label, NULL);
 }
 
 /* handles generic application types, as well as enumerated and enumerations
@@ -2448,7 +2458,7 @@ fApplicationTypesEnumeratedSplit (tvbuff
 
 	if (tvb_length_remaining(tvb, offset) > 0) {
 
-		tag_len = fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (!tag_is_context_specific(tag_info))
 		{
 			switch (tag_no) {
@@ -2521,7 +2531,7 @@ fApplicationTypes (tvbuff_t *tvb, proto_
 }
 
 static guint
-fContextTaggedValue(tvbuff_t *tvb, proto_tree *tree, guint offset, const gchar *label)
+fContextTaggedValue(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
 	guint8 tag_no, tag_info;
 	guint32 lvt;
@@ -2531,7 +2541,7 @@ fContextTaggedValue(tvbuff_t *tvb, proto
 	gint tvb_len;
 
 	(void)label;
-	tag_len = fTagHeader(tvb, offset, &tag_no, &tag_info, &lvt);
+	tag_len = fTagHeader(tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	/* cap the the suggested length in case of bad data */
 	tvb_len = tvb_length_remaining(tvb, offset+tag_len);
 	if ((tvb_len >= 0) && ((guint32)tvb_len < lvt))
@@ -2542,7 +2552,7 @@ fContextTaggedValue(tvbuff_t *tvb, proto
 		"Context Value (as %u DATA octets)", lvt);
 
 	subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
-	fTagHeaderTree(tvb, subtree, offset, &tag_no, &tag_info, &lvt);
+	fTagHeaderTree(tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
 	return offset + tag_len + lvt;
 }
@@ -2569,7 +2579,7 @@ fAbstractSyntaxNType (tvbuff_t *tvb, pro
 	}
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) { /* closing tag, but not for me */
 			if (depth <= 0) return offset;
 		}
@@ -2583,7 +2593,7 @@ fAbstractSyntaxNType (tvbuff_t *tvb, pro
 			offset = fAddressBinding (tvb,tree,offset);
 			break;
 		case 55: /* list-of-session-keys */
-			fSessionKey (tvb, tree, offset);
+			fSessionKey (tvb, pinfo, tree, offset);
 			break;
 		case 79: /* object-type */
 		case 96: /* protocol-object-types-supported */
@@ -2671,7 +2681,7 @@ fAbstractSyntaxNType (tvbuff_t *tvb, pro
 }
 
 static guint
-fPropertyValue (tvbuff_t *tvb, proto_tree *tree, guint offset, guint8 tagoffset)
+fPropertyValue (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, guint8 tagoffset)
 {
 	guint lastoffset = offset;
 	proto_item *tt;
@@ -2682,7 +2692,7 @@ fPropertyValue (tvbuff_t *tvb, proto_tre
 	offset = fPropertyReference(tvb, tree, offset, tagoffset, 0);
 	if (offset > lastoffset)
 	{
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_no == tagoffset+2) {  /* Value - might not be present in ReadAccessResult */
 			if (tag_is_opening(tag_info)) {
 				tt = proto_tree_add_text(tree, tvb, offset, 1, "propertyValue");
@@ -2710,7 +2720,7 @@ fBACnetPropertyValue (tvbuff_t *tvb, pro
 		{
 			/* detect optional priority
 			by looking to see if the next tag is context tag number 3 */
-			fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+			fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 			if (tag_is_context_specific(tag_info) && (tag_no == 3))
 				offset = fUnsignedTag (tvb,tree,offset,"Priority: ");
 		}
@@ -2729,7 +2739,7 @@ fSubscribeCOVPropertyRequest(tvbuff_t *t
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			offset += fTagHeaderTree (tvb, subtree, offset,	&tag_no, &tag_info, &lvt);
 			subtree = tree;
@@ -2813,13 +2823,13 @@ fDailySchedule (tvbuff_t *tvb, proto_tre
 	guint8 tag_no, tag_info;
 	guint32 lvt;
 
-	fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	if (tag_is_opening(tag_info) && tag_no == 0)
 	{
 		offset += fTagHeaderTree (tvb, subtree, offset, &tag_no, &tag_info, &lvt); /* opening context tag 0 */
 		while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 			lastoffset = offset;
-			fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+			fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 			if (tag_is_closing(tag_info)) {
 				/* should be closing context tag 0 */
 				offset += fTagHeaderTree (tvb, subtree, offset,	&tag_no, &tag_info, &lvt);
@@ -2859,7 +2869,7 @@ fWeeklySchedule (tvbuff_t *tvb, proto_tr
 	}
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			return offset; /* outer encoding will print out closing tag */
 		}
@@ -2872,30 +2882,30 @@ fWeeklySchedule (tvbuff_t *tvb, proto_tr
 
 
 static guint
-fUTCTimeSynchronizationRequest  (tvbuff_t *tvb, proto_tree *tree, guint offset)
+fUTCTimeSynchronizationRequest  (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	if (tvb_length_remaining(tvb, offset) <= 0)
 		return offset;
 
-	return fDateTime (tvb, tree, offset, "UTC-Time: ");
+	return fDateTime (tvb, pinfo, tree, offset, "UTC-Time: ");
 }
 
 static guint
-fTimeSynchronizationRequest  (tvbuff_t *tvb, proto_tree *tree, guint offset)
+fTimeSynchronizationRequest  (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	if (tvb_length_remaining(tvb, offset) <= 0)
 		return offset;
 
-	return fDateTime (tvb, tree, offset, NULL);
+	return fDateTime (tvb, pinfo, tree, offset, NULL);
 }
 
 static guint
-fDateRange  (tvbuff_t *tvb, proto_tree *tree, guint offset)
+fDateRange  (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	if (tvb_length_remaining(tvb, offset) <= 0)
 		return offset;
     offset = fDate (tvb,tree,offset,"Start Date: ");
-	return fDate (tvb, tree, offset, "End Date: ");
+	return fDate (tvb, pinfo, tree, offset, "End Date: ");
 }
 
 static guint
@@ -2952,7 +2962,7 @@ fConfirmedPrivateTransferRequest(tvbuff_
 	/* exit loop if nothing happens inside */
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			if (tag_no == 2) /* Make sure it's the expected tag */
 			{
@@ -3019,7 +3029,7 @@ fLifeSafetyOperationRequest(tvbuff_t *tv
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 
 		switch (tag_no) {
 		case 0:	/* subscriberProcessId */
@@ -3643,7 +3653,7 @@ fConfirmedCOVNotificationRequest (tvbuff
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			offset += fTagHeaderTree (tvb, subtree, offset,
 				&tag_no, &tag_info, &lvt);
@@ -3828,7 +3838,7 @@ flistOfEventSummaries (tvbuff_t *tvb, pr
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		/* we are finished here if we spot a closing tag */
 		if (tag_is_closing(tag_info)) {
 			break;
@@ -3918,7 +3928,7 @@ fAddListElementRequest(tvbuff_t *tvb, pr
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			offset += fTagHeaderTree (tvb, subtree, offset,
 				&tag_no, &tag_info, &lvt);
@@ -3954,7 +3964,7 @@ fDeleteObjectRequest(tvbuff_t *tvb, prot
 }
 
 static guint
-fDeviceCommunicationControlRequest(tvbuff_t *tvb, proto_tree *tree, guint offset)
+fDeviceCommunicationControlRequest(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	guint lastoffset = 0;
 
@@ -3980,7 +3990,7 @@ fDeviceCommunicationControlRequest(tvbuf
 }
 
 static guint
-fReinitializeDeviceRequest(tvbuff_t *tvb, proto_tree *tree, guint offset)
+fReinitializeDeviceRequest(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	guint lastoffset = 0;
 
@@ -4038,7 +4048,7 @@ fVtDataRequest (tvbuff_t *tvb, proto_tre
 }
 
 static guint
-fVtDataAck (tvbuff_t *tvb, proto_tree *tree, guint offset)
+fVtDataAck (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	guint lastoffset = 0;
 
@@ -4060,7 +4070,7 @@ fVtDataAck (tvbuff_t *tvb, proto_tree *t
 }
 
 static guint
-fAuthenticateRequest (tvbuff_t *tvb, proto_tree *tree, guint offset)
+fAuthenticateRequest (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	guint lastoffset = 0;
 
@@ -4102,7 +4112,7 @@ fRequestKeyRequest (tvbuff_t *tvb, proto
 	offset = fObjectIdentifier (tvb, tree, offset); /* Requesting Device Identifier */
 	offset = fAddress (tvb, tree, offset);
 	offset = fObjectIdentifier (tvb, tree, offset); /* Remote Device Identifier */
-	return fAddress (tvb, tree, offset);
+	return fAddress (tvb, pinfo, tree, offset);
 }
 
 static guint
@@ -4131,7 +4141,7 @@ fReadPropertyAck (tvbuff_t *tvb, proto_t
 	propertyArrayIndex = -1;
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			offset += fTagHeaderTree (tvb, subtree, offset,
 				&tag_no, &tag_info, &lvt);
@@ -4178,7 +4188,7 @@ fWritePropertyRequest(tvbuff_t *tvb, pro
 	propertyArrayIndex = -1;
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			offset += fTagHeaderTree (tvb, subtree, offset,
 				&tag_no, &tag_info, &lvt);
@@ -4225,7 +4235,7 @@ fWriteAccessSpecification (tvbuff_t *tvb
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			offset += fTagHeaderTree (tvb, subtree, offset,
 				&tag_no, &tag_info, &lvt);
@@ -4271,7 +4281,7 @@ fPropertyReference (tvbuff_t *tvb, proto
 	propertyArrayIndex = -1;
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) { /* closing Tag, but not for me */
 			return offset;
 		}
@@ -4330,7 +4340,7 @@ fObjectPropertyValue (tvbuff_t *tvb, pro
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			offset += fTagHeaderTree (tvb, subtree, offset,
 				&tag_no, &tag_info, &lvt);
@@ -4458,7 +4468,7 @@ fSpecialEvent (tvbuff_t *tvb, proto_tree
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			continue;
 		}
@@ -4503,7 +4513,7 @@ fSelectionCriteria (tvbuff_t *tvb, proto
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {  /* stop when we hit outer closing tag */
 			continue;
 		}
@@ -4540,7 +4550,7 @@ fObjectSelectionCriteria (tvbuff_t *tvb,
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {  /* stop when we hit outer closing tag */
 			continue;
 		}
@@ -4576,7 +4586,7 @@ fReadPropertyConditionalRequest(tvbuff_t
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 
 		if (tag_is_opening(tag_info) && tag_no < 2) {
 			offset += fTagHeaderTree (tvb, subtree, offset, &tag_no, &tag_info, &lvt);
@@ -4606,7 +4616,7 @@ fReadAccessSpecification (tvbuff_t *tvb,
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			offset += fTagHeaderTree (tvb, subtree, offset, &tag_no,
 				&tag_info, &lvt);
@@ -4646,7 +4656,7 @@ fReadAccessResult (tvbuff_t *tvb, proto_
 
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		if (tag_is_closing(tag_info)) {
 			offset += fTagHeaderTree (tvb, subtree, offset,
 				&tag_no, &tag_info, &lvt);
@@ -4706,7 +4716,7 @@ fCreateObjectRequest(tvbuff_t *tvb, prot
 
 	while ((tvb_length_remaining(tvb, offset) > 0) && (offset > lastoffset)) {  /* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 
 		if (tag_no < 2)
 		{
@@ -4756,7 +4766,7 @@ fReadRangeRequest (tvbuff_t *tvb, proto_
 
 	offset = fBACnetObjectPropertyReference(tvb, subtree, offset);
 
-	fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	/* optional range choice */
 	if (tag_is_opening(tag_info)) {
 		tt = proto_tree_add_text(subtree, tvb, offset, 1, val_to_str(tag_no, BACnetReadRangeOptions, "unknown range option"));
@@ -4805,7 +4815,7 @@ fReadRangeAck (tvbuff_t *tvb, proto_tree
 	/* itemCount */
 	offset = fUnsignedTag (tvb, subtree, offset, "item Count: ");
 	/* itemData */
-	fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 	if (tag_is_opening(tag_info)) {
 		tt = proto_tree_add_text(subtree, tvb, offset, 1, "itemData");
 		subtree = proto_item_add_subtree(tt, ett_bacapp_value);
@@ -4829,7 +4839,7 @@ static guint fAccessMethod(tvbuff_t *tvb
 	proto_item* tt;
 	proto_tree* subtree = NULL;
 
-	fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 
 	if (tag_is_opening(tag_info))
 	{
@@ -4851,7 +4861,7 @@ static guint fAccessMethod(tvbuff_t *tvb
 		if ((bacapp_flags & BACAPP_MORE_SEGMENTS) == 0)
 		{
 			/* More Flag is not set, so we can look for closing tag in this segment */
-			fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+			fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 			if (tag_is_closing(tag_info)) {
 				offset += fTagHeaderTree (tvb, subtree, offset,	&tag_no, &tag_info, &lvt);
 			}
@@ -4870,7 +4880,7 @@ fAtomicReadFileRequest(tvbuff_t *tvb, pr
 
 	offset = fObjectIdentifier (tvb, tree, offset);
 
-	fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+	fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 
 	if (tag_is_opening(tag_info))
 	{
@@ -4895,10 +4905,10 @@ fAtomicWriteFileRequest(tvbuff_t *tvb, p
 }
 
 static guint
-fAtomicWriteFileAck (tvbuff_t *tvb, proto_tree *tree, guint offset)
+fAtomicWriteFileAck (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset)
 {
 	guint tag_no = fTagNo(tvb, offset);
-	return fSignedTag (tvb, tree, offset, val_to_str(tag_no, BACnetFileStartOption, "unknown option"));
+	return fSignedTag (tvb, pinfo, tree, offset, val_to_str(tag_no, BACnetFileStartOption, "unknown option"));
 }
 
 static guint
@@ -5093,7 +5103,7 @@ fIAmRequest  (tvbuff_t *tvb, proto_tree
 		"Segmentation Supported: ", BACnetSegmentation);
 
 	/* vendor ID */
-	return fUnsignedTag (tvb, tree, offset, "Vendor ID: ");
+	return fUnsignedTag (tvb, pinfo, tree, offset, "Vendor ID: ");
 }
 
 static guint
@@ -5341,7 +5351,7 @@ fConfirmedPrivateTransferError(tvbuff_t
 	while ((tvb_length_remaining(tvb, offset) > 0)&&(offset>lastoffset)) {
 		/* exit loop if nothing happens inside */
 		lastoffset = offset;
-		fTagHeader (tvb, offset, &tag_no, &tag_info, &lvt);
+		fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
 		switch (tag_no) {
 		case 0:	/* errorType */
 			offset = fContextTaggedError(tvb, subtree, offset);
