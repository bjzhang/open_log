#!/usr/bin/perl

use strict;
use Encode;
use Getopt::Std;    #for getopts
use vars qw($opt_f $opt_p);
use IO::Handle;     #for autoflush
use File::Basename; #for basename

#global variable declaration
my $patch;          #patch file name
my @result;
my $func_list_file;
my @func;

getopts('f:p:');
if ( $opt_f ) {
    $func_list_file = $opt_f;
    print "function list is $func_list_file\n";
} else {
    die "no function list";
}

if ( $opt_p ) {
    $patch = $opt_p;
    print "patch file is $patch\n";
} else {
    die "no patch file";
}

my $result = $patch.".result";
open FUNCTION_LIST, "$func_list_file";
@func = <FUNCTION_LIST>;
my @func_new;
foreach (@func) {
     push @func_new, split /\s+/,$_;
}
print "functions: @func_new";
print "end\n";
@func = @func_new;
close FUNCTION_LIST;

#delete two form of function name. 
#1, 
# fTagHeaderTree (tvbuff_t *tvb, proto_tree *tree, guint offset,
#     guint8 *tag_no, guint8* tag_info, guint32 *lvt)
#2, 
#             offset += fTagHeaderTree(tvb, tree, offset, &tag_no, &tag_info, &lvt);

open PATCH, $patch;
open RESULT, ">$result";
my $i = 0;
my $line;
while($line=<PATCH>) {
    my $func;

    if ( $i % 100 == 0 ) {
        my $time = `date +%H%M%S`;
        chomp $time;
        print "$time: i = $i\n";
    }
    $i++;

    #remove "+ * @param pinfo"
    if ( $line =~ s/\+\ \*\ \@param\ pinfo/  * \@param pinfo/ ) {
        print RESULT $line;
        next;
    }

    #search function prototype, definition or call
#    if ( $line =~ /(f[^\ ^\(]*)/ ) { 
    if ( $line =~ /^.*\b(\w+)\ *\(/ ) { 
        $func = $1;
#        print "$i: $func: $line\n";
    } else {
        print RESULT $line;
        next;
    }

    #match with patch file. find out the valid function name which need to be 
    #removed
    foreach my $f (@func) {
        if ( $line =~ /$f/ ) {
            print "match!! $i: $f\n";
            print $line;
            if ( $line =~ /^-[^-]/ ) {
                $line = "";
            } 
            if ( $line =~ /^\+[^\+]/ ) {
                $line =~ s/^\+/\ /;
            }
            last;
        }
    }
    print RESULT $line;
}

close SOURCE_FILE;
close RESULT; 

