--- trunk/epan/dissectors/packet-bacapp.c	2012/04/23 07:19:22	42202
+++ trunk/epan/dissectors/packet-bacapp.c	2012/04/23 07:28:53	42203
@@ -4843,8 +4865,8 @@
 }
 
 static guint
-    guint8 *tag_no, guint8* tag_info, guint32 *lvt)
fTagHeaderTree (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,
+    guint offset, guint8 *tag_no, guint8* tag_info, guint32 *lvt)
 {
     guint8      tag;
     guint8      value;
@@ -4934,20 +4956,30 @@
         } else
             proto_tree_add_uint(subtree, hf_bacapp_tag_lvt,
                 tvb, lvt_offset, lvt_len, *lvt);
+
        if (*lvt > tvb_length(tvb)) {
+            expert_add_info_format(pinfo, ti, PI_MALFORMED, PI_ERROR,
+                    "LVT length too long: %d > %d", *lvt,
+                    tvb_length(tvb));
+            *lvt = 1;
+        }
     }
    else if (*lvt > tvb_length(tvb))
+        /* We can't add expert info, but we can still stop infinite loops */
+        *lvt = 1;
 
     return tag_len;
 }
 
 static guint
fTagHeader (tvbuff_t *tvb, packet_info *pinfo, guint offset, guint8 *tag_no, guint8* tag_info,
     guint32 *lvt)
 {
    return fTagHeaderTree (tvb, pinfo, NULL, offset, tag_no, tag_info, lvt);
 }
 
 static guint
fNullTag (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
     guint8      tag_no, tag_info;
     guint32     lvt;
@@ -5017,18 +5049,18 @@
     proto_item *ti;
     proto_tree *subtree;
 
    tag_len = fTagHeader (tvb, pinfo, offset, &tag_no, &tag_info, &lvt);
     ti = proto_tree_add_item(tree, hf, tvb, offset+tag_len, lvt, ENC_BIG_ENDIAN);
     subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
    fTagHeaderTree (tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
     return offset+tag_len+lvt;
 }
 
 /* set split_val to zero when not needed */
 static guint
-    const value_string *vs, guint32 split_val)
fEnumeratedTagSplit (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,
+    guint offset, const gchar *label, const value_string *vs, guint32 split_val)
 {
     guint32     val = 0;
     guint8      tag_no, tag_info;
@@ -5052,20 +5084,20 @@
             "%s - %u octets (enumeration)", label, lvt);
     }
     subtree = proto_item_add_subtree(ti, ett_bacapp_tag);
    fTagHeaderTree (tvb, pinfo, subtree, offset, &tag_no, &tag_info, &lvt);
 
     return offset+tag_len+lvt;
 }
 
 static guint
-        const value_string *vs)
fEnumeratedTag (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,
+        guint offset, const gchar *label, const value_string *vs)
 {
    return fEnumeratedTagSplit (tvb, pinfo, tree, offset, label, vs, 0);
 }
 
 static guint
fSignedTag (tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, guint offset, const gchar *label)
 {
     gint64      val = 0;
     guint8      tag_no, tag_info;
