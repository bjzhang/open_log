#!/usr/bin/perl
#add function comments between the first and second arguments. 
#* @param tvb = "TestyVirtualBuffer"
#* @param pinfo = packet info
#* @param offset = offset in actual tvb
#* @param tvb
#* @param pinfo
#* @param tree

use strict;
use Encode;
use Getopt::Std;    #for getopts
use vars qw($opt_f $opt_s);
use IO::Handle;     #for autoflush
use File::Basename; #for basename

#global variable declaration
my $source;          #source file name
my $func_list_file;
my @result;
my @func;

getopts('f:s:');
if ( $opt_f ) {
    $func_list_file = $opt_f;
    print "function list is $func_list_file\n";
} else {
    die "no function list";
}
if ( $opt_s ) {
    $source = $opt_s;
    print "source file is $source\n";
} else {
    die "no source file";
}

my $result = $source.".result";

open FUNCTION_LIST, "$func_list_file";
@func = <FUNCTION_LIST>;
my @func_new;
foreach (@func) {
     push @func_new, split /\s+/,$_;
}
print "functions: @func_new";
print "end\n";
@func = @func_new;
close FUNCTION_LIST;

open SOURCE, $source;
open RESULT, ">$result";
my $i = 0;
my $line;

my $func_comment = 0;
my @func_comment = ();
while($line=<SOURCE>) {
    my $func;
    my $match = 0;
    my $func_comment_end = 0;
    my $get_func_prototype = 0;

    if ( $i % 100 == 0 ) {
        my $time = `date +%H%M%S`;
        chomp $time;
        print "$time: i = $i\n";
    }
    $i++;

    #find out the possible function comment. push it into @func_comment until find
    #function need to be replaced
    if ( $func_comment == 0 ) {
        if ( $line =~ /^\/\*\*/ ) {
            print "function comments start: $line";
            $func_comment = 1;
            push @func_comment, $line;
        } else {
            #print the line which is not function comment
            print RESULT $line;
        }
    } elsif ( $func_comment == 1 ) {
        if ( $line =~ /^\ \*\// ) {
            print "function comments end: $line";
            push @func_comment, $line;
            $func_comment_end = 1;
        } else {
#            print "function comments cont: $line";
            push @func_comment, $line;
        }
    }
    if ( $func_comment == 0 ) {
        next;
    }

    if ( 1 == $func_comment_end ) {
        $line = <SOURCE>;
        push @func_comment, $line;
        if ( $line =~ /^.*\b(\w+)\ *\(/ ) { 
            $func = $1;
            $get_func_prototype = 1;
        } else {
            $line = <SOURCE>;
            push @func_comment, $line;
            if ( $line =~ /^.*\b(\w+)\ *\(/ ) { 
                $func = $1;
                $get_func_prototype = 1;
            } else {
                $func_comment = 0;
                #print the func_comment do not have the function prototype
                #in the first two lines after function comments.
                print RESULT @func_comment;
                @func_comment = ();
            }
        }
        $func_comment_end = 0;
    } 

    if ( $get_func_prototype == 1 ) {
        $get_func_prototype = 0;
        print "$i: match with func_list_file.\n";
#        print RESULT @func_comment;
        foreach my $f (@func) {
            if ( $func eq $f ) {
                print "match!! $i: $f\n";
                $match = 1;
                my $j = 0;
                foreach my $c (@func_comment) {
                    if ( $c =~ /^\ \*\ \@param\ \w+/ ) {
                        $j++;
                        if ( $j == 2 ) {
                            if ( $c =~ /^\ \*\ \@param\ \w+\.+/ ) {
                                print "$j:  * \@param pinfo = packet info\n";
                                print RESULT " * \@param pinfo = packet info\n";
                            } else {
                                print "$j:  * \@param pinfo\n";
                                print RESULT " * \@param pinfo\n";
                            }
                        }
                        print "$j: $c";
                        print RESULT $c;
                    } else {
                        print "$j: $c";
                        print RESULT $c;
                    }
                }
            }
        }
        if ( $match == 0 ) {
            #print the function do not match the function name. 
            print RESULT @func_comment;
        }
        $func_comment = 0;
        @func_comment = ();
        $match = 0;
    }

}

#need this?
print @func_comment;
print RESULT @func_comment;

close SOURCE_FILE;
close RESULT; 

