
09:41 2018-01-12
----------------
TODO
1.  children english dictionary
    1. https://www.oxforddictionaries.com/schools
2.  nas
3.  deploy tools.

10:36 2018-01-14
----------------
GTD
---
1.  plan
    1.  跑动ceph镜像构建部署全流程。
    2.  大姐路由器。
    3.  和凡一一起买字典？

00:04 2018-01-27
----------------
hikey960, Linux
---------------
1.  烧写debian
    第一次烧写没成功，似乎是因为hikey_idt和config以及二进制没有在同一个目录，也许hikey_idt去了上一个目录找二进制。
    我烧写时候，大约几秒钟会完成。如果时间太长可能是是有异常。尤其是ttyUSB0长期不动的时候。
    todo：strace hikey_idt，看是否和我怀疑的一样。
    https://github.com/96boards-hikey/tools-images-hikey960.git
    tools-images-hikey960/install-prebuilt-uefi/README.md
    tools-images-hikey960/install-prebuilt-uefi/hikey960-efi-prebuilt.sh

    ./hikey_idt -c config


    echo "Sleeping till device resets... zzz"

    打印上面内容，另一篇文档写系统重起时，有10s的timeout，按f后就可以用fastboot继续烧写。
    todo：确定不按f是否可以用。

    fastboot flash ptable prm_ptable.img
    fastboot flash xloader sec_xloader.img
    fastboot flash fastboot l-loader.bin
    fastboot flash fip fip.bin

烧写boot uefi img和desktop img。
fastboot flash boot boot-0.0+AUTOINC+ba45819943-ea12986b87-r0-hikey960-20180126071619-127.uefi.img
fastboot flash system rpb-desktop-image-lava-hikey960-20180126071619-127.rootfs.img
启动说找不到rootfs，看到grub cfg的root在sdd10，不知道是不是写错了。
rpb-console-image-lava-hikey960-20180126071619-127.rootfs.img 成功。


    [自己改写ptable，生成ptable.img](https://github.com/96boards-hikey/partition-table-tool/blob/master/efipartition.c)


    <https://github.com/96boards-hikey/tools-images-hikey960>

    <http://snapshots.linaro.org/reference-platform/embedded/master/hikey960/latest/rpb/>

2.  烧写后lspci看不到任何设备。
    1.  找资料
        1.  [HiKey960のM.2コネクタがSSDを認識するようになった](http://raphine.hatenablog.com/entry/2017/12/29/031501)
        2.  [HiKey960のM.2コネクタはSSDを認識するのだろうか＜その１＞](http://raphine.hatenablog.com/entry/2018/01/10/205559)
        3.  [HiKey960上でM.2 SSDの性能をゆるーく測定した。](http://raphine.hatenablog.com/entry/2018/01/10/210640)
    2.  根据资料1.1，找到[linaro 庄皓坚]的commit(https://github.com/ARM-software/arm-trusted-firmware/pull/1216/commits)，看下主线的git日志，已经合入了。从[hikey960-efi-prebuilt.sh](https://github.com/96boards-hikey/tools-images-hikey960/blob/master/install-prebuilt-uefi/hikey960-efi-prebuilt.sh)找到日构建的连接，目前最新版本是[51](http://builds.96boards.org/snapshots/reference-platform/components/uefi-staging/51/hikey960/release/)。为了简单也可以每次看latest目录。

3.  (23:00 2018-02-07)
    1.  自己编译了内核仍然不行。有点怀疑是uefi问题。
        1.  `dmesg |grep pci -i`:
            ```
            root@hikey960:~# dmesg |grep pci -i
            [    0.000000]     PCI I/O : 0xffff7dfffee00000 - 0xffff7dffffe00000   (    16 MB)
            [    0.293605] PCI: CLS 0 bytes, default 128
            [    0.401360] ehci-pci: EHCI PCI platform driver
            [    0.401619] ohci-pci: OHCI PCI platform driver
            [    0.691484] tcpci_timer_init : init OK
            [    0.768787] [E/hisi_pd] tcpci_disable_vbus_control: !!!++++++++
            ```
        2.  加打印：
            ```
            root@hikey960:~# dmesg | grep pci -i
            [    0.000000]     PCI I/O : 0xffff7dfffee00000 - 0xffff7dffffe00000   (    16 MB)
            [    0.293994] PCI: CLS 0 bytes, default 128
            [    0.313790] kirin-pcie f4000000.pcie: kirin_pcie_probe start
            [    0.401700] ehci-pci: EHCI PCI platform driver
            [    0.401960] ohci-pci: OHCI PCI platform driver
            [    0.714180] tcpci_timer_init : init OK
            [    0.789097] [E/hisi_pd] tcpci_disable_vbus_control: !!!++++++++
            ```

09:41 2018-02-03
----------------
GTD
---
1.  7:30醒，没睡着。8:05起床，做鸡蛋羹，洗漱，吃早餐 -9:05
2.  9:06-9:36 下楼散步，本来想跑步，觉得膝盖不是很舒服，取消。
3.  9:36-10:10 回家，写GTD。整理本周支出。感觉困。
4.  10:10-10:58 keep。膝关节，俯卧撑。
5.  10:59-11:06 收衣服，洗衣服
6.  11:06-16:44 午饭，羊蝎子准备，泡点香菇。吃饭。台式机升级完成，配置proxy，cow。准备晚餐。
7.  16:44-17:44 睡觉30‘，刷牙，合并open_log。
8.  17:45- 羊蝎子调味。
9.  hikey960 20'

09:44 2018-02-04
----------------
GTD
---
1.  8:00-9:46 起床。hikey960资料。洗漱。吃干拌面。
2.  9:45-10:05 洗碗，休息10’。
3.  10:05-11:41 饭后散步，跑前热身，分阶段燃脂跑（膝盖不舒服，基本没有快跑），跑后拉伸。
3.  11:41-13:20 做午饭（高压锅做香菇鸡腿，蒸米饭），准备早餐（菠菜鸡蛋全麦饼），吃麻酱，蜂蜜。
4.  13:20- 等待饭菜熟。吃饭。睡觉（约一个小时）
5.  16:27-17:13 电饭锅做米饭，擦厨房地，擦屋里的地。
6.  17:13-17:43 聊天，买蟑螂药。
7.  17:43-18:14 看朋友圈，看17年就业去向。
8.  18:14-18:49 热菜。香菇鸡腿汤饭。
9.  18:49-19:06 吃饭。
4.  wish list
    1.  健身。（周六周日完成，）
    1.  hikey960 NAS性能测试。
        1.  板子下周可能要还。最好周末有结果。
        2.  m.2认不出来。uefi, kernel.
        3.  性能测试。
            1.  m.2
            2.  wlan.
            3.  1000M usb lan.
    1.  读英语。
        1.  看下复习所有不会的题目需要多长时间。
        2.  看托业对应的章节。
    3.  mark邮件?
    4.  公众号。30'
    5.  读论文，看分布式课程。
    6.  准备羊蝎子火锅（状态不好的时候做）
        1.  炖羊蝎子。
        2.  摘菜。

13:21 2018-02-03
----------------
Software skill, distribution, opensuse
--------------------------------------
[libreoffice](http://download.opensuse.org/repositories/LibreOffice:/5.4/openSUSE_Leap_42.3/LibreOffice:5.4.repo)
[packman](http://mirrors.hust.edu.cn/packman/suse/openSUSE_Leap_42.3/)

[浏览器插件](https://opensuse-guide.ustclug.org/browserplugins.php>
`zypper addrepo -f http://packman.inode.at/suse/openSUSE_Leap_42.3/ packman`
`zypper install freshplayerplugin`
`zypper install xine-browser-plugin`
[Microsoft Silverlight](http://software.opensuse.org/package/pipelight)未安装。

[多媒体解码器](https://opensuse-guide.ustclug.org/codecs.php)
`zypper addrepo -f http://opensuse-guide.org/repo/openSUSE_Leap_42.3/ dvd`
`zypper install ffmpeg lame gstreamer-plugins-bad gstreamer-plugins-ugly gstreamer-plugins-ugly-orig-addon gstreamer-plugins-libav libdvdcss2`
执行下面命令切换所有相关软件包到packman。
`zypper dup --from http://packman.inode.at/suse/openSUSE_Leap_42.3/`

19:35 2018-02-05
----------------
ref<https://github.com/shadowsocks/shadowsocks/issues/646>
```
ansible@localhost:~/ss> sudo pip install -U git+https://github.com/shadowsocks/shadowsocks.git@2.9.1
Collecting git+https://github.com/shadowsocks/shadowsocks.git@2.9.1
  Cloning https://github.com/shadowsocks/shadowsocks.git (to 2.9.1) to /tmp/pip-usy75n86-build
Installing collected packages: shadowsocks
  Found existing installation: shadowsocks 2.8.2
    Uninstalling shadowsocks-2.8.2:
      Successfully uninstalled shadowsocks-2.8.2
  Running setup.py install for shadowsocks ... done
Successfully installed shadowsocks-2.9.1
```

14:10 2018-02-09
----------------
资源, web url, 链接
-------------------
1,  nfs test
    1.  <https://stackoverflow.com/questions/21565865/filesystem-test-suites/25940371#25940371>
    2.  <https://fedoraproject.org/wiki/Category:NFS_Test_Cases>
    3.  nfs基本功能测试看起来用ltp nfs和xfstest就行了。
2.  程序设计
    1.  golang
        1.  代码阅读: <https://sourcegraph.com/github.com/dgraph-io/badger/-/blob/db.go#L166:6$references>
    2.  算法
        1.  斯坦福的看起来不错：<https://www.coursera.org/specializations/algorithms>
    3.  搜索工具
        1.  [ripgrep](https://github.com/BurntSushi/ripgrep)
3.  容器
    1.  海航k8s文档：<https://jiulongzaitian.gitbooks.io/kubernetes/content//>
4.  simulator, emulator
    1.  [The gem5 Simulator](http://www.gem5.org/Main_Page)
        "The gem5 simulator is a modular platform for computer-system architecture research, encompassing system-level architecture as well as processor microarchitecture."

21:55 2018-02-10
----------------
资源
----
1.  cubietruck
    ```
    2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000
        link/ether 02:53:04:41:84:79 brd ff:ff:ff:ff:ff:ff
    3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
        link/ether 00:22:f4:fb:55:be brd ff:ff:ff:ff:ff:ff
    ```

22:50 2018-02-10
----------------
internet sharing
----------------
```
yast2 firewall interfaces add interface=eth1 zone=internal
yast2 firewall interfaces add interface=wlan0 zone=external
yast2 firewall masquerade enable
```

15:13 2018-02-14
----------------
GTD
---
1.  游戏：勇者斗恶龙6。14:33-15:05 18:21-19:18
2.  杂：
    1.  日记：15:13-15:17
    2.  计划. 15:20-15:23 刚写完计划就觉得困了。
    3.  睡觉。15:30-16:00
    4.  keep. 16:00-16:27
    5.  做晚饭，整理原来做的菜，记录最近两天的食谱。16:30-17:34
    6.  吃饭，洗完：17:47-18:21
    7.  洗漱. 19:36-19:56
    8.  打电话，看readhub，发呆。19:56-20:14
3.  技术学习计划
    1.  Linaro的akashi联系我，说他在看我之前做的cont page hint。这个事情确实没事做，果断放弃了。
    2.  有个想法把每次以时间为单位记录的内容都放在badgerIO里面。从evernote和git提取并合并信息。重点是1和2.
        1.  go语言学习。
        2.  keyvalue数据库学习: [badgerIO](https://blog.dgraph.io/post/badger/)。20:14-20:49
            1.  [log structured merge (LSM)](https://en.wikipedia.org/wiki/Log-structured_merge-tree)
            2.  badger IO performance
                ```
                Based on benchmarks, Badger is at least 3.5x faster than RocksDB when doing random reads. For value sizes between 128B to 16KB, data loading is 0.86x - 14x faster compared to RocksDB, with Badger gaining significant ground as value size increases. On the flip side, Badger is currently slower for range key-value iteration, but that has a lot of room for optimization.
                ```
            3.  rocksDB用C++写的，使用Cgo转换会有潜在的问题。但是为什么TiKV rust调用C++没问题呢？语言的差异么？
            4.  LSM会有读放大和写放大。Badger使用LSM保存Key，value log保存value。
            5.  Guiding principles
                *	Write it purely in Go language.
                *	Use the latest research to build the fastest key-value store.
                *	Keep it simple, stupid.
                *	SSD-centric design.
            6.  badger不把key value在一起保存。只是把(value log中)value的指针和key放在一起。
            7.  performance: Range iteration latency慢的比较多，文章认为设计上badger会比rocksdb慢一点，但不应该这么多。需要进一步调查。
            8.  [benchmark](https://github.com/dgraph-io/badger-bench.git)
                1.  TODO: 参考badgerIO benchmark写最简单的go代码get, set, iteration.
        3.  github和evernote api学习。
4.  消化后看golang或keyvalue数据库。
    1.  golang 19:19-19:36
4.  春节后计划
    1.  Linaro的板子春节还。
    2.  问笔记本报销什么时候下来。

19:25 2018-02-14
----------------
<https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/04.2.md>
```
当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。

（大写字母可以使用任何 Unicode 编码的字符，比如希腊文，不仅仅是 ASCII 码中的大写字母）。
```

08:08 2018-02-15
----------------
GTD
---
1.  杂
    1.  7:53-8:39 起床，看手机，短信，洗漱，算账算不清
    2.  8:39-8:49 做早餐。
    3.  8:49-8:58 卫生间
    4.  8:58-9:33 早饭
    5.  9:33-9:45 刷碗。
    6.  超市 11:50-12:40
    7.  做饭. 12:43-13:04
    8.  午睡 13:50-14:20
2.  游戏，勇者斗恶龙6 10:03-11:40 没想到玩儿这么久。
    1.  11:45-11:50 游戏笔记
    2.  14:43 游戏
    2.  TODO整理目前的截图。

10:16 2018-02-21
----------------
GTD
---
1.  杂
    1.  昨天7点多困了，躺在床上玩儿游戏。今天上午觉得头沉。

11:49 2018-02-22
----------------
GTD
---
1.  今日总结
    1.  工作时间分析keyvalue数据库学习时用在竟品的时间有点长。这次为了学习还是围绕golang为主。

2.  golang key-value
    1.  计划 13:56-15:55
        1.  使用golang读取markdown笔记，并按一级标题分割
            1.  golang markdown parser还是自己读取？
            2.  现有文件对markdown使用是否需要调整？时间和关键字用不同标题级别比较好。
        2.  golang读取evernote笔记。
            1.  看到了evernote api可以根据GUID读取笔记内容，也看到了如何添加笔记。但是没看到如何列出指定时间的笔记。
            2.  evernote gosdk是使用facebook的thrift代码生产工具生产的。暂时还不会用。
            3.  感觉evernote api估计需要更多时间搞定，优先级降低一些。
            4.  使用其它笔记软件？之前觉得evernote不方便的地方一个是Linux命令行下没有适合的工具。在一个就是--等很多符号做自动合并为中文符号，而且没法控制。
        3.  二者都写入badgerIO数据库，并显示。
        4.  调研竟品。
            1.  <https://www.integromat.com/>类似原来的IFTTT，可以提供从github gist到evernote的功能。当gist更新时，建立新的evernote笔记。免费版本15分钟同步一次，感觉实时性不太好。
            2.  有道笔记markdown到hexo博客，使用模拟登录方式：https://github.com/gosongs/ynote2hexo/blob/master/start.py
    2.  badgerIO读写key value。15:56-16:07 16:30-17:18

3.  golang game helper: ocr.
    1.  晚上试试ocr方案是否可行。

4.  macbook air重装windows。

17:16 2018-02-22
----------------
golang
------
1.  type File, type Reader
    1.  开始不理解为什么os.Open打开的文件可以丢给Scanner，明明要求是Reader才可以。后来看了<https://medium.com/@matryer/golang-advent-calendar-day-seventeen-io-reader-in-depth-6f744bb4320b>才明白，原因是File实现了Read方法。

09:12 2018-02-23
================
GTD
---
1.  今日总结
    1.  看论文的时候看一部分整理一部分笔记感觉效果挺好的，后面继续坚持。
2.  最近看bigtable和badgerIO的论文，分别出自OSDI和FAST，后面要关注这两个会议。
    1.  TODO查会议时间。
    2.  DONE 打印论文。
3.  badgerIO
    1.  重新过了下trello的任务。
        1.  rocksdb的wiki内容很丰富，可以作为参考。
        2.  <https://github.com/dgraph-io/badger>里面的四篇blog目前看了第一篇。
    1.  看完levelDB文档 10:22-10:39
        1.  levelDB文档只是简单过了下。后续对照badgerIO看。
            1.  TODO: levelDB和huge tlb的关系。
    2.  开始看fast16-papers-lu.pdf
        1.  15:32-16:13 看完第二节。16:15-16:27 整理笔记. ref<bjzhang.github.io/_drafts/2018-02-26-WiscKey-key-value-store.md>
    3.  NEXT: 工作日志可以保存。
4.  杂
    1.  用python写自动插入图片的脚本。看看半个小时能不能写完。13:53
        1.  13:53-14:34 原定功能写完了。想增加一个图片前面的文字，需要再看下正则表达式。
        2.  14:34-14:54 markdown文件已上传。<http://aarch64.me/2018/02/how-to-transfer-file-through-putty/>
        3.  14:54-15:13 整理脚本。
5.  DQ6
    1.  识别图中对话框中的文字。
        1.  根据昨天python的./detect_shapes.py，写了go代码调用这个脚本并且裁出这个矩形：
            ```
            rectangle := try_to_get_main_dialog()
            crop(rectangle)
            ```
            使用`tesseract result.png stdout -l chi_sim --psm 12`时多数情况效果不错，个别2-3场景识别的不好。
        2.  我继续考虑，即使有了都不错的结果。如果知道我要按哪里呢？还是需要提前记录位置。添加每个场景还是比较复杂。后来想了想之前的材料，可以通过[【OCR技术系列之二】文字定位与切割](http://www.cnblogs.com/skyfsm/p/8029668.html)，做文字切割，得到文字区域（给出文字大小，目前游戏中只有一种字体），然后识别。这样就可以根据识别的文字按键了。如果效果不好（误把图片识别为文字），可以参考<https://stackoverflow.com/a/34262838/5230736>的opencv库识别是否可能为文字。后者略有复杂，感觉对我太挑战了。
    2.  NEXT: 可以正确退出战斗。
        1.  其实根据今天的结果，已经可以处理这个场景了。明天先加入这个功能。

09:51 2018-02-24
================
GTD
---
1.  杂
    1.  早晨起来发现所有vpn都不能用了。
    2.  自动化vpn部署脚本。
        1.  今天的目标是手工执行所有适合脚本执行的命令。时间半个小时。没完成的话穿插做。10:10-11:15
            1.  实际用了1个小时完成了可以ssh到vm的文档。
        2.  personal api key: 46d6376a0d764b311e83c68aea114a62da03471f030c3b684c111bf3951c3075
        3.  <bjzhang.github.io/_posts/2018/2018-02-24-linode-cli.md> <http://aarch64.me/2018/02/linode-cli/>
        4.  ips可以通过api得到<https://developers.linode.com/v4/reference/linode#ips>。将来可用golang写一个客户端
            1.  很奇怪，通过linode-cli show xxx | grep ips 得不到结果
        5.  linode可以保存images，也可以写SlackScript，可以把部署shadowsocks和kcp tunnel都写在脚本里面。
    3.  计划 11:19-11:23
    4.  记账，吃饭，刷碗，卫生间。11:23-12:35
    5.  午睡 12:40-13:16
    6.  刷牙，散步1000不。13:16-13:42
    7.  日记。14:40-14:43
2.  badgerIO
    1.  fast16-papers-lu.pdf
        1.  看完一遍 13:52-14:31 看的时候不断走神。
        2.  NEXT: 整理笔记。
        3.  NEXT: 和冬卯讨论
        4.  把技术日志保存在BadgerIO里面。14:54-16:01 16:13-
            1.  DONE: readline from file
            2.  DONE 从命令行读取文件。
            3.  DONE: 把文件缓存
                1.  16:01 已经可以匹配到key。
            4.  DONE: 转为byte写入badgerIO。
        5.  golang需要尽快系统学习，感觉现在仅仅是当c语言用。
3.  DQ6
    1.  DONE 识别战斗退出和全恢复什么也没发生的场景。
    2.  积累博客素材。
4.  NEXT
    1.  看冬卯今天发的材料和视频<https://talks.golang.org/2012/concurrency.slide>

09:21 2018-02-26
================
GTD
---
1.  杂
    1.  10’ 发公众号。
        1.  本来就是点几下鼠标点事情，转发朋友圈之前还是有些犹豫，觉得技术含量不高的感觉。
    2.  计划 09:34-09:37
    3.  做饭，吃饭，休息，明天早餐. 11:21-14:19
    4.  记账。14:19-14:38
    5.  睡觉 16:06-16:23
    6.  感觉现在列的action item又有点多了。这样很难做完。有些信息收集要放到笔记里面，不要直接放到action item中。
2.  NEXT: 通过bmc安装部署。截图便于后续opencv分析。
    1.  尝试连接bmc
        1.  配置ip后网络断了。14:39-14:49 16:23-16:39. ref"16:37 2018-02-26"
        2.  网络不通 15:41-15:47
3.  badgerIO
    1.  golang:
        1.  看冬卯今天发的材料和视频<https://talks.golang.org/2012/concurrency.slide> 09:38-10:03 听到21:45听困了。14:49-15:25 看完了。
            1.  Concurrecny is not parallelism.
            2.  有类似golang concurrency的特性的语言：Occam, Erlang...
            3.  "Rough analogy: writing to a file by name (process, Erlang) vs. writing to a file descriptor (channel, Go)."
            4.  go statement: run but not make the caller wait.
            5.  channel: do not communicate with share memories, use channels instead.
                1.  "func boring(msg string) <-chan string { // Returns receive-only channel of strings."
            6.  buffer channel like mailbox in Erlang.
    1.  fast16-papers-lu.pdf
        1.  NEXT: 整理笔记。10:05-10:41 15:59-16:06
            1.  ref <bjzhang.github.io/_drafts/2018-02-26-WiscKey-key-value-store.md>
            2.  下午一看论文也是困，郁闷。
4.  DQ6
    1.  整理思路，写公众号素材。
    2.  NEXT: 在game helper里面使用channel。
5.  Nentropy ansible部署。<https://github.com/journeymidnight/nentropy>
    1.  学习Nentropy如何使用。10'

16:37 2018-02-26
================
software skill, windows, network, add ip address
------------------------------------------------
1.  <https://www.howtogeek.com/51741/how-to-quickly-add-multiple-ip-addresses-to-windows-servers/>
    `netsh interface ipv4 add address “Local Area Connection” 192.168.1.2 255.255.255.0`
2.  <https://superuser.com/questions/786345/why-do-i-get-error-the-filename-directory-name-or-volume-label-syntax-is-inco>
    注意上面的interface名字需要是从`netsh interface show interface`得到的。

09:11 2018-02-27
================
GTD
---
1.  杂
    1.  计划 09:11-09:14
    2.  梳理任务安排。
    3.  刷碗. -09:46(5')
    4.  睡觉。12:00-12:39
    5.  吃饭 13:35-14:13
    6.  请假 14:17-14:25
    7.  云平台工时填写培训。20'
2.  通过bmc安装部署。截图便于后续opencv分析。
    1.  第一次安装，截图。09:19-09:37 09:46-11:57 12:42-13:35
        1.  DONE bmc是192.168.70.103/104/105, 浏览器打开，admin/admin
            1.  安装中。
            2.  执行dracut -f，检查uefi启动菜单。
    2.  同步测试下之前矩形分析和文字识别的代码。
        1.  第一次截图是直接抓了感兴趣的区域，这对于写文档很方便，但是对于全屏文字识别反而是越俎代庖了。
        2.  图片整理。14:27-15:11
3.  badgerIO
    1.  fast16-papers-lu.pdf
        1.  整理笔记。
            1.  ref <bjzhang.github.io/_drafts/2018-02-26-WiscKey-key-value-store.md>
4.  computer vision 15:15-16:18
    1.  <https://github.com/opencv/opencv_contrib/blob/master/modules/text/samples/textdetection.py>把最小区域调小后，白色背景深色字体的情况效果很好。
        ```
        -  er1 = cv.text.createERFilterNM1(erc1,16,0.00015,0.13,0.2,True,0.1)
        +  er1 = cv.text.createERFilterNM1(erc1,16,0.00001,0.13,0.2,True,0.1)
        ```
    2.  有明显区域的看看能不能通过区域监测划分出小区域。
        1.  试了试，对于大的色块并且不是完全封闭的区域（因为有标题栏）基本认不出区域。

08:46 2018-02-28
================
GTD
---
1.  杂
    1.  休年假一天。
    1.  计划 8:46-08:54
    1.  今天的定位是文档整理，思路梳理。
    1.  微信群讨论。09:50-10:03
1.  game helper目前进度整理，思路梳理。
    1.  思路梳理 08:54-09:50 下午也用了2h整理。发现其实整理的是图片，并不是思路。感觉自己有点做的太细迷失了方向。

16:37 2018-02-28
================
全年计划
--------
不要死守计划，遇到问题及时调整。
1.  技术
    1.  完成coursera cloud computing 两门课。
    2.  熟悉golang语言，编写独立golang文本识别和界面控制自动化引擎。
    3.  理解分布式存储基础知识，写出简单可用的分布式keyvalue数据库。
2.  身体
    1.  保证睡眠
    2.  每天两万步或keep健身40分钟，或两者的结合。
    3.  减脂到体重65公斤。

09:13 2018-03-01
================
GTD
---
1.  杂
    1.  计划 09:17-09:18
        1.  每天定的计划都完不成。
    2.  为冬卯简介SGX。09:18-09:26
    3	English
        1.  nesscssitate.
    4.  午睡 12:30-13:15
    5.  刷牙 13:25-13:43
    6.  记账。13:43-13:55
1.  badgerIO
    1.  fast16-papers-lu.pdf
        1.  09:28-10:02
        2.  和冬卯讨论:
            1.  说对于传统数据库，1k value已经很大了。
            2.  levelDB文档要认真看。
    1.  有空的话看看如何在keyvalue数据库中保存信息。
        1.  和冬卯简单讨论，冬卯说最简单的办法是cow_col作为key，value存到value里面。
        1.  和冬卯讨论
            1.  一看论文就困。不知道要讨论啥。
2.  Nentropy ansible部署。<https://github.com/journeymidnight/nentropy>
    1.  脚本可以在多节点上跑通。10:30-11:08
        1.  ceph
            1.  <http://docs.ceph.com/docs/kraken/man/8/ceph-osd/>
        1.  pg没有建立成功。初步怀疑选错了网卡，因为日志里面用的是我169网段的网卡。虽然自己机器可以ping通。不知道对协议有没有影响。
        1.  15:52-16:10 关了vpn就可以了。现在ip地址拿的也是10.71.84.61，不是169网段的地址了。
        1.  16:55
3.  golang
    1.  golang保存照片。
        1.  base64 14:32-15:22
            1.  终于抄出来把png转为base64的代码。但是没有完全理解。

09:49 2018-03-02
================
GTD
---
1.  杂
    1.  小憩 10:54-11:03
    2.  记账 11:03-11:34
    3.  寄hikey960.
1.  机器学习，人工智能
    1.  python机器学习。kmins函数。30' 40'(一边走路一边听)
1.  badgerIO
    1.  levelDB文档。 10:36-10:54 11:03-xxx
        1.  levelDB log format是做什么的？
        2.  levelDB其它文档：
            1.  <https://ayende.com/blog/posts/series/161410/reviewing-leveldb?page=2>
            2.  [SSTable and Log Structured Storage: LevelDB](https://www.igvita.com/2012/02/06/sstable-and-log-structured-storage-leveldb/)

12:17 2018-03-03
================
1.  杂
    1.  没有多难受。但是也不想写东西。从12多真正开始写了，觉得写东西也没有那么难受。也许这就是自律的作用。
    2.  睡觉。睡醒觉得舒服多了。13:50-16:00
    3.  醒觉，找go学习材料。16:00-16:28
    4.  刷碗，做粥。13:28-16:39
    5.  洗手间，洗手，晾粥。18:11-18:20
    6.  刷碗。19:03-19:09
3.  完成周一公众号。
    1.  完成大纲。
        1.  想的是写大纲，但是写的太细了。12:22-12:51
        2.  完成整理思路，看看还缺什么。13:05-13:31 13:36-13:50 17:17-17:56 17:56-18:11
        3.  重新看下写好的草稿。18:20-19:03 19:36-20:02 20:06-xxx
            1.  一边做一边吃零食的习惯不好。以后零食不放工作台边上。
            2.  以后还是需要一边做一边写文档，这次dq6是做到中后期写文档，感觉单独写文档的时间比较长。
        4.  制作动画方法见：<bjzhang.github.io/public/images/games/convert.sh>。19:09-19:36
        5.  再简单整理下文档。21:00-21:17
            1.  自己容易陷入细节，通过番茄工作法可能是个办法提醒自己review每段工作的效果。
        6.  重头戏是完成代码。
            1.  写整理流程。21:20-21:47
                1.  希望尽可能多用于写go的特性。
                    1.  使用goroutine。一个抓图一个处理。多个抓图一个处理？
                    2.  main函数尽量和dq6解耦，便于以后用于其它游戏和bmc。
                    3.  感觉对于golang还很不熟悉。
3.  16:28-17:16 听golang讲座1, 2. <https://github.com/Unknwon/go-fundamental-programming>.
    1.  go command
        1.  `godoc -http ":6060"`，用浏览器"localhost:6060"查看本地go文档。
        2.  gofmt格式化代码。
        3.  go test运行测试代码。

1.  每天抽出时间看视频。
    1.  今天看coursera的cloud computing视频。
        1.  看了gossip协议部分，还没有看完。
1.  投linuxcon议题。
1.  macbook air重装。
    1.  调研方案。
1.  badgerIO
    1.  看看PingCap 唐刘的TiKV。
        1.  看完coursera视频之后。

16:21 2018-03-03
================
学习资源
--------
1.  golang学习: 整理到useful link
    1.  中文教程。<https://github.com/Unknwon/go-fundamental-programming>
    1.  里面有syncthing, k8s等我听说过的项目，需要时可以参考。<http://herman.asia/open-source-go-projects-to-learn-from>
    1.  [Google I/O 2013 - Advanced Go Concurrency Patterns](https://www.youtube.com/watch?v=QDDwwePbDtw)

2.  机器学习: TODO报名机器学习么？看看google的课是否也有玩儿游戏的例子？我觉得我还是聚焦下，先多学学分布式存储。
    1.  <https://developers.google.com/machine-learning/crash-course/?hl=zh-cn>

11:53 2018-03-04
================
GTD
---
1.  杂
    1.  去医院开药。13:20-15:36
        1.  路上听了golang slice。
    2.  记账。15:39-xxx
    3.  发呆 -16:38 继续刷手机。-17:03
    4.  吃面条. 21:10
2.  LC3: 投了两个topic。11:53-13:20
3.  DQ6
    1.  代码逻辑
        1.  基本数据结构定了。17:04-17:49
        2.  确定基本函数逻辑。
            1.  17:51-18:18 写了半天在一个函数调用提示。开始一直觉得是函数或变量不对。后来发现把函数移到while外面就可以。才看出是因为golang没有while关键字。。。
                ```
                $ go run fighting_new.go
                # command-line-arguments
                ./fighting_new.go:99:35: syntax error: unexpected newline, expecting comma or }
                ```
            2.  18:28-19:13 中间被打算10'，学会了怎么初始化嵌套的map。开始有问题是因为map里面多加了一层大括号。没多一层大括号这样golang会认为多了一层类型。TODO怎么把处理每个scenario和button的代码也加入进去?
                ```go
                type position struct {
                    x int
                    y int
                }
                type button map[string](position)
                type scenario map[string](button)
                var scenarios = scenario{
                    "startFighting": {
                        "fighting": {-1, -1},
                        "escaping": {-1, -1},
                    },
                    "exitFighting": button{
                        "exiting": {-1, -1},
                    },
                }
                func main() {
                    scnr := "startFighting"
                    bttn := "fighting"
                    fmt.Printf("%v: %v: %v\n", scnr, bttn, scenarios[scnr][bttn])
                }
                ```
            3.  19:29-19:55 结构体不动的情况下能不能把函数细化下？一直再改结构体。
                1.  还是遇到数据结构使用的问题，map里面的value不能直接修改，需要reassign。
                2.  突然觉得是不是应该在什么地方把map里面把value定义为不重复的类型？或者定义为接口？然后把不同的处理函数放进入。
            4.  20:09-20:34 看起来代码结构还可以，先写一个战斗画面的完整逻辑看看。
                1.  连贴带写写了很多。感觉再有25分钟肯定写完了，编译和调试估计还需要两个25分钟。
            5.  20:43-21:07 检查代码。希望能够编译通过。
                1.  可以获得文字了。
            6.  -22:35 从现在情况看还是需要单独提取出白色灰色等颜色，看看能不能更好的识别出文字。不要把时间用在无目的的参数调整上。

6.  去拉勾网上看看相关职位的行情。

11:57 2018-03-04
================
演讲
1.  short
    2014 Opensuse Asia Summit: openSUSE on ARM
    2016 Linuxcon Europe: An efficient unit test and fuzz tools for kernel/libc porting
    2016 Linaro Connect Las Vegas: LAS16-TR07: Working upstream [Mandarin]
    2017 Linaro Connect Budapest: BUD17-305 - Implement contiguous page hint for anonymous page in user space

2.  long version(not finished!)
    Join openSUSE Asia Submit 2014 and give the presentation named "openSUSE on ARM”(https://github.com/openSUSE-CN/oSA2014-slides/blob/master/Bamvor_Jian_Zhang-openSUSE_on_Arm.pdf)
    Give a presentation on community activity:
    Activity link: http://code.csdn.net/news/2818866
    Slide: http://share.csdn.net/slides/1347

12:02 2018-03-04
================
BIO
---
Bamvor Zhang works kernel, libc and storage in differnt senarios such as cloud and mobile in recent ten years. He worked for Huawei and Linaro as Senior Engineer. Right now, he is architect of Eking technology which belong to Hainan airline. His prsentations in recently:
2014 Opensuse Asia Summit: openSUSE on ARM
2016 Linuxcon Europe: An efficient unit test and fuzz tools for kernel/libc porting
2016 Linaro Connect Las Vegas: LAS16-TR07: Working upstream [Mandarin]
2017 Linaro Connect Budapest: BUD17-305 - Implement contiguous page hint for anonymous page in user space

12:11 2018-03-04
================
LC3 China 2018, kiwi
--------------------
1.  Abstract Title
    Building your appliance with suitable method
2.  Abstract
    In this presentation, Bamvor will compare the pros and cons of different appliance builders such as Kiwi, kickstart, autoyast, virt-builder and terraform.  He will share the experiences, challenges, and solutions in their project when building an appliance in a special environment such as the small bootable disk, private network. In the end, He will show the audience how to use these builders to build the same appliance base on the different distribution.
3.  Audience: Describe who the audience is and what you expect them to gain from your presentation.
    Expert audiences are who need to customize the appliance in the standalone, private and public cloud environment. By choosing the suitable appliance builder, audiences could same time on installation and configuration of distribution.

4.  Benefits to the Ecosystem: Tell us how the content of your presentation will help better the ecosystem. (We realize that this can be a difficult question to answer, but as with the abstract, the relevance of your presentation is just as important as the content).

13:05 2018-03-04
================
LC3 China 2018, contiguous page hint
------------------------------------
1.  Audience:
    Kernel developer or System performance engineer who want to analyze and improve the memory performance. After this presentation, audiences will learn how to determine if the memory is the bottleneck and how to know if there is an issue in cache or tlb. Finally, audiences will learn how to improve 64k page performance in arm64 architecture.

09:43 2018-03-05
================
GTD
---
1.  杂
    1.  帮租客查孩子打疫苗的医院，并记录。10:16-10:23
    2.  吃水果。10:23-10:47
        1.  同时在看leveldb文档。
    3.  散步，午饭，散步。11:40-14:15
    4.  今天确定要不要报名xuewei，zouzheng的团体。
    5.  卫生间，喝水，吃火腿肠。15:07-15:20
    6.  小憩 15:24-15:38
    7.  上午和兴义定位个运维报的问题。virsh启动虚拟机卡住，并且是paused状态，没法resume。我猜测是存储问题。实测ceph -s可以，rbd不行。结论是网络问题。
    8.  刷牙，洗手间，看自己的公众号。16:13-16:30
    9.  17:42-18:38 下班走路回家。
    10. 18:38-20:03 做饭吃饭刷碗。
    11. 杂（记账，食谱等）20:03-20:25
    12. 记账，还款准备。20:25-20:51
    13. 21:19-21:22 英语录音。
2.  转正 09:40-10:14
    1.  基本信息
        1.  进入海航时间 2017.10.18
        2.  部门及岗位 云服务事业群云平台事业部基础架构中心资深架构师
    2.  本人述职
        1.  参与2017年公司重点项目虚拟机迁移项目
            1.  负责优化virt-p2v工具性能。
            2.  输出项目文档。
                1.  virt-p2v 迁移脚本使用方法: http://cf.polex.io/pages/viewpage.action?pageId=14457399
                2.  P2V迁移输出文档 2. 交付物（环境、脚本等）信息: http://cf.polex.io/pages/viewpage.action?pageId=16745167
        2.  参与2018年公司重点项目一体机项目。
            1.  负责系统镜像构建和开发自动化测试。
                1.  负责镜像构建工具选型，测试和研发。
            2.  输出镜像服务器搭建到构建手册：http://git.ekingcloud.com/zhangjian/storage_applicance/blob/master/README.md
3.  看和讨论levelDB文档。10:47-11:35
    1.  levelDB implementation.
    2.  现在raft log也存在badgerIO里面。
    3.  相关材料
        1.  badgerIO: 搜索badgerIO的snapshot可以找到snapshot和backup。snapshot和backup都用到了transaction。backup把keyvalue写到一个新的文件完成。
            1.  [any plan to support snapshot? ](https://github.com/dgraph-io/badger/issues/39)
            2.  [Add DB.Backup() and DB.Load() for backup purposes.](https://github.com/dgraph-io/badger/commit/671c20ed0363d44820a3086ad5d86d24fb753c97)
            3.  [transaction](https://github.com/dgraph-io/badger/issues/230)
        1.  rocksDB
            1.  <https://github.com/facebook/rocksdb/wiki/How-to-backup-RocksDB%3F>
            2.  <http://rocksdb.org/blog/2015/11/10/use-checkpoints-for-efficient-snapshots.html>
    4.  badgerIO学习
        1.  从badgerIO的transaction看。14:20-14:44
            1.  [badgerIO transaction设计文档](https://discuss.dgraph.io/t/supporting-transactions-in-badger/1766)
            2.  CockroachDB评测badgerIO的性能和badgerIO自己不同，看起来是场景不同。
        2.  梳理badgerIO代码结构。14:45-15:07 15:20-15:24 15:38-16:13 16:30-17:42(Compact还会没看懂)
            1.  过一遍文件和目录

    5.  pingcap的唐刘有个项目[ledisDB](https://github.com/siddontang/ledisdb)，支持多种数据格式(KV, List, Hash, ZSet, Set)和多种底层数据库(LevelDB, goleveldb, RocksDB, RAM)。
        1.  可以用于学习怎么使用keyvalue数据库。
        2.  唐刘自己有计划，但是还没有用badgerIO的transaction: <https://github.com/siddontang/ledisdb/issues/296>

09:13 2018-03-06
================
GTD
---
1.  杂
    1.  09:13-09:22 替换本文档中tab为4个空格。
    2.  计划。09:23-09:45 用了些时间想晚上能用goroutine做的事情，结果就发散到怎么模拟鼠标键盘点击。心里还是想着怎么继续完善GUI助手。
    3.  散步 10:36-10:59
    4.  11:30-11:49 热饭。看cloud computing.
    5.  11:50-12:00 吃饭。
    6.  12:00-12:14 刷碗，洗手间。
    7.  12:14-12:45 午睡。
    8.  12:45-13:03 刷牙，抹油。听了cloud computing 2.5 Another Probabilistic Failure Detector. 没有完全集中精力，还需要重新听。
    9.  13:03-13:20 总结上午看的cloud computing部分。感觉现在这个记忆力根本记不下来，字都认识完全没有感觉。。。
    10. 14:43-15:18 散步，听武志红心理学。
    11. 15:18-15:26 日记。
    12. 15:26-15:29 整理tech log.
    13. 17:31-19:12 下班，买菜回家。
    14. 19:12-19:50 做饭。切好了明天的菜。
    15. 19:50-19:57 吃饭。从下班到吃饭听了tensorflow第二讲，听到1:07:32 神经网络中的参数表达。
    16. 19:57-20:10 20:21-20:36 记账，记录饮食。
    17. 20:10-20:21 刷碗。
    18. 20:36-xxx(10') 心理学团体文档。
    19. 22:50-23:18 镜像打包总结
1.  gossip协议笔记。不记笔记时间长了就忘了。
    1.  09:47-10:03 找课堂截图。想整理笔记，但是真正看的时候好像也不知道哪里有问题了，看来还是要坐下来重新听一遍。
1.  badgerIO代码。
    1.  先把代码框架捋一下。
        1.  把每个文件都看下。10:06-10:36
            1.  看了一部分感觉还是先看api比较好。
    2.  11:01-11:30 看所有接口的代码。<https://godoc.org/github.com/dgraph-io/badger> 不自觉的就去看细节了。
        1.  参考levelDB文档和WiscKey论文组织文档。
        2.  13:20-13:58 看完了第一层的接口。
        3.  14:03-14:16 看第二层接口。第二层接口中Options是配置参数。skl不知道是做什么的。table和y函数多且比较常用。
    3.  14:16-14:43 继续看每个文件。看能不能了解每个文件都是做什么的。
        1.  觉得这样效率不高。一会儿回来想一想是不是要先看看重点流程。
    4.  17:00-17:31 困了，赶紧走。
        1.  什么是主流程？
            1.  Open, View, Update, Close. Transaction.
                1.  Open, Close已经看过了。View和Update实际依赖Transaction.
            2.  我们的目的是看能不能通过复制sst文件的方式做snapshot。那么需要了解level的管理。从mmtable到sst包括后天会跑什么（只有compaction么）
            3.  所以先看下transaction相关函数，后面可能可以用这些相关函数做snapshot. 然后还是看下level.go。
            4.  如果遇到困难，可以从db.go看看主要api。
            5.  文件格式包括：memtable, sstable, log, vlog, manifest.
    1.  如何看go项目的代码？
1.  golang opencv
    1.  15:30-16:08 边框识别和去除。
        1.  效果很好不知道为什么还有彩色，可能是inrange函数不会比较rgb颜色是否相同。<https://www.pyimagesearch.com/2014/08/04/opencv-python-color-detection/>
    2.  16:13-16:54 忘了计时。
        1.  要不要自己改写inrange函数。
            1.  gocv没法拿到rgb的点，我不知道怎么从int或float转为颜色。暂缓。 2.  可以先去掉边框看看效果。
            1.  去掉边框效果不好，因为findContours只检测了外框。
1.  晚上：
    1.  做饭。
    2.  心理团体报名。

09:29 2018-03-07
================
GTD
---
1.  杂
    1.  09:26-09:33 计划
    2.  9:33-9:38 记账，看邮件。
    3.  能集中精力就继续听cloud computing，不能集中精力就听中文（tensor flow）
    4.  -10:14 10:25-10:44 讨论中软项目自动发现。最后安装xfce，使用java在本机配置每个机器的ip。但是后面的管理界面还是用web，不能用java applet，因为铁路场景只有IE6还是IE7，也没有firefox，我担心对java applet支持不好。
    5.  11:29-12:19 热饭，吃饭，刷碗，饭后休息。听了cloud computing grid部分。感觉是介绍性质的。访谈 听到06:36
    6.  12:19-13:51 午睡
    7.  13:51-14:07 刷牙，洗手间。听完cloud computing week2 访谈。
    3.  访谈
        1.  传统HPC认为每个计算节点计算能力是相同的。现在逐渐不这么认为了。这个和云计算的情况是一样的。
    4.  14:07-14:23 week2 考试。
        1.  做了两次没过。
            1.  两次都错的题是：
                1.  如何判断一个heartbeat算法的completeness和acurate.
                2.  增加heartbeat timeout会导致什么。
1.  badgerIO
    1.  看主流程。
        1.  10:49-11:29 14:34-14:50 14:52-15:07 看完compaction。
            1.  更基础的问题是否是keyvalue是怎么写入的？这可以理解各个文件的格式。
            2.  还没看完compaction。看完之后回去看看怎么保存的keyvalue。
            3.  再看25分钟，不行还是先看别的。
                1.  对我来说太困难了。
        2.  15:07-15:46 16:02-16:27 16:41-17:16
            1.  看如何写入新的key。
            2.  Put逻辑没看懂。暂时跳过具体Put和Get实现。
        3.  17:16-17:26 skl暂时不同看太细。
    2.  如果前面进展慢。继续看每个文件的作用。
1.  golang opencv
    1.  考虑用houge line transform检测直线<https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_imgproc/py_houghlines/py_houghlines.html>
        1.  19:59-23:05 中间也玩儿了游戏。效果还不错。但是还有一点点按钮的边界过滤不掉。
1.  晚上
    1.  洗衣服。用房东的消毒液。DONE

11:28 2018-03-07
================
golang, notes
-------------
1.  0305
    1.  sort.Slice
    2.  protobuf
    3.  函数返回函数。
2.  0307
    1.  sort.Search, bytes.Compare 练习。
    1.  看看"github.com/dgryski/go-farm"是什么.
3.  0308
    1.  skiplist。
    2.  函数作为返回值返回。
    3.  Buffer
        1.  NewBuffer()可以接受一个初始的size。
        2.  Buffer.Write()会按需增长。
4.  0309
    1.  两种情况都会返回一个函数，由于释放table的引用计数。
5.  0311
    1.  [iota](https://github.com/bjzhang/bjzhang.github.io/commit/e98b18458fd70c2e87db6e41aeed565513f09716)

10:32 2018-03-08
================
软件测试
--------
1.  计算机基础
    1.  [南华大学公开课：计算思维漫谈——感悟数字化生存的智慧](http://open.163.com/special/cuvocw/shuzihuashengcun.html)
2.  测试
    简单看了下软件测试的资源。我觉得你可以看看下面的资料1了解软件测试基本知识。然后根据你求职目标看看需要学习什么基础知识（比如学习一种编程语言，学习一种测试框架）。
    1.  可以看这个视频了解软件测试基本概念：[软件测试2小时入门](https://study.163.com/course/introduction.htm?courseId=1004794006#/courseDetail?tab=1)
    2.  这个课暂时没有开课，但是涉及的内容比较全，你可以看看目录，看看软件测试需要学什么。[软件测试方法和技术实践](https://mooc.study.163.com/course/1000002019?tid=2001355031#/info)
    3.  coursera上面的课程质量比较好，想要证书的话需要付费，否则免费。上课的同时有强制练习题保证效果。<https://www.coursera.org/learn/ruanjian-ceshi>。看了看这个难度的确高一些。不过学会了帮助也很大。

11:03 2018-03-08
================
GTD
---
1.  杂
    1.  昨天睡的晚直接导致的是今天上午效率比较低，时间节奏不好。
    1.  帮朋友看软件测试知识。"10:32 2018-03-08"
    1.  11:17-11:29 时间安排梳理。
    1.  11:29-11:47 热饭。
    1.  11:47-12:02 吃饭。
    1.  12:02-12:16 刷碗。
    1.  12:16-12:41 午睡没睡着，放松。
    1.  13:10-13:16 14:39-14:48 洗手间。
    1.  13:16-13:52 午睡。
    1.  13:54-14:07 刷牙 洗手间。
    1.  15:08-15:27 休息（没睡着）
    1.  15:27-15:51 散步，活动膝关节，脖子。
    1.  17:56 下班。
2.  公众号文章. "11:28 2018-03-08"
3.  badgerIO
    1.  12:43-13:10 看主流程。
        1.  已经看了Set, Commit.
        2.  14:08-14:39 14:48-15:08 15:53-16:17 16:58-17:41 继续看db.go
            1.  看db.go感觉还好，多看一层就晕了。
            2.  我觉得我应该重点先看memory table到SST是怎么做的？触发条件。
            3.  flush memtable终于看完了。明天先回顾下现在已经看的内容。
    2.  做实验观察mmtable到SStable和compaction的变化。

11:28 2018-03-08
================
公众号文章计划
--------------
1.  社区动态：基本的思路是蹭社区热点。内核，glibc等我熟悉的工具release时写相关的公众号。
    1.  目前眼前的是内核4.16 release notes和sgx.
2.  工作相关
    1.  kiwi
        1.  镜像打包工具比较。
    2.  ansible
        1.  Nentropy ansible部署成功后从tidb ansible学习开始写一篇公众号。
        2.  远期计划是tidb支持opensuse的补丁。
    3.  keyvalue数据库
    4.  基本数据结构和算法

09:03 2018-03-09
================
GTD
---
1.  杂
    1.  09:03-09:07 计划
    2.  09:42-09:53-10:09 转正评价。吃西红柿。发转正评价。
    3.  11:54-14:35 做饭，吃饭，散步。
    4.  15:10-15:33 睡觉
    5.  18:03-19:02 下班到家。
    6.  19:02-19:07 cloud computing笔记。
    7.  22:44 睡觉。
1.  看完tidb代码阅读第二，第三篇。
    1.  09:07-09:31 see"09:17 2018-03-09"
1.  回复群里面问的内核测试方法。本周公众号写这个。
    1.  10:15-11:02 <https://github.com/bjzhang/bjzhang.github.io/blob/master/_drafts/2018-03-09-kernel-tests.md>
1.  整理这几天的badger代码阅读。确定今天要看哪一部分。
    1.  11:08-11:54 14:39-15:10 16:07-16:40 17:01-17:11 17:20-17:56
        1.  看到自己文档的transaction部分，感觉看不懂。再重新过下transaction.go
        1.  看完transaction.go
        1.  讨论。周一加入停止compaction的开关，测试复制文件行不行。
1.  appliance summary
    1.  21:48-22:20
1.  晚上
    1.  租房的地方配置shadowsocks.
    1.  复习单词。
    1.  镜像打包总结
1.  NEXT
    1.  周六活动不参加了。保证周一公众号完成。
    1.  macbook air文件备份。
    1.  每天讨论一下下。
    1.  需要看下LSM tree的原理。
    1.  看看我的icloud是不是被关闭了
    1.  下周一个公众号如果写不出keyvalue数据库的文章。考虑把kernel-4.16 release notes写出来。
    1.  vim golang如何查找定义。
    1.  如何画类型定义关系?

09:06 2018-03-09
================
小活，杂
--------
1.  用go统计每天工作时间。
1.  又有点想写自己的职业规划。要不学学用golang画图？

09:17 2018-03-09
================
tidb源码阅读文章的阅读笔记
--------------------------
1.  [TiDB 源码阅读系列文章（三）SQL 的一生](https://mp.weixin.qq.com/s/VwslkLNYxItFY05OB1jk3Q)介绍了整个 SQL 层的执行框架。包括解析sql，生成查询计划，执行三部分
    1.  解析会生成abstract syntax tree (AST)
    2.  生成查询计划: "plan 转换成 executor"
    3.  执行: "TiDB 的执行引擎是以 Volcano 模型运行"。[下文](http://www.infoq.com/cn/articles/an-article-mastering-sql-on-hadoop-core-technology)提到"目前主要的执行引擎有如下四类：Volcano-style，Block-oriented processing，Column-at-a-time，Vectored iterator model。"

19:07 2018-03-09
================
1.  failure dectector <https://en.wikipedia.org/wiki/Failure_detector> 参考链接不错，TODO 有空看看。
    "The classes of failure detectors are distinguished by two important properties: completeness and accuracy."
2.  耶鲁大学的分布式系统课堂内容，可以参考<http://www.cs.yale.edu/homes/aspnes/classes/465/notes.pdf>
3.  grid是网格吧。
    1.  long running task. hours.
    2.  2 level scheduling intratructure.
        1.  inter
        2.  intra
3.  TODO: raft和gossip什么关系? 看起来raft或paxos和gossip场景不同。
    1.  [What is the difference between gossip and Paxos protocols?](https://www.quora.com/What-is-the-difference-between-gossip-and-Paxos-protocols)
    2.  [raft算法与paxos算法相比有什么优势，使用场景有什么差异？](https://www.zhihu.com/question/36648084)
4.  p2p
"some of the techniques used here(P2P systems) are reused and are being reused in two days generation of key value and NoSQL storage systems"
"we'll study key-value stores, such as Cassandra, Riak, uh, Voldemort from LinkedIn, and also DynamoDB from, uh, Amazon. All of these, for instance, use techniques, such as, consistent hashing, which we'll study in the Chord, uh, peer-to-peer system, uh, in this lecture series."

09:29 2018-03-10
================
GTD
---
1.  杂
    1.  8:28-9:29 起床，洗漱，做早饭（鸡蛋挂面），擦地
    2.  9:29-9:36 吃饭。
    3.  09:36-09:39 整理cloud computing笔记
    4.  09:39-09:47 账目.
    5.  09:47-09:58 刷碗，洗手间
    6.  18:12-18:31 发呆
    7.  09:47-10:09 计划
        1.  想的是上午做羊蝎子。但是10点开始学习一个小时就11点了。中午饭吃什么？可以吃昨天剩下的香菇。就是少了点。
        2.  按照现在的计划晚上7点就能完成。执行吧。后续逐步调整。
    8.  13:46-14:32 睡觉没睡着
    9.  14:32-14:55 刷碗，洗衣服，尝羊蝎子汤咸蛋，准备热一下焯水的羊蝎子汤。
    10. 20:50-20:57 记账
    11. 20:57-21:10 日记。
    12. 22:38-23:00 洗漱。
    13. 总结：
        1.  今天整体效率还可以。晚上吃饭时比较慢是因为比较累了。
        2.  badgerIO和keep健身没有做，明天提高优先级做。
2.  吃饭问题
    1.  计划
        1.  泡香菇，粉丝。做羊蝎子。
            1.  预计需要半小时到一个小时。DONE
            1.  香菇要用淀粉洗一下!!!DONE
        2.  吃饭刷碗睡觉（当时没有算晚饭时间）
            1.  预计2小时。
    2.  11:28-12:52 做午饭，泡香菇，粉丝，腐竹。做羊蝎子。
    3.  12:52-13:02 吃饭
    4.  公众号。
        1.  13:07-13:46 写做饭。这样kiwi就有充分时间修改和投稿。
        2.  21:12-22:38 中间又走神，不过今天能写完还是完成了任务。
    5.  17:34-18:12 买菜
    6.  18:32-20:33 做晚饭。吃饭。
    7.  20:33-20:50 刷碗。
3.  写完周一的公众号（镜像打包）
    1.  计划
        1.  估计最终完成需要4个小时。
        2.  两个小时写出轮廓，看看能写个多少内容。拆成几篇比较合适。
        3.  如果下午能写出自己满意的状态，问问宋宝华能不能发。
    2.  10:09-11:26 将近一个半小时写出基本可以发公众号的素材。估计整理和测试时间需要4个小时。测试和其它任务穿插。
    3.  15:00-15:33 15:40-16:16 -17:34 继续补齐缺失的内容。
        1.  17:34之前中间起来几次，我终于意识到自己身体接受继续写了。

21:28 2018-03-10
================
python3
-------
`brew upgrade python`之后提示：
```
If you need Homebrew's Python 2.7 run
  brew install python@2
```

07:49 2018-03-11
================
1.  杂
    1.  07:49-08:02 计划
        1.  总结：
            1.  昨天计划没完成的原因
                1.  公众号内容需要材料和测试截图时间不够，临时更换内容。
                2.  做饭时间比预计长。少计算一顿饭的时间。
            2.  中午总结：计划3h10‘的事情实际用了5.5h。主要是买菜，吃饭和刷碗时间少算了。
        2.  吃饭 共2h10‘
            1.  洗漱，早餐（做，吃）40'
                1.  AAR:
                    1.  没有计算刷碗的时间。和午餐合并。
                    2.  饭后会有些发呆时间。尤其是吃的比较饱的时候。
            2.  午饭。
                1.  做周一，周二的菜。周一的米饭。
                1.  吃火锅或米饭。
                1.  买菜30‘
                1.  做饭30‘
                1.  吃饭刷碗 30‘
        3.  badgerIO合并SetEntry和Delete 1h
            1.  看起来代码不复杂，关键是不知道怎么测试。
                1.  做简单keyvalue添加删除测试。
        4.  14:30出发去接大女儿。路上休息。
        5.  keep健身40分钟。
        6.  公众号 1h
            1.  完成第一部分的初稿，看有没有地方投。
            1.  下周有时间把显示器搬回来。可以适当减少keep的运动时间。
        7.  晚上如果有时间，做单词卡片。30'
        2.  TODO 定期读一读badgerIO的git commits。
        1.  能不能每天加上有一定强度的健身。膝盖需要去医院检查。
    2.  日记
        1.  09:01-09:06
    3.  09:34-09:41 刷微信
        1.  AAR 5分钟休息时不要刷微信。
    4.  11:12-11:17 为大女儿录英语
    5.  13:44-14:04 洗手间。
2.  吃饭
    1.  08:02-08:30 洗漱，做饭。
        1.  AAR：洗漱时在和人微信聊天。
    2.  08:30-08:45 吃饭。
    3.  08:45-09:01 饭后发呆
    4.  09:25-09:34 洗手间，刷碗，想分装冻的羊蝎子汤失败。
    5.  10:25-11:11 买菜，洗衣服，收衣服。
    6.  11:11-11:12 记账。
    7.  11:17-13:21 做饭，吃饭，周一饭菜，周二菜装盒。
        1.  AAR: 做饭吃饭实际用了两个小时。这次做了土豆茄子，羊蝎子汤煮了香菇和生菜，勉强算是两个菜。看起来如果希望做饭吃饭1小时，只能做简单的菜。
    8.  13:21-13:44 饭后发呆，后续需要想一想怎么改变自己的饮食结构，提高热量，少吃主食。
    9.  14:04-14:15 刷碗。
3. badgerIO DONE almost in time
    1.  09:07-09:25 合并SetEntry和Delete的公共代码。
    2.  09:43-10:13 编译测试。如果编译不过或测试有问题，写简化用例。
        1.  做的时候才想起可以用`go test`来测试。
        2.  提交时看了下`git diff`发现格式不对。用`go fmt transaction.go`格式化就没问题了。
        3.  [pull request](https://github.com/dgraph-io/badger/pull/438)
    3.  10:13-10:25 记录今日学习的iota。see"11:28 2018-03-07"5

09:16 2018-03-12
================
GTD
---
1.  杂
    1.  09:12-09:17 记账
    2.  计划 5' 11:06-11:11
        1.  k8s讲座。
        2.  badgerIO
            1.  加flag：可能要用channel。之前没有练习过。预计2h。
            2.  测试复制文件能不能用。还不知道怎么测试。可以自己灌照片的keyvalue。预计3h。
		3.	15:00-15:07 晚上计划。
    3.  吃饭
        1.  11:30-11:41 热饭。
        2.  11:41-12:24 吃饭。
        3.  12:24-12:30 饭后休息，感觉吃饭的时候多动了几下，胃不太舒服。
        4.  12:30-13:01 刷碗，洗手间。
		5.	16:11-16:30 买水果
		5.	16:30-16:47 吃水果。
    4.  13:01-13:12 看文章<https://zhuanlan.zhihu.com/p/34455548?utm_medium=social&utm_source=wechat_session&from=timeline>
	5.	13:16-14:23 睡觉
	6.	14:23-15:00 散步2000步。
	7.	cloud computing 3.3, 3.4需要总结。3.5需要重新听。
	7.	[“TiDB源代码阅读第一篇”](https://colinback.github.io/myBlogs/distributed/system/2018/01/24/TiDB%E6%BA%90%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB(1).html)
2.  k8s
    1.  09:30-10:30 讲座。
    2.  10:30-11:06 简单[整理笔记](http://aarch64.me/2018/03/k8s-learning-and-try-it/)。现在的策略是基本结构和内容写好的文章或笔记尽量发到博客，逐步整理到公众号。
3.  badgerIO
    1.  11:18-11:30 11:41-11:52 改merge SetEntry, Delete补丁.
	2.	15:15-16:11 17:00-17:15 加一个参数控制compaction。
		1.	15:26 主要是不知道怎么测试。。。
		2.	16:49-17:00 看看怎么加日志。
			1.	用fmt和log都可以，都会输出到终端。
	3.	17:15-17:51 停止compaction，看拷走文件有没有问题。
		1.	好像是可以的。
	4.	讨论
		1.	17:51-18:26
			1.	今天的知乎在看下，看<http://www.cs.utexas.edu/~vijay/papers/sosp17-pebblesdb.pdf>
			2.	明天看nentropy snapshot怎么做的。
4.	晚上
	1.	下班听完没听完的武志红心理学课。
	2.	然后听cloud computing 3.3，3.4，并总结。
	3.	吃饭
	4.	keep 10分钟。

13:12 2018-03-12
================
life in technology
------------------
嗯嗯，其实从做技术开始，这个问题一直是热点。原来工作两三年的时候身边同事朋友，都觉得做技术做到35就做不动了。现在到了35，发现当初技术做的比较好的，多数还在做技术。很多70后到了40岁出头也有不少还在做纯技术（不包括技术管理这些，售前，售后这些）。国外的程序员，我认识的40-50岁的也不少。所以我觉得至少50岁之前不用担心这个/:8-)我自己一直觉得只要喜欢肯定一直做下去。

09:30 2018-03-13
================
GTD
---
1.	杂
    1.  09:30-09:35 计划
        1.  09:35-09:54 公园五号买电，还款。DONE
        2.  09:54-10:16 王建大夫预约。约满了。北京中医医院骨科大夫预约。
        3.  badger pr。 DONE
        4.  badger补丁修改。开issue问。
        5.  计算下欠了多少运动，雾霾之后补上。DONE
        6.  5' 买空气净化器滤芯。DONE
        1.  学习nentropy。
        1.  vim global setting。
        1.  看昨天冬卯说的论文。
        1.  蚂蚁借呗还款。
    2.  杂
        1.  10:16-10:24 洗手间。
        2.  12:18-12:54 睡觉没睡着。
        3.  13:48-14:15 睡觉。
        4.  14:15-14:42 散步1300步。
        5.  报税。
        6.  5' 编辑邮件签名。
        7.  今天做事情之间休息时间有点长了。会不会是因为最近放松太少，所以不由自主降低了效率？
        8.  运动量计算。see"15:49 2018-03-13"
        9.  16:10-16:25 洗手间。
2.  吃饭
    1.  11:10-11:45 买主食，热饭
    2.  11:45-12:18 吃饭，休息5‘
3.  badgerIO
    1.  10:24-10:55 根据owner建议修改补丁。已在reviewable回复。12:54-13:00 已接受，删除自己的分支。
    2.  10:55-11:08 看badgerIO现在有没有针对文件级别复制的讨论。
        1.  搜了搜"is:filter snapshot"没有找到讨论。讨论的时候是否可以说全量备份之后增加issue 370的增量备份？
            <https://github.com/dgraph-io/badger/pull/291>
            <https://github.com/dgraph-io/badger/issues/370>
    3.  14:53-15:24 和老孙学习nentrop
        1.  先看raft论文，再看etcd的raft例子，再看etcd rawnode。
        2.  nentropy里面scanner, queue实现对replica的操作。
    4.  16:05-16:10 17:17-18:26 badgerIO开issue问全量和增量备份。
        1.  16:27-16:36 16:50-16:58 看gc对value log的影响。
            1.  什么时候触发gc？
                1.  由用户触发。api包括
                    * `DB.PurgeOlderVersions()`
                    * `DB.PurgeVersionsBelow(key, ts)`
                    * `DB.RunValueLogGC()`: 实际gc函数，如果gc正在运行，需要等gc结束。
            2.  如果停止gc会对badger有什么影响？
                1.  看起来只是会影响badger用户。
        2.  看issue 370里面的[backup engine](https://godoc.org/github.com/tecbot/gorocksdb#BackupEngine)
            1.  实际看gorocksdb文档没看懂。实际看下fgoroocksdb的代码。
            2.  看rocksdb backup
                1.  rocksdb就是基于文件复制的。文件会检查checksum。
                2.  和冬卯讨论，可以基于rocksdb的设计，在badgerIO实现同样功能。正好社区也需要这功能("help wanted")
        3.  确定停止compaction对memtable flush的影响。
        4.  下面的文字不符合上面"2"的想法，暂时没用了。
            Title: About full backup and incremental backup
            Hi, I started to try the badgerIO recently. Glad to see badger [support backup and restore](https://github.com/dgraph-io/badger/pull/292)last year. I also notice that there is an open issue about [incremental backup](https://github.com/dgraph-io/badger/issues/370). Besides above, I am wondering if there is some plan to do the full backup the underlying files(vlog and sst) and then do the incremental backup.
            There are three things need be taken into consideration:
            1.  Compaction: Considering compaction will modify the sstable. My idea is suspend the compact for a while(do the suspend the write and read), and copy all the vlog and sst then restart the compaction. After I have the full backup. It is important that we have the incremetal backup which mentioned in issue 370.
            2.  gc: In badger, GC is issued by user. When doing the full backup, user should wait for running gc.
            3.  memtable flush. If the level0 is too big. BadgerIO will suspend all the write. THis is not what I want. I suggest increase the limit when copying the raw files. Considering, there are 10G network. Copy 10G files only takes 10 second. There are not very big memtable will be written.
        5.  reply to <https://github.com/dgraph-io/badger/issues/370>
            Hi,
            Is there anyone working on this?

            After read the [gorocksdb api]( https://godoc.org/github.com/tecbot/gorocksdb#BackupEngine) and [rocksdb documents](https://github.com/facebook/rocksdb/wiki/How-to-backup-RocksDB%3F#under-the-hood). I found that it is what we need. I want to pick this task. And I will do the following in detail:
            1.  Add the api in `type BackupEnginefunc` in gorocksdb, including:
                *   `OpenBackupEngine(opts *Options, path string) (*BackupEngine, error)`
                *   `func (b *BackupEngine) Close()，func (b *BackupEngine) CreateNewBackup(db *DB) error`
                *   `func (b *BackupEngine) GetInfo() *BackupEngineInfo`
                *   `func (b *BackupEngine) RestoreDBFromLatestBackup(dbDir, ro *RestoreOptions) error`
            2.  I will investigate and discuss the implementation later. And generally speaking, I will reference the design of rocksdb.
                1.  Disabling file delete during backup. So, it will not block the compaction. Badger will delete the file after backup. The user could sync the deleted and newly added sst files in further incremental backup.
                2.  There might be some differences because of the vlog in badgerIO. I am not sure which is the better way to do it. Considering gc is triggered by user. For an initial implementation, I suggest only backup when gc exit. And a live backup will block further gc. User should check this before issuing gc. When user issue a incremental backup, copy the latest vlog and mark the deling of the old one.

            Thanks

15:00 2018-03-14
================
GTD
---
1.  杂
    1.  15:12-15:23 买水果。
1.  badgerIO
    1.  昨天我的回复manishrjain觉得这么做没意义。今天和冬卯讨论，自己做。incremental不用做。冬卯建议直接做，不看rocksdb代码，看C++是深坑。
    2.  15:26-16:22
        1.  删除文件的记录:
            1.  看compaction流程。如何记录要删除的文件。
                1.  删除文件在`runCompactDef`函数中。
                2.  `decrRefs`具体删除文件。可以在这里修改。
            2.  看gc流程。如何记录要删除的文件。
        2.  full backup: 阻塞新的compaction和gc，做full backup。
        3.  其实延迟delete和live file是连接在一起的。如果没有延迟删除，那文件都是有效的，也就不需要live file的概念。badger前面有讨论manifest里面记录文件和大小，是否也借鉴类似的思路？

09:45 2018-03-15
================
GTD
---
1.  杂
    1.  09:45-09:59 记账
    2.  9:59-10:22 远程打印孩子生字练习。
    3.  10:22-10:30 统计过去三天运动量。
    4.  计划 10:30-10:45（中间去看了孩子老师发的学习资料）
        1.  打印老师发的数学学习资料。
        2.  16:50出发 幼儿园家长会。
        3.  badgerIO修改
    5.  10:45-11:13 打印学习资料。
    6.  11:27-11:57 热饭，吃饭。Chord failure detector.
    7.  11:57-13:04 午觉（吃饭立刻睡觉，胃不太舒服）
    8.  13:10-13:53 洗手间（排队很久。。。）
    9.  go opencv. see"14:14 2018-03-15"
    9.  teamviewer传送并打印文件。
2.  badger 14:25-14:30
    1.  记录放到table里面？然后关闭文件？
    2.  vim golang
        1.  14:30-14:50 15:10-15:33 see"14:45 2018-03-15"

14:14 2018-03-15
================
opencv, gocv, TODO使用gocv支持不支持的接口并用在game helper里面
---------
[OpenCV探索之路（二十四）图像拼接和图像融合技术](https://www.cnblogs.com/skyfsm/p/7411961.html)
[Opencv中使用Surf特征实现图像配准及对透视变换矩阵H的平移修正](http://blog.csdn.net/dcrmg/article/details/52627726)
[Opencv Sift和Surf特征实现图像无缝拼接生成全景图像](http://blog.csdn.net/dcrmg/article/details/52629856)
[Opencv 使用Stitcher类图像拼接生成全景图像](http://blog.csdn.net/dcrmg/article/details/52653366)

14:45 2018-03-15
================
vim, plugin, golang
-------------------
1.  测试环境os x
2.  下载[vim-go](https://github.com/fatih/vim-go)
    1.  使用vim plugin方式安装，修改"~/.vimrc"：
        ```
        call plug#begin('~/.vim/plugged')

        " Make sure you use single quotes
        Plug 'fatih/vim-go'

        " Initialize plugin system
        call plug#end()
        ```
    2.  打开vim，执行":PlugInstall"会自动安装vim plugin中微安装的插件。例如vim-go
    3.  再在vim里面执行":GoInstallBinaries"，会安装vim-go的工具。
3.  使用，参考<https://github.com/fatih/vim-go>features部分。
    1.  ":GoDef"，跳转到定义。快捷键："Ctrl+]"
    2.  ":GoCallers", ":GoCallees"
4.  设置go guru scope
    1.  go guru默认会搜索当前文件所在目录。如果项目里面有自己的包，就需要修改这个scope
    2.  修改"~/.vimrc":
        ```
        autocmd BufRead /Users/bamvor/works/go/src/github.com/dgraph-io/badger/options/*.go
            \ silent :GoGuruScope github.com/dgraph-io/badger

        autocmd BufRead /Users/bamvor/works/go/src/github.com/dgraph-io/badger/protos/*.go
            \ silent :GoGuruScope github.com/dgraph-io/badger

        autocmd BufRead /Users/bamvor/works/go/src/github.com/dgraph-io/badger/skl/*.go
            \ silent :GoGuruScope github.com/dgraph-io/badger

        autocmd BufRead /Users/bamvor/works/go/src/github.com/dgraph-io/badger/table/*.go
            \ silent :GoGuruScope github.com/dgraph-io/badger

        autocmd BufRead /Users/bamvor/works/go/src/github.com/dgraph-io/badger/y/*.go
            \ silent :GoGuruScope github.com/dgraph-io/badger
        ```
    3.  vim中通过":GoGuruScope"，查看当前的scope。例如我打开了"/Users/bamvor/works/go/src/github.com/dgraph-io/badger/table/table.go"，如果autocmd正确执行，看到的go guru scope应该是:
        "vim-go: current guru scope: github.com/dgraph-io/badger"

09:38 2018-03-16
================
GTD
---
1.  杂
    1.  09:40-09:42 计划
        1.  虽然觉得状态不好，也不能晃悠。
        2.  完成badgerIO disable delete的修改。
        3.  09:42-09:50 五年日记。
        4.  昨天家长会笔记整理。
        5.  kiwi文章整理。
    2.  11:53-13:35 吃麻辣烫。发知乎。刷手机。
    3.  13:35-14:15 午睡。
    4.  14:20-14:50 洗手间。时间有点长。。。
2.  badgerIO
    1.  09:58-10:04 10:15-10:36 用最笨的方法加delete标志，测试删除table时代码对不对。
        1.  文件还是还被删除了。
            1.  10:47-11:19 删除原因是加载manifest时会删除manifest里面不存在的文件。
        3.  11:19-11:53 和陈积讨论删除sst和gc的流程。
            1.  TODO 我看下gc的流程。现在对于channel不太理解。之前觉得channel会导致异步，其实不会。go routine才会。
    1.  测试不删除文件。manifest能不能读到正确的文件。
        1.  需要理解manifest是怎么加载的。
            1.  看了看代码是可以的。

09:33 2018-03-17
================
GTD
---
1.  09:33-09:38 计划
    1.  吃饭
        1.  DONE 做带鱼2h
        2.  DONE 肉末豆腐 30'
        3.  DONE 吃饭刷碗1.5h
    2.  公众号
        1.  幼儿园家长会整理。2h
        2.  kiwi 1h
    3.  09:38-09:44 golang学习笔记。30' DONE
    4.  杂
        1.  DONE 洗衣粉擦地。
        2.  肤膏药。
        3.  DONE 洗澡
        4.  keep健身。
        5.  换床单。感觉没时间。
    5.  总结：
        1.  计划外的事情
            1.  洗澡40'
            2.  做饭多用了一个小时。
            3.  买菜40'
2.  杂
    1.  10:54-11:26 洗手间。刷马桶。
    2.  13:20-14:00 午睡（被楼上吵醒）
    3.  14:33-15:13 洗澡。
    4.  15:13-15:44 洗衣服，擦地，换垃圾袋。
    5.  15:44-15:51 下周支出计划。
    6.  15:51-15:54 剪指甲。
    7.  20:15-20:38 擦地，洗拖鞋。
    8.  20:40-20:52 刷牙
    9.  21:13- 约10' 录音。
3.  吃饭
    1.  09:46-10:44 下楼买姜。
        1.  门口超市没有。时间比预计长。
    2.  10:44-10:54 吃稻香村点心。幼儿园家长会图片整理。
    3.  午饭
        1.  11:26-11:46 煮面条。
        2.  11:46-12:36 吃饭，休息（看了一集琅琊榜）。
        3.  12:36-12:52 刷厕所，刷碗。
        4.  12:54-13:06 刷牙。
    4.  13:07-13:17 超市购物记账。
    5.  晚饭
        1.  16:01-18:53 做饭。
        2.  18:58-19:40 吃饭。
        3.  19:55-20:15 刷碗。

07:35 2018-03-18
================
GTD
1.  杂
    1.  07:25 起床
    2.  08:55-09:07 10:40-10:57 日记
    3.  10:14-10:38 贴膏药
    4.  13:16-13:39 下周支出计划。
    5.  14:00-14:44 午睡。
    6.  15:05-16:36 找照片。
    7.  16:36-16:44 揭膏药，洗干净。
    8.  18:13-18:19 孩子英语错误纠正
    9.  19:09-19:29 看电视剧。
    10. 19:29-19:55 发呆。日记。
    11. 20:40-20:50 换床品。
2.  饭
    1.  07:38-08:20 洗漱，刷马桶，做饭。
    2.  08:20-08:36 吃饭。
    3.  09:08-10:07 10:07-10:14 买大白菜，扁豆，榄菜，买鸡蛋10个。记账。
    4.  10:57-11:48 做饭。做一个菜还是需要提高速度，30分钟比较好。
    5.  11:48-12:36 吃饭。一边吃饭一边看电视剧，节奏慢了很多。并不是说不能放松，只是需要有计划。
    6.  12:36-12:56 饭后看电视剧。
    7.  12:56-13:13 刷碗。
    8.  14:44-14:59 醒觉，刷牙。
    9.  18:22-18:31 晚上热饭，吃一块带鱼和豆腐。把周一的米饭做出来。
    10. 18:31-18:47 晚上吃饭。
    11. 18:47-18:59 饭后休息。
    12. 18:59-19:09 刷碗。
3.  08:37-08:55 计划
    1.  DONE 肤膏药 10' 实际 24'+8' 没有想象那么好贴，另外计划贴一条腿，实际贴了两条腿。
    2.  DONE 买菜 40' 实际68' 主要是超市人多，下次看看是不是错峰去买，或者看看门口的店人会不会少一些。
    3.  DONE 公众号: 幼儿园家长会整理。1h
    4.  DONE 做饭（做出午饭和晚饭的菜） 1h 没算两顿吃饭时间。
    5.  公众号: 幼儿园家长会整理。1h
    6.  DONE 午睡 1h-2h
    7.  keep健身。40'
    8.  业余（非必须完成）
        1.  图片差值做相册。
        2.  计划5月份安排。5.1, 5.18
    9.  公众号: kiwi 1h
4.  公众号
    1.  幼儿园家长会整理。
        1.  17:06-17:32 17:38-18:03 半小时时间快速整理。计划1小时完成初稿。
            1.  一个小时快马加鞭，感觉至少还需要30-60分钟完成最基础的初稿。此外，还有些需要查资料。
            2.  19:55-20:28 完成第一个版本。
        2.  20:29-20:40 等待上传。
        3.  20:50-21:00 看上传的效果。

09:30 2018-03-19
================
GTD
---
1.  09:31-09:33 计划
    1.  日记。30'
    2.  发幼儿园公众号。1h
    3.  badgerIO暂停删除文件并测试。3h
    4.  今天或明天考过cloud computing week3 2h
    5.  每天都要写一部分公众号素材，要不然周末抓瞎。30'
    6.  晚上和大女儿一起看照片。30'
2.  杂
    1.  09:43-09:50 09:50-10:08 日记
    2.  10:10-10:26 13:45-13:50 记账
    3.  10:26-10:34 贴膏药，洗手间。
    4.  12:20-13:09 午睡。
    5.  14:08-14:49 散步2000步，洗手间。
    6.  15:46-16:15 散步1600步。
3.  badgerIO
    1.  10‘ 和老积讨论。老积修改。我看下badgerIO单独怎么测试。
    2.  15:28-15:46 16:36-xxx 看badger memtable flush到sst的流程，为什么我的sst不是一直增加。
        1.  badger有没有memtable？
            1.  flushMemtable
        2.  replay是什么意思不太理解。
        3.  head看起来是flushmemtable时设置的。
        4.  各种走神。
4.  公众号
    1.  10:59-11:25 公众号文章。
    2.  10' 13:51-14:08 中午发出。
5.  吃饭
    1.  11:25-11:52 热饭，吃饭。
    2.  12:05-12:20 刷碗，洗手间，洗眼镜。

