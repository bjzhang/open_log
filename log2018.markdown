
09:41 2018-01-12
----------------
TODO
1.  children english dictionary
    1. https://www.oxforddictionaries.com/schools
2.  nas
3.  deploy tools.

10:36 2018-01-14
----------------
GTD
---
1.  plan
    1.  跑动ceph镜像构建部署全流程。
    2.  大姐路由器。
    3.  和凡一一起买字典？

00:04 2018-01-27
----------------
hikey960, Linux
---------------
1.  烧写debian
    第一次烧写没成功，似乎是因为hikey_idt和config以及二进制没有在同一个目录，也许hikey_idt去了上一个目录找二进制。
    我烧写时候，大约几秒钟会完成。如果时间太长可能是是有异常。尤其是ttyUSB0长期不动的时候。
    todo：strace hikey_idt，看是否和我怀疑的一样。
    https://github.com/96boards-hikey/tools-images-hikey960.git
    tools-images-hikey960/install-prebuilt-uefi/README.md
    tools-images-hikey960/install-prebuilt-uefi/hikey960-efi-prebuilt.sh

    ./hikey_idt -c config


    echo "Sleeping till device resets... zzz"

    打印上面内容，另一篇文档写系统重起时，有10s的timeout，按f后就可以用fastboot继续烧写。
    todo：确定不按f是否可以用。

    fastboot flash ptable prm_ptable.img
    fastboot flash xloader sec_xloader.img
    fastboot flash fastboot l-loader.bin
    fastboot flash fip fip.bin

烧写boot uefi img和desktop img。
fastboot flash boot boot-0.0+AUTOINC+ba45819943-ea12986b87-r0-hikey960-20180126071619-127.uefi.img
fastboot flash system rpb-desktop-image-lava-hikey960-20180126071619-127.rootfs.img
启动说找不到rootfs，看到grub cfg的root在sdd10，不知道是不是写错了。
rpb-console-image-lava-hikey960-20180126071619-127.rootfs.img 成功。


    [自己改写ptable，生成ptable.img](https://github.com/96boards-hikey/partition-table-tool/blob/master/efipartition.c)


    <https://github.com/96boards-hikey/tools-images-hikey960>

    <http://snapshots.linaro.org/reference-platform/embedded/master/hikey960/latest/rpb/>

2.  烧写后lspci看不到任何设备。
    1.  找资料
        1.  [HiKey960のM.2コネクタがSSDを認識するようになった](http://raphine.hatenablog.com/entry/2017/12/29/031501)
        2.  [HiKey960のM.2コネクタはSSDを認識するのだろうか＜その１＞](http://raphine.hatenablog.com/entry/2018/01/10/205559)
        3.  [HiKey960上でM.2 SSDの性能をゆるーく測定した。](http://raphine.hatenablog.com/entry/2018/01/10/210640)
    2.  根据资料1.1，找到[linaro 庄皓坚]的commit(https://github.com/ARM-software/arm-trusted-firmware/pull/1216/commits)，看下主线的git日志，已经合入了。从[hikey960-efi-prebuilt.sh](https://github.com/96boards-hikey/tools-images-hikey960/blob/master/install-prebuilt-uefi/hikey960-efi-prebuilt.sh)找到日构建的连接，目前最新版本是[51](http://builds.96boards.org/snapshots/reference-platform/components/uefi-staging/51/hikey960/release/)。为了简单也可以每次看latest目录。

3.  (23:00 2018-02-07)
    1.  自己编译了内核仍然不行。有点怀疑是uefi问题。
        1.  `dmesg |grep pci -i`:
            ```
            root@hikey960:~# dmesg |grep pci -i
            [    0.000000]     PCI I/O : 0xffff7dfffee00000 - 0xffff7dffffe00000   (    16 MB)
            [    0.293605] PCI: CLS 0 bytes, default 128
            [    0.401360] ehci-pci: EHCI PCI platform driver
            [    0.401619] ohci-pci: OHCI PCI platform driver
            [    0.691484] tcpci_timer_init : init OK
            [    0.768787] [E/hisi_pd] tcpci_disable_vbus_control: !!!++++++++
            ```
        2.  加打印：
            ```
            root@hikey960:~# dmesg | grep pci -i
            [    0.000000]     PCI I/O : 0xffff7dfffee00000 - 0xffff7dffffe00000   (    16 MB)
            [    0.293994] PCI: CLS 0 bytes, default 128
            [    0.313790] kirin-pcie f4000000.pcie: kirin_pcie_probe start
            [    0.401700] ehci-pci: EHCI PCI platform driver
            [    0.401960] ohci-pci: OHCI PCI platform driver
            [    0.714180] tcpci_timer_init : init OK
            [    0.789097] [E/hisi_pd] tcpci_disable_vbus_control: !!!++++++++
            ```

09:41 2018-02-03
----------------
GTD
---
1.  7:30醒，没睡着。8:05起床，做鸡蛋羹，洗漱，吃早餐 -9:05
2.  9:06-9:36 下楼散步，本来想跑步，觉得膝盖不是很舒服，取消。
3.  9:36-10:10 回家，写GTD。整理本周支出。感觉困。
4.  10:10-10:58 keep。膝关节，俯卧撑。
5.  10:59-11:06 收衣服，洗衣服
6.  11:06-16:44 午饭，羊蝎子准备，泡点香菇。吃饭。台式机升级完成，配置proxy，cow。准备晚餐。
7.  16:44-17:44 睡觉30‘，刷牙，合并open_log。
8.  17:45- 羊蝎子调味。
9.  hikey960 20'

09:44 2018-02-04
----------------
GTD
---
1.  8:00-9:46 起床。hikey960资料。洗漱。吃干拌面。
2.  9:45-10:05 洗碗，休息10’。
3.  10:05-11:41 饭后散步，跑前热身，分阶段燃脂跑（膝盖不舒服，基本没有快跑），跑后拉伸。
3.  11:41-13:20 做午饭（高压锅做香菇鸡腿，蒸米饭），准备早餐（菠菜鸡蛋全麦饼），吃麻酱，蜂蜜。
4.  13:20- 等待饭菜熟。吃饭。睡觉（约一个小时）
5.  16:27-17:13 电饭锅做米饭，擦厨房地，擦屋里的地。
6.  17:13-17:43 聊天，买蟑螂药。
7.  17:43-18:14 看朋友圈，看17年就业去向。
8.  18:14-18:49 热菜。香菇鸡腿汤饭。
9.  18:49-19:06 吃饭。
4.  wish list
    1.  健身。（周六周日完成，）
    1.  hikey960 NAS性能测试。
        1.  板子下周可能要还。最好周末有结果。
        2.  m.2认不出来。uefi, kernel.
        3.  性能测试。
            1.  m.2
            2.  wlan.
            3.  1000M usb lan.
    1.  读英语。
        1.  看下复习所有不会的题目需要多长时间。
        2.  看托业对应的章节。
    3.  mark邮件?
    4.  公众号。30'
    5.  读论文，看分布式课程。
    6.  准备羊蝎子火锅（状态不好的时候做）
        1.  炖羊蝎子。
        2.  摘菜。

13:21 2018-02-03
----------------
Software skill, distribution, opensuse
--------------------------------------
[libreoffice](http://download.opensuse.org/repositories/LibreOffice:/5.4/openSUSE_Leap_42.3/LibreOffice:5.4.repo)
[packman](http://mirrors.hust.edu.cn/packman/suse/openSUSE_Leap_42.3/)

[浏览器插件](https://opensuse-guide.ustclug.org/browserplugins.php>
`zypper addrepo -f http://packman.inode.at/suse/openSUSE_Leap_42.3/ packman`
`zypper install freshplayerplugin`
`zypper install xine-browser-plugin`
[Microsoft Silverlight](http://software.opensuse.org/package/pipelight)未安装。

[多媒体解码器](https://opensuse-guide.ustclug.org/codecs.php)
`zypper addrepo -f http://opensuse-guide.org/repo/openSUSE_Leap_42.3/ dvd`
`zypper install ffmpeg lame gstreamer-plugins-bad gstreamer-plugins-ugly gstreamer-plugins-ugly-orig-addon gstreamer-plugins-libav libdvdcss2`
执行下面命令切换所有相关软件包到packman。
`zypper dup --from http://packman.inode.at/suse/openSUSE_Leap_42.3/`

19:35 2018-02-05
----------------
ref<https://github.com/shadowsocks/shadowsocks/issues/646>
```
ansible@localhost:~/ss> sudo pip install -U git+https://github.com/shadowsocks/shadowsocks.git@2.9.1
Collecting git+https://github.com/shadowsocks/shadowsocks.git@2.9.1
  Cloning https://github.com/shadowsocks/shadowsocks.git (to 2.9.1) to /tmp/pip-usy75n86-build
Installing collected packages: shadowsocks
  Found existing installation: shadowsocks 2.8.2
    Uninstalling shadowsocks-2.8.2:
      Successfully uninstalled shadowsocks-2.8.2
  Running setup.py install for shadowsocks ... done
Successfully installed shadowsocks-2.9.1
```

14:10 2018-02-09
----------------
资源, web url, 链接
-------------------
1,  nfs test
    1.  <https://stackoverflow.com/questions/21565865/filesystem-test-suites/25940371#25940371>
    2.  <https://fedoraproject.org/wiki/Category:NFS_Test_Cases>
    3.  nfs基本功能测试看起来用ltp nfs和xfstest就行了。
2.  程序设计
    1.  golang
        1.  代码阅读: <https://sourcegraph.com/github.com/dgraph-io/badger/-/blob/db.go#L166:6$references>
        2.  golang，分布式博客：<http://www.zenlife.tk/>
        3.  golang学习: <https://gophercises.com>
        4.  go算法<https://www.calhoun.io/lets-learn-algorithms/>
        5.  <https://www.goin5minutes.com/>
    3.  算法
        1.  斯坦福的看起来不错：<https://www.coursera.org/specializations/algorithms>
    3.  搜索工具
        1.  [ripgrep](https://github.com/BurntSushi/ripgrep)
    4.  profiling
        1.  bpf
            1.  看golang代码时偶尔看到的，用go做的bcc binding。iovisor时linux基金会合作项目似乎提供了内核中IO的调试能力。 <https://github.com/iovisor/gobpf>, <https://www.iovisor.org/>
3.  容器
    1.  海航k8s文档：<https://jiulongzaitian.gitbooks.io/kubernetes/content//>
4.  simulator, emulator
    1.  [The gem5 Simulator](http://www.gem5.org/Main_Page)
        "The gem5 simulator is a modular platform for computer-system architecture research, encompassing system-level architecture as well as processor microarchitecture."
5.  database
    1.  TiDB
        1.  性能测试：
            <https://github.com/pingcap/tidb-bench/tree/master/tpcc>, <https://github.com/pingcap/docs-cn/blob/master/benchmark/sysbench.md>
6.  测试
    1.  手机测试，移动测试(来源: 工程狮群2017)
        1.  [优测](http://utest.21kunpeng.com/)
        2.  [WeTest](http://wetest.qq.com/)
        3.  [Testin](https://www.testin.cn/): 嘿嘿: "之前我咨询的时候，testin真机调试是¥150一个小时"
        4.  [Testbirds](https://www.testbirds.com/)
7.  前端
    1.  一个不错的前端模块，为了找桌面版的keep找到的。<http://wodewone.github.io/>
8.  一致性协议
    1.  raft
        1.  <https://raft.github.io/>
9.  network
    1.  OVS: <http://medoc.readthedocs.io/en/latest/docs/ovs/sharing/ovs.html>

21:55 2018-02-10
----------------
资源
----
1.  cubietruck
    ```
    2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000
        link/ether 02:53:04:41:84:79 brd ff:ff:ff:ff:ff:ff
    3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
        link/ether 00:22:f4:fb:55:be brd ff:ff:ff:ff:ff:ff
    ```

22:50 2018-02-10
----------------
internet sharing
----------------
```
yast2 firewall interfaces add interface=eth1 zone=internal
yast2 firewall interfaces add interface=wlan0 zone=external
yast2 firewall masquerade enable
```

15:13 2018-02-14
----------------
GTD
---
1.  游戏：勇者斗恶龙6。14:33-15:05 18:21-19:18
2.  杂：
    1.  日记：15:13-15:17
    2.  计划. 15:20-15:23 刚写完计划就觉得困了。
    3.  睡觉。15:30-16:00
    4.  keep. 16:00-16:27
    5.  做晚饭，整理原来做的菜，记录最近两天的食谱。16:30-17:34
    6.  吃饭，洗完：17:47-18:21
    7.  洗漱. 19:36-19:56
    8.  打电话，看readhub，发呆。19:56-20:14
3.  技术学习计划
    1.  Linaro的akashi联系我，说他在看我之前做的cont page hint。这个事情确实没事做，果断放弃了。
    2.  有个想法把每次以时间为单位记录的内容都放在badgerIO里面。从evernote和git提取并合并信息。重点是1和2.
        1.  go语言学习。
        2.  keyvalue数据库学习: [badgerIO](https://blog.dgraph.io/post/badger/)。20:14-20:49
            1.  [log structured merge (LSM)](https://en.wikipedia.org/wiki/Log-structured_merge-tree)
            2.  badger IO performance
                ```
                Based on benchmarks, Badger is at least 3.5x faster than RocksDB when doing random reads. For value sizes between 128B to 16KB, data loading is 0.86x - 14x faster compared to RocksDB, with Badger gaining significant ground as value size increases. On the flip side, Badger is currently slower for range key-value iteration, but that has a lot of room for optimization.
                ```
            3.  rocksDB用C++写的，使用Cgo转换会有潜在的问题。但是为什么TiKV rust调用C++没问题呢？语言的差异么？
            4.  LSM会有读放大和写放大。Badger使用LSM保存Key，value log保存value。
            5.  Guiding principles
                *	Write it purely in Go language.
                *	Use the latest research to build the fastest key-value store.
                *	Keep it simple, stupid.
                *	SSD-centric design.
            6.  badger不把key value在一起保存。只是把(value log中)value的指针和key放在一起。
            7.  performance: Range iteration latency慢的比较多，文章认为设计上badger会比rocksdb慢一点，但不应该这么多。需要进一步调查。
            8.  [benchmark](https://github.com/dgraph-io/badger-bench.git)
                1.  TODO: 参考badgerIO benchmark写最简单的go代码get, set, iteration.
        3.  github和evernote api学习。
4.  消化后看golang或keyvalue数据库。
    1.  golang 19:19-19:36
4.  春节后计划
    1.  Linaro的板子春节还。
    2.  问笔记本报销什么时候下来。

19:25 2018-02-14
----------------
<https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/04.2.md>
```
当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。

（大写字母可以使用任何 Unicode 编码的字符，比如希腊文，不仅仅是 ASCII 码中的大写字母）。
```

08:08 2018-02-15
----------------
GTD
---
1.  杂
    1.  7:53-8:39 起床，看手机，短信，洗漱，算账算不清
    2.  8:39-8:49 做早餐。
    3.  8:49-8:58 卫生间
    4.  8:58-9:33 早饭
    5.  9:33-9:45 刷碗。
    6.  超市 11:50-12:40
    7.  做饭. 12:43-13:04
    8.  午睡 13:50-14:20
2.  游戏，勇者斗恶龙6 10:03-11:40 没想到玩儿这么久。
    1.  11:45-11:50 游戏笔记
    2.  14:43 游戏
    2.  TODO整理目前的截图。

10:16 2018-02-21
----------------
GTD
---
1.  杂
    1.  昨天7点多困了，躺在床上玩儿游戏。今天上午觉得头沉。

11:49 2018-02-22
----------------
GTD
---
1.  今日总结
    1.  工作时间分析keyvalue数据库学习时用在竟品的时间有点长。这次为了学习还是围绕golang为主。

2.  golang key-value
    1.  计划 13:56-15:55
        1.  使用golang读取markdown笔记，并按一级标题分割
            1.  golang markdown parser还是自己读取？
            2.  现有文件对markdown使用是否需要调整？时间和关键字用不同标题级别比较好。
        2.  golang读取evernote笔记。
            1.  看到了evernote api可以根据GUID读取笔记内容，也看到了如何添加笔记。但是没看到如何列出指定时间的笔记。
            2.  evernote gosdk是使用facebook的thrift代码生产工具生产的。暂时还不会用。
            3.  感觉evernote api估计需要更多时间搞定，优先级降低一些。
            4.  使用其它笔记软件？之前觉得evernote不方便的地方一个是Linux命令行下没有适合的工具。在一个就是--等很多符号做自动合并为中文符号，而且没法控制。
        3.  二者都写入badgerIO数据库，并显示。
        4.  调研竟品。
            1.  <https://www.integromat.com/>类似原来的IFTTT，可以提供从github gist到evernote的功能。当gist更新时，建立新的evernote笔记。免费版本15分钟同步一次，感觉实时性不太好。
            2.  有道笔记markdown到hexo博客，使用模拟登录方式：https://github.com/gosongs/ynote2hexo/blob/master/start.py
    2.  badgerIO读写key value。15:56-16:07 16:30-17:18

3.  golang game helper: ocr.
    1.  晚上试试ocr方案是否可行。

4.  macbook air重装windows。

17:16 2018-02-22
----------------
golang
------
1.  type File, type Reader
    1.  开始不理解为什么os.Open打开的文件可以丢给Scanner，明明要求是Reader才可以。后来看了<https://medium.com/@matryer/golang-advent-calendar-day-seventeen-io-reader-in-depth-6f744bb4320b>才明白，原因是File实现了Read方法。

09:12 2018-02-23
================
GTD
---
1.  今日总结
    1.  看论文的时候看一部分整理一部分笔记感觉效果挺好的，后面继续坚持。
2.  最近看bigtable和badgerIO的论文，分别出自OSDI和FAST，后面要关注这两个会议。
    1.  TODO查会议时间。
    2.  DONE 打印论文。
3.  badgerIO
    1.  重新过了下trello的任务。
        1.  rocksdb的wiki内容很丰富，可以作为参考。
        2.  <https://github.com/dgraph-io/badger>里面的四篇blog目前看了第一篇。
    1.  看完levelDB文档 10:22-10:39
        1.  levelDB文档只是简单过了下。后续对照badgerIO看。
            1.  TODO: levelDB和huge tlb的关系。
    2.  开始看fast16-papers-lu.pdf
        1.  15:32-16:13 看完第二节。16:15-16:27 整理笔记. ref<bjzhang.github.io/_drafts/2018-02-26-WiscKey-key-value-store.md>
    3.  NEXT: 工作日志可以保存。
4.  杂
    1.  用python写自动插入图片的脚本。看看半个小时能不能写完。13:53
        1.  13:53-14:34 原定功能写完了。想增加一个图片前面的文字，需要再看下正则表达式。
        2.  14:34-14:54 markdown文件已上传。<http://aarch64.me/2018/02/how-to-transfer-file-through-putty/>
        3.  14:54-15:13 整理脚本。
5.  DQ6
    1.  识别图中对话框中的文字。
        1.  根据昨天python的./detect_shapes.py，写了go代码调用这个脚本并且裁出这个矩形：
            ```
            rectangle := try_to_get_main_dialog()
            crop(rectangle)
            ```
            使用`tesseract result.png stdout -l chi_sim --psm 12`时多数情况效果不错，个别2-3场景识别的不好。
        2.  我继续考虑，即使有了都不错的结果。如果知道我要按哪里呢？还是需要提前记录位置。添加每个场景还是比较复杂。后来想了想之前的材料，可以通过[【OCR技术系列之二】文字定位与切割](http://www.cnblogs.com/skyfsm/p/8029668.html)，做文字切割，得到文字区域（给出文字大小，目前游戏中只有一种字体），然后识别。这样就可以根据识别的文字按键了。如果效果不好（误把图片识别为文字），可以参考<https://stackoverflow.com/a/34262838/5230736>的opencv库识别是否可能为文字。后者略有复杂，感觉对我太挑战了。
    2.  NEXT: 可以正确退出战斗。
        1.  其实根据今天的结果，已经可以处理这个场景了。明天先加入这个功能。

09:51 2018-02-24
================
GTD
---
1.  杂
    1.  早晨起来发现所有vpn都不能用了。
    2.  自动化vpn部署脚本。
        1.  今天的目标是手工执行所有适合脚本执行的命令。时间半个小时。没完成的话穿插做。10:10-11:15
            1.  实际用了1个小时完成了可以ssh到vm的文档。
        2.  personal api key: 46d6376a0d764b311e83c68aea114a62da03471f030c3b684c111bf3951c3075
        3.  <bjzhang.github.io/_posts/2018/2018-02-24-linode-cli.md> <http://aarch64.me/2018/02/linode-cli/>
        4.  ips可以通过api得到<https://developers.linode.com/v4/reference/linode#ips>。将来可用golang写一个客户端
            1.  很奇怪，通过linode-cli show xxx | grep ips 得不到结果
        5.  linode可以保存images，也可以写SlackScript，可以把部署shadowsocks和kcp tunnel都写在脚本里面。
    3.  计划 11:19-11:23
    4.  记账，吃饭，刷碗，卫生间。11:23-12:35
    5.  午睡 12:40-13:16
    6.  刷牙，散步1000不。13:16-13:42
    7.  日记。14:40-14:43
2.  badgerIO
    1.  fast16-papers-lu.pdf
        1.  看完一遍 13:52-14:31 看的时候不断走神。
        2.  NEXT: 整理笔记。
        3.  NEXT: 和冬卯讨论
        4.  把技术日志保存在BadgerIO里面。14:54-16:01 16:13-
            1.  DONE: readline from file
            2.  DONE 从命令行读取文件。
            3.  DONE: 把文件缓存
                1.  16:01 已经可以匹配到key。
            4.  DONE: 转为byte写入badgerIO。
        5.  golang需要尽快系统学习，感觉现在仅仅是当c语言用。
3.  DQ6
    1.  DONE 识别战斗退出和全恢复什么也没发生的场景。
    2.  积累博客素材。
4.  NEXT
    1.  看冬卯今天发的材料和视频<https://talks.golang.org/2012/concurrency.slide>

09:21 2018-02-26
================
GTD
---
1.  杂
    1.  10’ 发公众号。
        1.  本来就是点几下鼠标点事情，转发朋友圈之前还是有些犹豫，觉得技术含量不高的感觉。
    2.  计划 09:34-09:37
    3.  做饭，吃饭，休息，明天早餐. 11:21-14:19
    4.  记账。14:19-14:38
    5.  睡觉 16:06-16:23
    6.  感觉现在列的action item又有点多了。这样很难做完。有些信息收集要放到笔记里面，不要直接放到action item中。
2.  NEXT: 通过bmc安装部署。截图便于后续opencv分析。
    1.  尝试连接bmc
        1.  配置ip后网络断了。14:39-14:49 16:23-16:39. ref"16:37 2018-02-26"
        2.  网络不通 15:41-15:47
3.  badgerIO
    1.  golang:
        1.  看冬卯今天发的材料和视频<https://talks.golang.org/2012/concurrency.slide> 09:38-10:03 听到21:45听困了。14:49-15:25 看完了。
            1.  Concurrecny is not parallelism.
            2.  有类似golang concurrency的特性的语言：Occam, Erlang...
            3.  "Rough analogy: writing to a file by name (process, Erlang) vs. writing to a file descriptor (channel, Go)."
            4.  go statement: run but not make the caller wait.
            5.  channel: do not communicate with share memories, use channels instead.
                1.  "func boring(msg string) <-chan string { // Returns receive-only channel of strings."
            6.  buffer channel like mailbox in Erlang.
    1.  fast16-papers-lu.pdf
        1.  NEXT: 整理笔记。10:05-10:41 15:59-16:06
            1.  ref <bjzhang.github.io/_drafts/2018-02-26-WiscKey-key-value-store.md>
            2.  下午一看论文也是困，郁闷。
4.  DQ6
    1.  整理思路，写公众号素材。
    2.  NEXT: 在game helper里面使用channel。
5.  Nentropy ansible部署。<https://github.com/journeymidnight/nentropy>
    1.  学习Nentropy如何使用。10'

16:37 2018-02-26
================
software skill, windows, network, add ip address
------------------------------------------------
1.  <https://www.howtogeek.com/51741/how-to-quickly-add-multiple-ip-addresses-to-windows-servers/>
    `netsh interface ipv4 add address “Local Area Connection” 192.168.1.2 255.255.255.0`
2.  <https://superuser.com/questions/786345/why-do-i-get-error-the-filename-directory-name-or-volume-label-syntax-is-inco>
    注意上面的interface名字需要是从`netsh interface show interface`得到的。

09:11 2018-02-27
================
GTD
---
1.  杂
    1.  计划 09:11-09:14
    2.  梳理任务安排。
    3.  刷碗. -09:46(5')
    4.  睡觉。12:00-12:39
    5.  吃饭 13:35-14:13
    6.  请假 14:17-14:25
    7.  云平台工时填写培训。20'
2.  通过bmc安装部署。截图便于后续opencv分析。
    1.  第一次安装，截图。09:19-09:37 09:46-11:57 12:42-13:35
        1.  DONE bmc是192.168.70.103/104/105, 浏览器打开，admin/admin
            1.  安装中。
            2.  执行dracut -f，检查uefi启动菜单。
    2.  同步测试下之前矩形分析和文字识别的代码。
        1.  第一次截图是直接抓了感兴趣的区域，这对于写文档很方便，但是对于全屏文字识别反而是越俎代庖了。
        2.  图片整理。14:27-15:11
3.  badgerIO
    1.  fast16-papers-lu.pdf
        1.  整理笔记。
            1.  ref <bjzhang.github.io/_drafts/2018-02-26-WiscKey-key-value-store.md>
4.  computer vision 15:15-16:18
    1.  <https://github.com/opencv/opencv_contrib/blob/master/modules/text/samples/textdetection.py>把最小区域调小后，白色背景深色字体的情况效果很好。
        ```
        -  er1 = cv.text.createERFilterNM1(erc1,16,0.00015,0.13,0.2,True,0.1)
        +  er1 = cv.text.createERFilterNM1(erc1,16,0.00001,0.13,0.2,True,0.1)
        ```
    2.  有明显区域的看看能不能通过区域监测划分出小区域。
        1.  试了试，对于大的色块并且不是完全封闭的区域（因为有标题栏）基本认不出区域。

08:46 2018-02-28
================
GTD
---
1.  杂
    1.  休年假一天。
    1.  计划 8:46-08:54
    1.  今天的定位是文档整理，思路梳理。
    1.  微信群讨论。09:50-10:03
1.  game helper目前进度整理，思路梳理。
    1.  思路梳理 08:54-09:50 下午也用了2h整理。发现其实整理的是图片，并不是思路。感觉自己有点做的太细迷失了方向。

16:37 2018-02-28
================
全年计划
--------
不要死守计划，遇到问题及时调整。
1.  技术
    1.  完成coursera cloud computing 两门课。
    2.  熟悉golang语言，编写独立golang文本识别和界面控制自动化引擎。
    3.  理解分布式存储基础知识，写出简单可用的分布式keyvalue数据库。
2.  身体
    1.  保证睡眠
    2.  每天两万步或keep健身40分钟，或两者的结合。
    3.  减脂到体重65公斤。

09:13 2018-03-01
================
GTD
---
1.  杂
    1.  计划 09:17-09:18
        1.  每天定的计划都完不成。
    2.  为冬卯简介SGX。09:18-09:26
    3	English
        1.  nesscssitate.
    4.  午睡 12:30-13:15
    5.  刷牙 13:25-13:43
    6.  记账。13:43-13:55
1.  badgerIO
    1.  fast16-papers-lu.pdf
        1.  09:28-10:02
        2.  和冬卯讨论:
            1.  说对于传统数据库，1k value已经很大了。
            2.  levelDB文档要认真看。
    1.  有空的话看看如何在keyvalue数据库中保存信息。
        1.  和冬卯简单讨论，冬卯说最简单的办法是cow_col作为key，value存到value里面。
        1.  和冬卯讨论
            1.  一看论文就困。不知道要讨论啥。
2.  Nentropy ansible部署。<https://github.com/journeymidnight/nentropy>
    1.  脚本可以在多节点上跑通。10:30-11:08
        1.  ceph
            1.  <http://docs.ceph.com/docs/kraken/man/8/ceph-osd/>
        1.  pg没有建立成功。初步怀疑选错了网卡，因为日志里面用的是我169网段的网卡。虽然自己机器可以ping通。不知道对协议有没有影响。
        1.  15:52-16:10 关了vpn就可以了。现在ip地址拿的也是10.71.84.61，不是169网段的地址了。
        1.  16:55
3.  golang
    1.  golang保存照片。
        1.  base64 14:32-15:22
            1.  终于抄出来把png转为base64的代码。但是没有完全理解。

09:49 2018-03-02
================
GTD
---
1.  杂
    1.  小憩 10:54-11:03
    2.  记账 11:03-11:34
    3.  寄hikey960.
1.  机器学习，人工智能
    1.  python机器学习。kmins函数。30' 40'(一边走路一边听)
1.  badgerIO
    1.  levelDB文档。 10:36-10:54 11:03-xxx
        1.  levelDB log format是做什么的？
        2.  levelDB其它文档：
            1.  <https://ayende.com/blog/posts/series/161410/reviewing-leveldb?page=2>
            2.  [SSTable and Log Structured Storage: LevelDB](https://www.igvita.com/2012/02/06/sstable-and-log-structured-storage-leveldb/)

12:17 2018-03-03
================
1.  杂
    1.  没有多难受。但是也不想写东西。从12多真正开始写了，觉得写东西也没有那么难受。也许这就是自律的作用。
    2.  睡觉。睡醒觉得舒服多了。13:50-16:00
    3.  醒觉，找go学习材料。16:00-16:28
    4.  刷碗，做粥。13:28-16:39
    5.  洗手间，洗手，晾粥。18:11-18:20
    6.  刷碗。19:03-19:09
3.  完成周一公众号。
    1.  完成大纲。
        1.  想的是写大纲，但是写的太细了。12:22-12:51
        2.  完成整理思路，看看还缺什么。13:05-13:31 13:36-13:50 17:17-17:56 17:56-18:11
        3.  重新看下写好的草稿。18:20-19:03 19:36-20:02 20:06-xxx
            1.  一边做一边吃零食的习惯不好。以后零食不放工作台边上。
            2.  以后还是需要一边做一边写文档，这次dq6是做到中后期写文档，感觉单独写文档的时间比较长。
        4.  制作动画方法见：<bjzhang.github.io/public/images/games/convert.sh>。19:09-19:36
        5.  再简单整理下文档。21:00-21:17
            1.  自己容易陷入细节，通过番茄工作法可能是个办法提醒自己review每段工作的效果。
        6.  重头戏是完成代码。
            1.  写整理流程。21:20-21:47
                1.  希望尽可能多用于写go的特性。
                    1.  使用goroutine。一个抓图一个处理。多个抓图一个处理？
                    2.  main函数尽量和dq6解耦，便于以后用于其它游戏和bmc。
                    3.  感觉对于golang还很不熟悉。
3.  16:28-17:16 听golang讲座1, 2. <https://github.com/Unknwon/go-fundamental-programming>.
    1.  go command
        1.  `godoc -http ":6060"`，用浏览器"localhost:6060"查看本地go文档。
        2.  gofmt格式化代码。
        3.  go test运行测试代码。

1.  每天抽出时间看视频。
    1.  今天看coursera的cloud computing视频。
        1.  看了gossip协议部分，还没有看完。
1.  投linuxcon议题。
1.  macbook air重装。
    1.  调研方案。
1.  badgerIO
    1.  看看PingCap 唐刘的TiKV。
        1.  看完coursera视频之后。

16:21 2018-03-03
================
学习资源
--------
1.  golang学习: 整理到useful link
    1.  中文教程。<https://github.com/Unknwon/go-fundamental-programming>
    1.  里面有syncthing, k8s等我听说过的项目，需要时可以参考。<http://herman.asia/open-source-go-projects-to-learn-from>
    1.  [Google I/O 2013 - Advanced Go Concurrency Patterns](https://www.youtube.com/watch?v=QDDwwePbDtw)

2.  机器学习: TODO报名机器学习么？看看google的课是否也有玩儿游戏的例子？我觉得我还是聚焦下，先多学学分布式存储。
    1.  <https://developers.google.com/machine-learning/crash-course/?hl=zh-cn>

11:53 2018-03-04
================
GTD
---
1.  杂
    1.  去医院开药。13:20-15:36
        1.  路上听了golang slice。
    2.  记账。15:39-xxx
    3.  发呆 -16:38 继续刷手机。-17:03
    4.  吃面条. 21:10
2.  LC3: 投了两个topic。11:53-13:20
3.  DQ6
    1.  代码逻辑
        1.  基本数据结构定了。17:04-17:49
        2.  确定基本函数逻辑。
            1.  17:51-18:18 写了半天在一个函数调用提示。开始一直觉得是函数或变量不对。后来发现把函数移到while外面就可以。才看出是因为golang没有while关键字。。。
                ```
                $ go run fighting_new.go
                # command-line-arguments
                ./fighting_new.go:99:35: syntax error: unexpected newline, expecting comma or }
                ```
            2.  18:28-19:13 中间被打算10'，学会了怎么初始化嵌套的map。开始有问题是因为map里面多加了一层大括号。没多一层大括号这样golang会认为多了一层类型。TODO怎么把处理每个scenario和button的代码也加入进去?
                ```go
                type position struct {
                    x int
                    y int
                }
                type button map[string](position)
                type scenario map[string](button)
                var scenarios = scenario{
                    "startFighting": {
                        "fighting": {-1, -1},
                        "escaping": {-1, -1},
                    },
                    "exitFighting": button{
                        "exiting": {-1, -1},
                    },
                }
                func main() {
                    scnr := "startFighting"
                    bttn := "fighting"
                    fmt.Printf("%v: %v: %v\n", scnr, bttn, scenarios[scnr][bttn])
                }
                ```
            3.  19:29-19:55 结构体不动的情况下能不能把函数细化下？一直再改结构体。
                1.  还是遇到数据结构使用的问题，map里面的value不能直接修改，需要reassign。
                2.  突然觉得是不是应该在什么地方把map里面把value定义为不重复的类型？或者定义为接口？然后把不同的处理函数放进入。
            4.  20:09-20:34 看起来代码结构还可以，先写一个战斗画面的完整逻辑看看。
                1.  连贴带写写了很多。感觉再有25分钟肯定写完了，编译和调试估计还需要两个25分钟。
            5.  20:43-21:07 检查代码。希望能够编译通过。
                1.  可以获得文字了。
            6.  -22:35 从现在情况看还是需要单独提取出白色灰色等颜色，看看能不能更好的识别出文字。不要把时间用在无目的的参数调整上。

6.  去拉勾网上看看相关职位的行情。

11:57 2018-03-04
================
演讲
1.  short
    2014 Opensuse Asia Summit: openSUSE on ARM
    2016 Linuxcon Europe: An efficient unit test and fuzz tools for kernel/libc porting
    2016 Linaro Connect Las Vegas: LAS16-TR07: Working upstream [Mandarin]
    2017 Linaro Connect Budapest: BUD17-305 - Implement contiguous page hint for anonymous page in user space

2.  long version(not finished!)
    Join openSUSE Asia Submit 2014 and give the presentation named "openSUSE on ARM”(https://github.com/openSUSE-CN/oSA2014-slides/blob/master/Bamvor_Jian_Zhang-openSUSE_on_Arm.pdf)
    Give a presentation on community activity:
    Activity link: http://code.csdn.net/news/2818866
    Slide: http://share.csdn.net/slides/1347

12:02 2018-03-04
================
BIO
---
Bamvor Zhang works kernel, libc and storage in differnt senarios such as cloud and mobile in recent ten years. He worked for Huawei and Linaro as Senior Engineer. Right now, he is architect of Eking technology which belong to Hainan airline. His prsentations in recently:
2014 Opensuse Asia Summit: openSUSE on ARM
2016 Linuxcon Europe: An efficient unit test and fuzz tools for kernel/libc porting
2016 Linaro Connect Las Vegas: LAS16-TR07: Working upstream [Mandarin]
2017 Linaro Connect Budapest: BUD17-305 - Implement contiguous page hint for anonymous page in user space

12:11 2018-03-04
================
LC3 China 2018, kiwi
--------------------
1.  Abstract Title
    Building your appliance with suitable method
2.  Abstract
    In this presentation, Bamvor will compare the pros and cons of different appliance builders such as Kiwi, kickstart, autoyast, virt-builder and terraform.  He will share the experiences, challenges, and solutions in their project when building an appliance in a special environment such as the small bootable disk, private network. In the end, He will show the audience how to use these builders to build the same appliance base on the different distribution.
3.  Audience: Describe who the audience is and what you expect them to gain from your presentation.
    Expert audiences are who need to customize the appliance in the standalone, private and public cloud environment. By choosing the suitable appliance builder, audiences could same time on installation and configuration of distribution.

4.  Benefits to the Ecosystem: Tell us how the content of your presentation will help better the ecosystem. (We realize that this can be a difficult question to answer, but as with the abstract, the relevance of your presentation is just as important as the content).

13:05 2018-03-04
================
LC3 China 2018, contiguous page hint
------------------------------------
1.  Audience:
    Kernel developer or System performance engineer who want to analyze and improve the memory performance. After this presentation, audiences will learn how to determine if the memory is the bottleneck and how to know if there is an issue in cache or tlb. Finally, audiences will learn how to improve 64k page performance in arm64 architecture.

09:43 2018-03-05
================
GTD
---
1.  杂
    1.  帮租客查孩子打疫苗的医院，并记录。10:16-10:23
    2.  吃水果。10:23-10:47
        1.  同时在看leveldb文档。
    3.  散步，午饭，散步。11:40-14:15
    4.  今天确定要不要报名xuewei，zouzheng的团体。
    5.  卫生间，喝水，吃火腿肠。15:07-15:20
    6.  小憩 15:24-15:38
    7.  上午和兴义定位个运维报的问题。virsh启动虚拟机卡住，并且是paused状态，没法resume。我猜测是存储问题。实测ceph -s可以，rbd不行。结论是网络问题。
    8.  刷牙，洗手间，看自己的公众号。16:13-16:30
    9.  17:42-18:38 下班走路回家。
    10. 18:38-20:03 做饭吃饭刷碗。
    11. 杂（记账，食谱等）20:03-20:25
    12. 记账，还款准备。20:25-20:51
    13. 21:19-21:22 英语录音。
2.  转正 09:40-10:14
    1.  基本信息
        1.  进入海航时间 2017.10.18
        2.  部门及岗位 云服务事业群云平台事业部基础架构中心资深架构师
    2.  本人述职
        1.  参与2017年公司重点项目虚拟机迁移项目
            1.  负责优化virt-p2v工具性能。
            2.  输出项目文档。
                1.  virt-p2v 迁移脚本使用方法: http://cf.polex.io/pages/viewpage.action?pageId=14457399
                2.  P2V迁移输出文档 2. 交付物（环境、脚本等）信息: http://cf.polex.io/pages/viewpage.action?pageId=16745167
        2.  参与2018年公司重点项目一体机项目。
            1.  负责系统镜像构建和开发自动化测试。
                1.  负责镜像构建工具选型，测试和研发。
            2.  输出镜像服务器搭建到构建手册：http://git.ekingcloud.com/zhangjian/storage_applicance/blob/master/README.md
3.  看和讨论levelDB文档。10:47-11:35
    1.  levelDB implementation.
    2.  现在raft log也存在badgerIO里面。
    3.  相关材料
        1.  badgerIO: 搜索badgerIO的snapshot可以找到snapshot和backup。snapshot和backup都用到了transaction。backup把keyvalue写到一个新的文件完成。
            1.  [any plan to support snapshot? ](https://github.com/dgraph-io/badger/issues/39)
            2.  [Add DB.Backup() and DB.Load() for backup purposes.](https://github.com/dgraph-io/badger/commit/671c20ed0363d44820a3086ad5d86d24fb753c97)
            3.  [transaction](https://github.com/dgraph-io/badger/issues/230)
        1.  rocksDB
            1.  <https://github.com/facebook/rocksdb/wiki/How-to-backup-RocksDB%3F>
            2.  <http://rocksdb.org/blog/2015/11/10/use-checkpoints-for-efficient-snapshots.html>
    4.  badgerIO学习
        1.  从badgerIO的transaction看。14:20-14:44
            1.  [badgerIO transaction设计文档](https://discuss.dgraph.io/t/supporting-transactions-in-badger/1766)
            2.  CockroachDB评测badgerIO的性能和badgerIO自己不同，看起来是场景不同。
        2.  梳理badgerIO代码结构。14:45-15:07 15:20-15:24 15:38-16:13 16:30-17:42(Compact还会没看懂)
            1.  过一遍文件和目录

    5.  pingcap的唐刘有个项目[ledisDB](https://github.com/siddontang/ledisdb)，支持多种数据格式(KV, List, Hash, ZSet, Set)和多种底层数据库(LevelDB, goleveldb, RocksDB, RAM)。
        1.  可以用于学习怎么使用keyvalue数据库。
        2.  唐刘自己有计划，但是还没有用badgerIO的transaction: <https://github.com/siddontang/ledisdb/issues/296>

09:13 2018-03-06
================
GTD
---
1.  杂
    1.  09:13-09:22 替换本文档中tab为4个空格。
    2.  计划。09:23-09:45 用了些时间想晚上能用goroutine做的事情，结果就发散到怎么模拟鼠标键盘点击。心里还是想着怎么继续完善GUI助手。
    3.  散步 10:36-10:59
    4.  11:30-11:49 热饭。看cloud computing.
    5.  11:50-12:00 吃饭。
    6.  12:00-12:14 刷碗，洗手间。
    7.  12:14-12:45 午睡。
    8.  12:45-13:03 刷牙，抹油。听了cloud computing 2.5 Another Probabilistic Failure Detector. 没有完全集中精力，还需要重新听。
    9.  13:03-13:20 总结上午看的cloud computing部分。感觉现在这个记忆力根本记不下来，字都认识完全没有感觉。。。
    10. 14:43-15:18 散步，听武志红心理学。
    11. 15:18-15:26 日记。
    12. 15:26-15:29 整理tech log.
    13. 17:31-19:12 下班，买菜回家。
    14. 19:12-19:50 做饭。切好了明天的菜。
    15. 19:50-19:57 吃饭。从下班到吃饭听了tensorflow第二讲，听到1:07:32 神经网络中的参数表达。
    16. 19:57-20:10 20:21-20:36 记账，记录饮食。
    17. 20:10-20:21 刷碗。
    18. 20:36-xxx(10') 心理学团体文档。
    19. 22:50-23:18 镜像打包总结
1.  gossip协议笔记。不记笔记时间长了就忘了。
    1.  09:47-10:03 找课堂截图。想整理笔记，但是真正看的时候好像也不知道哪里有问题了，看来还是要坐下来重新听一遍。
1.  badgerIO代码。
    1.  先把代码框架捋一下。
        1.  把每个文件都看下。10:06-10:36
            1.  看了一部分感觉还是先看api比较好。
    2.  11:01-11:30 看所有接口的代码。<https://godoc.org/github.com/dgraph-io/badger> 不自觉的就去看细节了。
        1.  参考levelDB文档和WiscKey论文组织文档。
        2.  13:20-13:58 看完了第一层的接口。
        3.  14:03-14:16 看第二层接口。第二层接口中Options是配置参数。skl不知道是做什么的。table和y函数多且比较常用。
    3.  14:16-14:43 继续看每个文件。看能不能了解每个文件都是做什么的。
        1.  觉得这样效率不高。一会儿回来想一想是不是要先看看重点流程。
    4.  17:00-17:31 困了，赶紧走。
        1.  什么是主流程？
            1.  Open, View, Update, Close. Transaction.
                1.  Open, Close已经看过了。View和Update实际依赖Transaction.
            2.  我们的目的是看能不能通过复制sst文件的方式做snapshot。那么需要了解level的管理。从mmtable到sst包括后天会跑什么（只有compaction么）
            3.  所以先看下transaction相关函数，后面可能可以用这些相关函数做snapshot. 然后还是看下level.go。
            4.  如果遇到困难，可以从db.go看看主要api。
            5.  文件格式包括：memtable, sstable, log, vlog, manifest.
    1.  如何看go项目的代码？
1.  golang opencv
    1.  15:30-16:08 边框识别和去除。
        1.  效果很好不知道为什么还有彩色，可能是inrange函数不会比较rgb颜色是否相同。<https://www.pyimagesearch.com/2014/08/04/opencv-python-color-detection/>
    2.  16:13-16:54 忘了计时。
        1.  要不要自己改写inrange函数。
            1.  gocv没法拿到rgb的点，我不知道怎么从int或float转为颜色。暂缓。 2.  可以先去掉边框看看效果。
            1.  去掉边框效果不好，因为findContours只检测了外框。
1.  晚上：
    1.  做饭。
    2.  心理团体报名。

09:29 2018-03-07
================
GTD
---
1.  杂
    1.  09:26-09:33 计划
    2.  9:33-9:38 记账，看邮件。
    3.  能集中精力就继续听cloud computing，不能集中精力就听中文（tensor flow）
    4.  -10:14 10:25-10:44 讨论中软项目自动发现。最后安装xfce，使用java在本机配置每个机器的ip。但是后面的管理界面还是用web，不能用java applet，因为铁路场景只有IE6还是IE7，也没有firefox，我担心对java applet支持不好。
    5.  11:29-12:19 热饭，吃饭，刷碗，饭后休息。听了cloud computing grid部分。感觉是介绍性质的。访谈 听到06:36
    6.  12:19-13:51 午睡
    7.  13:51-14:07 刷牙，洗手间。听完cloud computing week2 访谈。
    3.  访谈
        1.  传统HPC认为每个计算节点计算能力是相同的。现在逐渐不这么认为了。这个和云计算的情况是一样的。
    4.  14:07-14:23 week2 考试。
        1.  做了两次没过。
            1.  两次都错的题是：
                1.  如何判断一个heartbeat算法的completeness和acurate.
                2.  增加heartbeat timeout会导致什么。
1.  badgerIO
    1.  看主流程。
        1.  10:49-11:29 14:34-14:50 14:52-15:07 看完compaction。
            1.  更基础的问题是否是keyvalue是怎么写入的？这可以理解各个文件的格式。
            2.  还没看完compaction。看完之后回去看看怎么保存的keyvalue。
            3.  再看25分钟，不行还是先看别的。
                1.  对我来说太困难了。
        2.  15:07-15:46 16:02-16:27 16:41-17:16
            1.  看如何写入新的key。
            2.  Put逻辑没看懂。暂时跳过具体Put和Get实现。
        3.  17:16-17:26 skl暂时不同看太细。
    2.  如果前面进展慢。继续看每个文件的作用。
1.  golang opencv
    1.  考虑用houge line transform检测直线<https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_imgproc/py_houghlines/py_houghlines.html>
        1.  19:59-23:05 中间也玩儿了游戏。效果还不错。但是还有一点点按钮的边界过滤不掉。
1.  晚上
    1.  洗衣服。用房东的消毒液。DONE

11:28 2018-03-07
================
golang, notes
-------------
1.  0305
    1.  sort.Slice
    2.  protobuf
    3.  函数返回函数。
2.  0307
    1.  sort.Search, bytes.Compare 练习。
    1.  看看"github.com/dgryski/go-farm"是什么.
3.  0308
    1.  skiplist。
    2.  函数作为返回值返回。
    3.  Buffer
        1.  NewBuffer()可以接受一个初始的size。
        2.  Buffer.Write()会按需增长。
4.  0309
    1.  两种情况都会返回一个函数，由于释放table的引用计数。
5.  0311
    1.  [iota](https://github.com/bjzhang/bjzhang.github.io/commit/e98b18458fd70c2e87db6e41aeed565513f09716)

10:32 2018-03-08
================
软件测试
--------
1.  计算机基础
    1.  [南华大学公开课：计算思维漫谈——感悟数字化生存的智慧](http://open.163.com/special/cuvocw/shuzihuashengcun.html)
2.  测试
    简单看了下软件测试的资源。我觉得你可以看看下面的资料1了解软件测试基本知识。然后根据你求职目标看看需要学习什么基础知识（比如学习一种编程语言，学习一种测试框架）。
    1.  可以看这个视频了解软件测试基本概念：[软件测试2小时入门](https://study.163.com/course/introduction.htm?courseId=1004794006#/courseDetail?tab=1)
    2.  这个课暂时没有开课，但是涉及的内容比较全，你可以看看目录，看看软件测试需要学什么。[软件测试方法和技术实践](https://mooc.study.163.com/course/1000002019?tid=2001355031#/info)
    3.  coursera上面的课程质量比较好，想要证书的话需要付费，否则免费。上课的同时有强制练习题保证效果。<https://www.coursera.org/learn/ruanjian-ceshi>。看了看这个难度的确高一些。不过学会了帮助也很大。

11:03 2018-03-08
================
GTD
---
1.  杂
    1.  昨天睡的晚直接导致的是今天上午效率比较低，时间节奏不好。
    1.  帮朋友看软件测试知识。"10:32 2018-03-08"
    1.  11:17-11:29 时间安排梳理。
    1.  11:29-11:47 热饭。
    1.  11:47-12:02 吃饭。
    1.  12:02-12:16 刷碗。
    1.  12:16-12:41 午睡没睡着，放松。
    1.  13:10-13:16 14:39-14:48 洗手间。
    1.  13:16-13:52 午睡。
    1.  13:54-14:07 刷牙 洗手间。
    1.  15:08-15:27 休息（没睡着）
    1.  15:27-15:51 散步，活动膝关节，脖子。
    1.  17:56 下班。
2.  公众号文章. "11:28 2018-03-08"
3.  badgerIO
    1.  12:43-13:10 看主流程。
        1.  已经看了Set, Commit.
        2.  14:08-14:39 14:48-15:08 15:53-16:17 16:58-17:41 继续看db.go
            1.  看db.go感觉还好，多看一层就晕了。
            2.  我觉得我应该重点先看memory table到SST是怎么做的？触发条件。
            3.  flush memtable终于看完了。明天先回顾下现在已经看的内容。
    2.  做实验观察mmtable到SStable和compaction的变化。

11:28 2018-03-08
================
公众号文章计划
--------------
1.  社区动态：基本的思路是蹭社区热点。内核，glibc等我熟悉的工具release时写相关的公众号。
    1.  目前眼前的是内核4.16 release notes和sgx.
2.  工作相关
    1.  kiwi
        1.  镜像打包工具比较。
    2.  ansible
        1.  Nentropy ansible部署成功后从tidb ansible学习开始写一篇公众号。
        2.  远期计划是tidb支持opensuse的补丁。
    3.  keyvalue数据库
    4.  基本数据结构和算法

09:03 2018-03-09
================
GTD
---
1.  杂
    1.  09:03-09:07 计划
    2.  09:42-09:53-10:09 转正评价。吃西红柿。发转正评价。
    3.  11:54-14:35 做饭，吃饭，散步。
    4.  15:10-15:33 睡觉
    5.  18:03-19:02 下班到家。
    6.  19:02-19:07 cloud computing笔记。
    7.  22:44 睡觉。
1.  看完tidb代码阅读第二，第三篇。
    1.  09:07-09:31 see"09:17 2018-03-09"
1.  回复群里面问的内核测试方法。本周公众号写这个。
    1.  10:15-11:02 <https://github.com/bjzhang/bjzhang.github.io/blob/master/_drafts/2018-03-09-kernel-tests.md>
1.  整理这几天的badger代码阅读。确定今天要看哪一部分。
    1.  11:08-11:54 14:39-15:10 16:07-16:40 17:01-17:11 17:20-17:56
        1.  看到自己文档的transaction部分，感觉看不懂。再重新过下transaction.go
        1.  看完transaction.go
        1.  讨论。周一加入停止compaction的开关，测试复制文件行不行。
1.  appliance summary
    1.  21:48-22:20
1.  晚上
    1.  租房的地方配置shadowsocks.
    1.  复习单词。
    1.  镜像打包总结
1.  NEXT
    1.  周六活动不参加了。保证周一公众号完成。
    1.  macbook air文件备份。
    1.  每天讨论一下下。
    1.  需要看下LSM tree的原理。
    1.  看看我的icloud是不是被关闭了
    1.  下周一个公众号如果写不出keyvalue数据库的文章。考虑把kernel-4.16 release notes写出来。
    1.  vim golang如何查找定义。
    1.  如何画类型定义关系?

09:06 2018-03-09
================
小活，杂
--------
1.  用go统计每天工作时间。
1.  又有点想写自己的职业规划。要不学学用golang画图？

09:17 2018-03-09
================
tidb源码阅读文章的阅读笔记
--------------------------
1.  [TiDB 源码阅读系列文章（三）SQL 的一生](https://mp.weixin.qq.com/s/VwslkLNYxItFY05OB1jk3Q)介绍了整个 SQL 层的执行框架。包括解析sql，生成查询计划，执行三部分
    1.  解析会生成abstract syntax tree (AST)
    2.  生成查询计划: "plan 转换成 executor"
    3.  执行: "TiDB 的执行引擎是以 Volcano 模型运行"。[下文](http://www.infoq.com/cn/articles/an-article-mastering-sql-on-hadoop-core-technology)提到"目前主要的执行引擎有如下四类：Volcano-style，Block-oriented processing，Column-at-a-time，Vectored iterator model。"

19:07 2018-03-09
================
1.  failure dectector <https://en.wikipedia.org/wiki/Failure_detector> 参考链接不错，TODO 有空看看。
    "The classes of failure detectors are distinguished by two important properties: completeness and accuracy."
2.  耶鲁大学的分布式系统课堂内容，可以参考<http://www.cs.yale.edu/homes/aspnes/classes/465/notes.pdf>
3.  grid是网格吧。
    1.  long running task. hours.
    2.  2 level scheduling intratructure.
        1.  inter
        2.  intra
3.  TODO: raft和gossip什么关系? 看起来raft或paxos和gossip场景不同。
    1.  [What is the difference between gossip and Paxos protocols?](https://www.quora.com/What-is-the-difference-between-gossip-and-Paxos-protocols)
    2.  [raft算法与paxos算法相比有什么优势，使用场景有什么差异？](https://www.zhihu.com/question/36648084)
4.  p2p
"some of the techniques used here(P2P systems) are reused and are being reused in two days generation of key value and NoSQL storage systems"
"we'll study key-value stores, such as Cassandra, Riak, uh, Voldemort from LinkedIn, and also DynamoDB from, uh, Amazon. All of these, for instance, use techniques, such as, consistent hashing, which we'll study in the Chord, uh, peer-to-peer system, uh, in this lecture series."

09:29 2018-03-10
================
GTD
---
1.  杂
    1.  8:28-9:29 起床，洗漱，做早饭（鸡蛋挂面），擦地
    2.  9:29-9:36 吃饭。
    3.  09:36-09:39 整理cloud computing笔记
    4.  09:39-09:47 账目.
    5.  09:47-09:58 刷碗，洗手间
    6.  18:12-18:31 发呆
    7.  09:47-10:09 计划
        1.  想的是上午做羊蝎子。但是10点开始学习一个小时就11点了。中午饭吃什么？可以吃昨天剩下的香菇。就是少了点。
        2.  按照现在的计划晚上7点就能完成。执行吧。后续逐步调整。
    8.  13:46-14:32 睡觉没睡着
    9.  14:32-14:55 刷碗，洗衣服，尝羊蝎子汤咸蛋，准备热一下焯水的羊蝎子汤。
    10. 20:50-20:57 记账
    11. 20:57-21:10 日记。
    12. 22:38-23:00 洗漱。
    13. 总结：
        1.  今天整体效率还可以。晚上吃饭时比较慢是因为比较累了。
        2.  badgerIO和keep健身没有做，明天提高优先级做。
2.  吃饭问题
    1.  计划
        1.  泡香菇，粉丝。做羊蝎子。
            1.  预计需要半小时到一个小时。DONE
            1.  香菇要用淀粉洗一下!!!DONE
        2.  吃饭刷碗睡觉（当时没有算晚饭时间）
            1.  预计2小时。
    2.  11:28-12:52 做午饭，泡香菇，粉丝，腐竹。做羊蝎子。
    3.  12:52-13:02 吃饭
    4.  公众号。
        1.  13:07-13:46 写做饭。这样kiwi就有充分时间修改和投稿。
        2.  21:12-22:38 中间又走神，不过今天能写完还是完成了任务。
    5.  17:34-18:12 买菜
    6.  18:32-20:33 做晚饭。吃饭。
    7.  20:33-20:50 刷碗。
3.  写完周一的公众号（镜像打包）
    1.  计划
        1.  估计最终完成需要4个小时。
        2.  两个小时写出轮廓，看看能写个多少内容。拆成几篇比较合适。
        3.  如果下午能写出自己满意的状态，问问宋宝华能不能发。
    2.  10:09-11:26 将近一个半小时写出基本可以发公众号的素材。估计整理和测试时间需要4个小时。测试和其它任务穿插。
    3.  15:00-15:33 15:40-16:16 -17:34 继续补齐缺失的内容。
        1.  17:34之前中间起来几次，我终于意识到自己身体接受继续写了。

21:28 2018-03-10
================
python3
-------
`brew upgrade python`之后提示：
```
If you need Homebrew's Python 2.7 run
  brew install python@2
```

07:49 2018-03-11
================
1.  杂
    1.  07:49-08:02 计划
        1.  总结：
            1.  昨天计划没完成的原因
                1.  公众号内容需要材料和测试截图时间不够，临时更换内容。
                2.  做饭时间比预计长。少计算一顿饭的时间。
            2.  中午总结：计划3h10‘的事情实际用了5.5h。主要是买菜，吃饭和刷碗时间少算了。
        2.  吃饭 共2h10‘
            1.  洗漱，早餐（做，吃）40'
                1.  AAR:
                    1.  没有计算刷碗的时间。和午餐合并。
                    2.  饭后会有些发呆时间。尤其是吃的比较饱的时候。
            2.  午饭。
                1.  做周一，周二的菜。周一的米饭。
                1.  吃火锅或米饭。
                1.  买菜30‘
                1.  做饭30‘
                1.  吃饭刷碗 30‘
        3.  badgerIO合并SetEntry和Delete 1h
            1.  看起来代码不复杂，关键是不知道怎么测试。
                1.  做简单keyvalue添加删除测试。
        4.  14:30出发去接大女儿。路上休息。
        5.  keep健身40分钟。
        6.  公众号 1h
            1.  完成第一部分的初稿，看有没有地方投。
            1.  下周有时间把显示器搬回来。可以适当减少keep的运动时间。
        7.  晚上如果有时间，做单词卡片。30'
        2.  TODO 定期读一读badgerIO的git commits。
        1.  能不能每天加上有一定强度的健身。膝盖需要去医院检查。
    2.  日记
        1.  09:01-09:06
    3.  09:34-09:41 刷微信
        1.  AAR 5分钟休息时不要刷微信。
    4.  11:12-11:17 为大女儿录英语
    5.  13:44-14:04 洗手间。
2.  吃饭
    1.  08:02-08:30 洗漱，做饭。
        1.  AAR：洗漱时在和人微信聊天。
    2.  08:30-08:45 吃饭。
    3.  08:45-09:01 饭后发呆
    4.  09:25-09:34 洗手间，刷碗，想分装冻的羊蝎子汤失败。
    5.  10:25-11:11 买菜，洗衣服，收衣服。
    6.  11:11-11:12 记账。
    7.  11:17-13:21 做饭，吃饭，周一饭菜，周二菜装盒。
        1.  AAR: 做饭吃饭实际用了两个小时。这次做了土豆茄子，羊蝎子汤煮了香菇和生菜，勉强算是两个菜。看起来如果希望做饭吃饭1小时，只能做简单的菜。
    8.  13:21-13:44 饭后发呆，后续需要想一想怎么改变自己的饮食结构，提高热量，少吃主食。
    9.  14:04-14:15 刷碗。
3. badgerIO DONE almost in time
    1.  09:07-09:25 合并SetEntry和Delete的公共代码。
    2.  09:43-10:13 编译测试。如果编译不过或测试有问题，写简化用例。
        1.  做的时候才想起可以用`go test`来测试。
        2.  提交时看了下`git diff`发现格式不对。用`go fmt transaction.go`格式化就没问题了。
        3.  [pull request](https://github.com/dgraph-io/badger/pull/438)
    3.  10:13-10:25 记录今日学习的iota。see"11:28 2018-03-07"5

09:16 2018-03-12
================
GTD
---
1.  杂
    1.  09:12-09:17 记账
    2.  计划 5' 11:06-11:11
        1.  k8s讲座。
        2.  badgerIO
            1.  加flag：可能要用channel。之前没有练习过。预计2h。
            2.  测试复制文件能不能用。还不知道怎么测试。可以自己灌照片的keyvalue。预计3h。
		3.	15:00-15:07 晚上计划。
    3.  吃饭
        1.  11:30-11:41 热饭。
        2.  11:41-12:24 吃饭。
        3.  12:24-12:30 饭后休息，感觉吃饭的时候多动了几下，胃不太舒服。
        4.  12:30-13:01 刷碗，洗手间。
		5.	16:11-16:30 买水果
		5.	16:30-16:47 吃水果。
    4.  13:01-13:12 看文章<https://zhuanlan.zhihu.com/p/34455548?utm_medium=social&utm_source=wechat_session&from=timeline>
	5.	13:16-14:23 睡觉
	6.	14:23-15:00 散步2000步。
	7.	cloud computing 3.3, 3.4需要总结。3.5需要重新听。
	7.	[“TiDB源代码阅读第一篇”](https://colinback.github.io/myBlogs/distributed/system/2018/01/24/TiDB%E6%BA%90%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB(1).html)
2.  k8s
    1.  09:30-10:30 讲座。
    2.  10:30-11:06 简单[整理笔记](http://aarch64.me/2018/03/k8s-learning-and-try-it/)。现在的策略是基本结构和内容写好的文章或笔记尽量发到博客，逐步整理到公众号。
3.  badgerIO
    1.  11:18-11:30 11:41-11:52 改merge SetEntry, Delete补丁.
	2.	15:15-16:11 17:00-17:15 加一个参数控制compaction。
		1.	15:26 主要是不知道怎么测试。。。
		2.	16:49-17:00 看看怎么加日志。
			1.	用fmt和log都可以，都会输出到终端。
	3.	17:15-17:51 停止compaction，看拷走文件有没有问题。
		1.	好像是可以的。
	4.	讨论
		1.	17:51-18:26
			1.	今天的知乎在看下，看<http://www.cs.utexas.edu/~vijay/papers/sosp17-pebblesdb.pdf>
			2.	明天看nentropy snapshot怎么做的。
4.	晚上
	1.	下班听完没听完的武志红心理学课。
	2.	然后听cloud computing 3.3，3.4，并总结。
	3.	吃饭
	4.	keep 10分钟。

13:12 2018-03-12
================
life in technology
------------------
嗯嗯，其实从做技术开始，这个问题一直是热点。原来工作两三年的时候身边同事朋友，都觉得做技术做到35就做不动了。现在到了35，发现当初技术做的比较好的，多数还在做技术。很多70后到了40岁出头也有不少还在做纯技术（不包括技术管理这些，售前，售后这些）。国外的程序员，我认识的40-50岁的也不少。所以我觉得至少50岁之前不用担心这个/:8-)我自己一直觉得只要喜欢肯定一直做下去。

09:30 2018-03-13
================
GTD
---
1.	杂
    1.  09:30-09:35 计划
        1.  09:35-09:54 公园五号买电，还款。DONE
        2.  09:54-10:16 王建大夫预约。约满了。北京中医医院骨科大夫预约。
        3.  badger pr。 DONE
        4.  badger补丁修改。开issue问。
        5.  计算下欠了多少运动，雾霾之后补上。DONE
        6.  5' 买空气净化器滤芯。DONE
        1.  学习nentropy。
        1.  vim global setting。
        1.  看昨天冬卯说的论文。
        1.  蚂蚁借呗还款。
    2.  杂
        1.  10:16-10:24 洗手间。
        2.  12:18-12:54 睡觉没睡着。
        3.  13:48-14:15 睡觉。
        4.  14:15-14:42 散步1300步。
        5.  报税。
        6.  5' 编辑邮件签名。
        7.  今天做事情之间休息时间有点长了。会不会是因为最近放松太少，所以不由自主降低了效率？
        8.  运动量计算。see"15:49 2018-03-13"
        9.  16:10-16:25 洗手间。
2.  吃饭
    1.  11:10-11:45 买主食，热饭
    2.  11:45-12:18 吃饭，休息5‘
3.  badgerIO
    1.  10:24-10:55 根据owner建议修改补丁。已在reviewable回复。12:54-13:00 已接受，删除自己的分支。
    2.  10:55-11:08 看badgerIO现在有没有针对文件级别复制的讨论。
        1.  搜了搜"is:filter snapshot"没有找到讨论。讨论的时候是否可以说全量备份之后增加issue 370的增量备份？
            <https://github.com/dgraph-io/badger/pull/291>
            <https://github.com/dgraph-io/badger/issues/370>
    3.  14:53-15:24 和老孙学习nentrop
        1.  先看raft论文，再看etcd的raft例子，再看etcd rawnode。
        2.  nentropy里面scanner, queue实现对replica的操作。
    4.  16:05-16:10 17:17-18:26 badgerIO开issue问全量和增量备份。
        1.  16:27-16:36 16:50-16:58 看gc对value log的影响。
            1.  什么时候触发gc？
                1.  由用户触发。api包括
                    * `DB.PurgeOlderVersions()`
                    * `DB.PurgeVersionsBelow(key, ts)`
                    * `DB.RunValueLogGC()`: 实际gc函数，如果gc正在运行，需要等gc结束。
            2.  如果停止gc会对badger有什么影响？
                1.  看起来只是会影响badger用户。
        2.  看issue 370里面的[backup engine](https://godoc.org/github.com/tecbot/gorocksdb#BackupEngine)
            1.  实际看gorocksdb文档没看懂。实际看下fgoroocksdb的代码。
            2.  看rocksdb backup
                1.  rocksdb就是基于文件复制的。文件会检查checksum。
                2.  和冬卯讨论，可以基于rocksdb的设计，在badgerIO实现同样功能。正好社区也需要这功能("help wanted")
        3.  确定停止compaction对memtable flush的影响。
        4.  下面的文字不符合上面"2"的想法，暂时没用了。
            Title: About full backup and incremental backup
            Hi, I started to try the badgerIO recently. Glad to see badger [support backup and restore](https://github.com/dgraph-io/badger/pull/292)last year. I also notice that there is an open issue about [incremental backup](https://github.com/dgraph-io/badger/issues/370). Besides above, I am wondering if there is some plan to do the full backup the underlying files(vlog and sst) and then do the incremental backup.
            There are three things need be taken into consideration:
            1.  Compaction: Considering compaction will modify the sstable. My idea is suspend the compact for a while(do the suspend the write and read), and copy all the vlog and sst then restart the compaction. After I have the full backup. It is important that we have the incremetal backup which mentioned in issue 370.
            2.  gc: In badger, GC is issued by user. When doing the full backup, user should wait for running gc.
            3.  memtable flush. If the level0 is too big. BadgerIO will suspend all the write. THis is not what I want. I suggest increase the limit when copying the raw files. Considering, there are 10G network. Copy 10G files only takes 10 second. There are not very big memtable will be written.
        5.  reply to <https://github.com/dgraph-io/badger/issues/370>
            Hi,
            Is there anyone working on this?

            After read the [gorocksdb api]( https://godoc.org/github.com/tecbot/gorocksdb#BackupEngine) and [rocksdb documents](https://github.com/facebook/rocksdb/wiki/How-to-backup-RocksDB%3F#under-the-hood). I found that it is what we need. I want to pick this task. And I will do the following in detail:
            1.  Add the api in `type BackupEnginefunc` in gorocksdb, including:
                *   `OpenBackupEngine(opts *Options, path string) (*BackupEngine, error)`
                *   `func (b *BackupEngine) Close()，func (b *BackupEngine) CreateNewBackup(db *DB) error`
                *   `func (b *BackupEngine) GetInfo() *BackupEngineInfo`
                *   `func (b *BackupEngine) RestoreDBFromLatestBackup(dbDir, ro *RestoreOptions) error`
            2.  I will investigate and discuss the implementation later. And generally speaking, I will reference the design of rocksdb.
                1.  Disabling file delete during backup. So, it will not block the compaction. Badger will delete the file after backup. The user could sync the deleted and newly added sst files in further incremental backup.
                2.  There might be some differences because of the vlog in badgerIO. I am not sure which is the better way to do it. Considering gc is triggered by user. For an initial implementation, I suggest only backup when gc exit. And a live backup will block further gc. User should check this before issuing gc. When user issue a incremental backup, copy the latest vlog and mark the deling of the old one.

            Thanks

15:00 2018-03-14
================
GTD
---
1.  杂
    1.  15:12-15:23 买水果。
1.  badgerIO
    1.  昨天我的回复manishrjain觉得这么做没意义。今天和冬卯讨论，自己做。incremental不用做。冬卯建议直接做，不看rocksdb代码，看C++是深坑。
    2.  15:26-16:22
        1.  删除文件的记录:
            1.  看compaction流程。如何记录要删除的文件。
                1.  删除文件在`runCompactDef`函数中。
                2.  `decrRefs`具体删除文件。可以在这里修改。
            2.  看gc流程。如何记录要删除的文件。
        2.  full backup: 阻塞新的compaction和gc，做full backup。
        3.  其实延迟delete和live file是连接在一起的。如果没有延迟删除，那文件都是有效的，也就不需要live file的概念。badger前面有讨论manifest里面记录文件和大小，是否也借鉴类似的思路？

09:45 2018-03-15
================
GTD
---
1.  杂
    1.  09:45-09:59 记账
    2.  9:59-10:22 远程打印孩子生字练习。
    3.  10:22-10:30 统计过去三天运动量。
    4.  计划 10:30-10:45（中间去看了孩子老师发的学习资料）
        1.  打印老师发的数学学习资料。
        2.  16:50出发 幼儿园家长会。
        3.  badgerIO修改
    5.  10:45-11:13 打印学习资料。
    6.  11:27-11:57 热饭，吃饭。Chord failure detector.
    7.  11:57-13:04 午觉（吃饭立刻睡觉，胃不太舒服）
    8.  13:10-13:53 洗手间（排队很久。。。）
    9.  go opencv. see"14:14 2018-03-15"
    9.  teamviewer传送并打印文件。
2.  badger 14:25-14:30
    1.  记录放到table里面？然后关闭文件？
    2.  vim golang
        1.  14:30-14:50 15:10-15:33 see"14:45 2018-03-15"

14:14 2018-03-15
================
opencv, gocv, TODO使用gocv支持不支持的接口并用在game helper里面
---------
[OpenCV探索之路（二十四）图像拼接和图像融合技术](https://www.cnblogs.com/skyfsm/p/7411961.html)
[Opencv中使用Surf特征实现图像配准及对透视变换矩阵H的平移修正](http://blog.csdn.net/dcrmg/article/details/52627726)
[Opencv Sift和Surf特征实现图像无缝拼接生成全景图像](http://blog.csdn.net/dcrmg/article/details/52629856)
[Opencv 使用Stitcher类图像拼接生成全景图像](http://blog.csdn.net/dcrmg/article/details/52653366)

14:45 2018-03-15
================
vim, plugin, golang
-------------------
1.  测试环境os x
2.  下载[vim-go](https://github.com/fatih/vim-go)
    1.  使用vim plugin方式安装，修改"~/.vimrc"：
        ```
        call plug#begin('~/.vim/plugged')

        " Make sure you use single quotes
        Plug 'fatih/vim-go'

        " Initialize plugin system
        call plug#end()
        ```
    2.  打开vim，执行":PlugInstall"会自动安装vim plugin中微安装的插件。例如vim-go
    3.  再在vim里面执行":GoInstallBinaries"，会安装vim-go的工具。
3.  使用，参考<https://github.com/fatih/vim-go>features部分。
    1.  ":GoDef"，跳转到定义。快捷键："Ctrl+]"
    2.  ":GoCallers", ":GoCallees"
4.  设置go guru scope
    1.  go guru默认会搜索当前文件所在目录。如果项目里面有自己的包，就需要修改这个scope
    2.  修改"~/.vimrc":
        ```
        autocmd BufRead /Users/bamvor/works/go/src/github.com/dgraph-io/badger/options/*.go
            \ silent :GoGuruScope github.com/dgraph-io/badger

        autocmd BufRead /Users/bamvor/works/go/src/github.com/dgraph-io/badger/protos/*.go
            \ silent :GoGuruScope github.com/dgraph-io/badger

        autocmd BufRead /Users/bamvor/works/go/src/github.com/dgraph-io/badger/skl/*.go
            \ silent :GoGuruScope github.com/dgraph-io/badger

        autocmd BufRead /Users/bamvor/works/go/src/github.com/dgraph-io/badger/table/*.go
            \ silent :GoGuruScope github.com/dgraph-io/badger

        autocmd BufRead /Users/bamvor/works/go/src/github.com/dgraph-io/badger/y/*.go
            \ silent :GoGuruScope github.com/dgraph-io/badger
        ```
    3.  vim中通过":GoGuruScope"，查看当前的scope。例如我打开了"/Users/bamvor/works/go/src/github.com/dgraph-io/badger/table/table.go"，如果autocmd正确执行，看到的go guru scope应该是:
        "vim-go: current guru scope: github.com/dgraph-io/badger"

09:38 2018-03-16
================
GTD
---
1.  杂
    1.  09:40-09:42 计划
        1.  虽然觉得状态不好，也不能晃悠。
        2.  完成badgerIO disable delete的修改。
        3.  09:42-09:50 五年日记。
        4.  昨天家长会笔记整理。
        5.  kiwi文章整理。
    2.  11:53-13:35 吃麻辣烫。发知乎。刷手机。
    3.  13:35-14:15 午睡。
    4.  14:20-14:50 洗手间。时间有点长。。。
2.  badgerIO
    1.  09:58-10:04 10:15-10:36 用最笨的方法加delete标志，测试删除table时代码对不对。
        1.  文件还是还被删除了。
            1.  10:47-11:19 删除原因是加载manifest时会删除manifest里面不存在的文件。
        3.  11:19-11:53 和陈积讨论删除sst和gc的流程。
            1.  TODO 我看下gc的流程。现在对于channel不太理解。之前觉得channel会导致异步，其实不会。go routine才会。
    1.  测试不删除文件。manifest能不能读到正确的文件。
        1.  需要理解manifest是怎么加载的。
            1.  看了看代码是可以的。

09:33 2018-03-17
================
GTD
---
1.  09:33-09:38 计划
    1.  吃饭
        1.  DONE 做带鱼2h
        2.  DONE 肉末豆腐 30'
        3.  DONE 吃饭刷碗1.5h
    2.  公众号
        1.  幼儿园家长会整理。2h
        2.  kiwi 1h
    3.  09:38-09:44 golang学习笔记。30' DONE
    4.  杂
        1.  DONE 洗衣粉擦地。
        2.  肤膏药。
        3.  DONE 洗澡
        4.  keep健身。
        5.  换床单。感觉没时间。
    5.  总结：
        1.  计划外的事情
            1.  洗澡40'
            2.  做饭多用了一个小时。
            3.  买菜40'
2.  杂
    1.  10:54-11:26 洗手间。刷马桶。
    2.  13:20-14:00 午睡（被楼上吵醒）
    3.  14:33-15:13 洗澡。
    4.  15:13-15:44 洗衣服，擦地，换垃圾袋。
    5.  15:44-15:51 下周支出计划。
    6.  15:51-15:54 剪指甲。
    7.  20:15-20:38 擦地，洗拖鞋。
    8.  20:40-20:52 刷牙
    9.  21:13- 约10' 录音。
3.  吃饭
    1.  09:46-10:44 下楼买姜。
        1.  门口超市没有。时间比预计长。
    2.  10:44-10:54 吃稻香村点心。幼儿园家长会图片整理。
    3.  午饭
        1.  11:26-11:46 煮面条。
        2.  11:46-12:36 吃饭，休息（看了一集琅琊榜）。
        3.  12:36-12:52 刷厕所，刷碗。
        4.  12:54-13:06 刷牙。
    4.  13:07-13:17 超市购物记账。
    5.  晚饭
        1.  16:01-18:53 做饭。
        2.  18:58-19:40 吃饭。
        3.  19:55-20:15 刷碗。

07:35 2018-03-18
================
GTD
1.  杂
    1.  07:25 起床
    2.  08:55-09:07 10:40-10:57 日记
    3.  10:14-10:38 贴膏药
    4.  13:16-13:39 下周支出计划。
    5.  14:00-14:44 午睡。
    6.  15:05-16:36 找照片。
    7.  16:36-16:44 揭膏药，洗干净。
    8.  18:13-18:19 孩子英语错误纠正
    9.  19:09-19:29 看电视剧。
    10. 19:29-19:55 发呆。日记。
    11. 20:40-20:50 换床品。
2.  饭
    1.  07:38-08:20 洗漱，刷马桶，做饭。
    2.  08:20-08:36 吃饭。
    3.  09:08-10:07 10:07-10:14 买大白菜，扁豆，榄菜，买鸡蛋10个。记账。
    4.  10:57-11:48 做饭。做一个菜还是需要提高速度，30分钟比较好。
    5.  11:48-12:36 吃饭。一边吃饭一边看电视剧，节奏慢了很多。并不是说不能放松，只是需要有计划。
    6.  12:36-12:56 饭后看电视剧。
    7.  12:56-13:13 刷碗。
    8.  14:44-14:59 醒觉，刷牙。
    9.  18:22-18:31 晚上热饭，吃一块带鱼和豆腐。把周一的米饭做出来。
    10. 18:31-18:47 晚上吃饭。
    11. 18:47-18:59 饭后休息。
    12. 18:59-19:09 刷碗。
3.  08:37-08:55 计划
    1.  DONE 肤膏药 10' 实际 24'+8' 没有想象那么好贴，另外计划贴一条腿，实际贴了两条腿。
    2.  DONE 买菜 40' 实际68' 主要是超市人多，下次看看是不是错峰去买，或者看看门口的店人会不会少一些。
    3.  DONE 公众号: 幼儿园家长会整理。1h
    4.  DONE 做饭（做出午饭和晚饭的菜） 1h 没算两顿吃饭时间。
    5.  公众号: 幼儿园家长会整理。1h
    6.  DONE 午睡 1h-2h
    7.  keep健身。40'
    8.  业余（非必须完成）
        1.  图片差值做相册。
        2.  计划5月份安排。5.1, 5.18
    9.  公众号: kiwi 1h
4.  公众号
    1.  幼儿园家长会整理。
        1.  17:06-17:32 17:38-18:03 半小时时间快速整理。计划1小时完成初稿。
            1.  一个小时快马加鞭，感觉至少还需要30-60分钟完成最基础的初稿。此外，还有些需要查资料。
            2.  19:55-20:28 完成第一个版本。
        2.  20:29-20:40 等待上传。
        3.  20:50-21:00 看上传的效果。

09:30 2018-03-19
================
GTD
---
1.  09:31-09:33 计划
    1.  日记。30'
    2.  发幼儿园公众号。1h
    3.  badgerIO暂停删除文件并测试。3h
    4.  今天或明天考过cloud computing week3 2h
    5.  每天都要写一部分公众号素材，要不然周末抓瞎。30'
    6.  晚上和大女儿一起看照片。30'
2.  杂
    1.  09:43-09:50 09:50-10:08 日记
    2.  10:10-10:26 13:45-13:50 记账
    3.  10:26-10:34 贴膏药，洗手间。
    4.  12:20-13:09 午睡。
    5.  14:08-14:49 散步2000步，洗手间。
    6.  15:46-16:15 散步1600步。
3.  badgerIO
    1.  10‘ 和老积讨论。老积修改。我看下badgerIO单独怎么测试。
    2.  15:28-15:46 16:36-xxx 看badger memtable flush到sst的流程，为什么我的sst不是一直增加。
        1.  badger有没有memtable？
            1.  flushMemtable
        2.  replay是什么意思不太理解。
        3.  head看起来是flushmemtable时设置的。
        4.  各种走神。
4.  公众号
    1.  10:59-11:25 公众号文章。
    2.  10' 13:51-14:08 中午发出。
5.  吃饭
    1.  11:25-11:52 热饭，吃饭。
    2.  12:05-12:20 刷碗，洗手间，洗眼镜。

09:01 2018-03-21
================
GTD
---
1.  09:03-09:08 计划
    1.  09:13-09:21 日记 30'
    2.  公众号kiwi修改。1h
    3.  badgerIO log机制。
    3.  badgerIO flush memtable机制。
    4.  毕业10年总结。30'
    5.  badgerIO gc快速退出测试。
    6.  晚上和同事吃饭。
    7.  整理今天cloud computing笔记。
2.  杂
    1.  09:08-09:13 计划：修改日历。
    2.  09:39-10:01 走神，刷知乎。
    3.  12:21-13:04 午睡。
    4.  13:10-13:39 走路1900步。
3.  公众号
    1.  kiwi文章修改。
        1.  09:23-09:39 kiwi 01。
        2.  10:04 下载刚刚构建的镜像。
4.  中软
    1.  10:04-11:22 安装。
		1.	操作系统装上了。下午布署。
    2.  golang远程输入。
        1.  14:00-14:56 see"14:02 2018-03-21"
            1.  之前能用的文字识别现在不能用了。时间有点长了。如果opensuse里面也不行。暂时放弃。
            2.  站起来想了想。其实也不是特别需要textdetection。单一的背景页面用水平投影得到文字应该没问题。甚至直接识别可能都可以。
        2.  15:05-16:32 完成了配置ip地址和修改fabric文件。
            1.  (134,-1014),(1401,0)
            2.  `screencapture -R134,-1014,1267,1014 screen.jpg`
            3.  中点：(767,-507)
        3.  16:44-17:43 配置日期和时间。
            1.  promethues没有数据
                1.  vip:9090中选择expression，并execute，没有数据。同时看到提示有8小时的时间差异。
                2.  systemctl status prometheus可以看到数据。
                3.  vip:9128看metrics，可以看到数据。
                4.  发现windows和linux时间不对。windows是北京时间。linux是utc时间。造成时间没有。所以prometheus没有数据。windows修改为utc之后prometheus有数据。
        4.  extendfs之前因为/dev/sde有lvm分区失败，使用`parted /dev/sde mklabel gpt`，造成/dev/sde被锁定。重启后用`wipefs -a /dev/xxx`，擦除硬盘的signature。可以正常extendfs。
    2.  安装
        1.  CANCEL: 测试重启后TiDB是否正确。

10:08 2018-03-21
================
software skills, s3
-------------------
1.	list file
```
$ s3cmd ls
2016-12-01 04:33  s3://document
2018-01-23 08:14  s3://jmd
2018-01-23 06:57  s3://owncloud
2017-02-22 02:40  s3://test1111
$ s3cmd ls s3://document
                       DIR   s3://document/test/
...
2018-02-07 01:44 753926144   s3://document/Cluster-CentOS-07.0.x86_64-0.8.01.install.iso
2018-02-07 01:44        80   s3://document/Cluster-CentOS-07.0.x86_64-0.8.01.md5sum
2018-02-07 01:44     24317   s3://document/Cluster-CentOS-07.0.x86_64-0.8.01.packages
...
```
2.  得到host地址和是否使用了https
```
$ grep host_base ~/.s3cfg -w
host_base = los-cn-north-1.lecloudapis.com
$ grep use_https ~/.s3cfg -w
use_https = False
```
3.  所以http下载地址（如果可用）是："http://los-cn-north-1.lecloudapis.com/document/Cluster-CentOS-07.0.x86_64-0.8.01.install.iso"

10:32 2018-03-21
================
software skills, linux, X
-------------------------
安装xfce后，`startx`后，能看到xfce界面但是没有键盘和鼠标，请教wanglinzhuo，安装如下包之后可以：
```
zypper in xf86-input-keyboard
zypper in xf86-input-libinput
zypper in xf86-input-mouse
```

11:19 2018-03-21
================
software skills, linux, extract deb
-----------------------------------
<https://linux-tips.com/t/how-to-extract-deb-package/169>
```
vagrant@os74:~/teamviewer_amd64> ar x ../teamviewer_amd64.deb
vagrant@os74:~/teamviewer_amd64> ls
control.tar.gz  data.tar.xz  debian-binary
vagrant@os74:~/teamviewer_amd64> tar Jxf data.tar.xz
vagrant@os74:~/teamviewer_amd64/usr/bin> ls -l
total 4
lrwxrwxrwx 1 vagrant users 40 Feb 12 15:48 teamviewer -> /opt/teamviewer/tv_bin/script/teamviewer
```

11:49 2018-03-21
================
cloud computing

```
All values for a given key will eventually be the same after writes have stopped.
```

14:02 2018-03-21
================
1.  [Simulating mouse input programmatically in OS X](https://stackoverflow.com/a/8317003/5230736)
2.  screencapture
    1.  用"cliclick p"得到顶点。
        1.  (-191,-1080), (1729,0)
    2.  screencapture命令是x,y,w,h，所以是`screencapture -R"-191,-1080,1920,1080" 1.jpg`

09:18 2018-03-22
================
ceph, Cephalocon APAC 2018 - The future of storage直播中
----
1.  Sage Weil
    1.  最新release是Luminous.
    2.  Performance, new platform
        1.  Performance: direct control the hw.
            1.  <https://ceph.com/community/new-luminous-bluestore/>
            ```
            BlueStore is a new storage backend for Ceph.  It boasts better performance (roughly 2x for writes), full data checksumming, and built-in compression.  It is the new default storage backend for Ceph OSDs in Luminous v12.2.z and will be used by default when provisioning new OSDs with ceph-disk, ceph-deploy, and/or ceph-ansible.
            Roughly speaking, BlueStore is about twice as fast as FileStore, and performance is more consistent with a lower tail latency.
            ```
            BlueStore避免了double-write，但是如果使用FileStore的时候，已经把journal放到单独的ssd上，性能改进就没那么明显了。
            1.  limited by CPU not storage.
        2.  platform
            1.  没听懂。

10:15 2018-03-22
================
software skills, os x, cpu high
-------------------------------
今天发现macbook反应比较慢，看活动监视器看到kernel_task很高。网上搜索解决办法，有人说要重置SMC。但是我去apple官网看了看重置SMC的现象，有一条是系统负载不重但是风扇一直转。这提醒了我，是不是有cpu或内存占用比较高的。看了看，如果我操作chrome浏览器时，chrome占用率会上去。关闭大部分chrome标签。关闭不使用的virtualbox虚拟机。风扇速度就正常了。
还是个分析思路的问题。

10:20 2018-03-22
================
GTD
---
1.  10:20-10:30 计划
    1.  这两天关注ceph会议。
    2.  学习"golang.org/x/net/trace" 1h
    3.  badger flush memtable流程。2h
    4.  kiwi 01整理完成。02计划用obs和虚拟机举例。有一个物理机例子就好了。1h
    5.  keep 30分钟（还差19分钟）
    6.  午饭，刷碗，休息 2h
    7.  晚饭2h
    8.  TODO
        1.  需要一个golang代码统计每天时间分配。要不然我自己都不知道时间用哪里了。
2.  golang
    1.  10:43-10:53 go bpf. "14:10 2018-02-09"2-4-1: bpf
    2.  10:53-11:19 15:37-15:57 16:07-16:17 "golang.org/x/net/trace"
        1.  看了讨论，暂时看不懂。<https://groups.google.com/forum/#!topic/golang-nuts/Hihyzgci1EU>
3.  冬卯问，如果写一亿个文件，每个文件几十字节。写放大有多大？
4.  饭
    1.  11:19-12:27 热饭，洗手间，吃饭，休息（整理cloud computing笔记）.
5.  杂
    1.  13:21-13:35 午睡，没睡着。
    2.  13:42-13:48 记账。
    3.  14:47-15:23 洗手间。
6.  公众号
    1.  14:03-14:57 linaro速记。
7.  nentropy
    1.  16:20-16:53 17:00-17:43 ansible

12:19 2018-03-22
================
<http://highscalability.com/blog/2016/8/1/how-to-setup-a-highly-available-multi-az-cassandra-cluster-o.html>
"The Region is treated as the Datacenter, and the Availability Zone as the rack."
<http://cassandra.apache.org/doc/latest/operating/snitch.html>
overview of snitch
<https://docs.datastax.com/en/cassandra/3.0/cassandra/architecture/archSnitchEC2.html>
```
In EC2 deployments , the region name is treated as the datacenter name and availability zones are treated as racks within a datacenter. For example, if a node is in the us-east-1 region, us-east is the datacenter name and 1 is the rack location. (Racks are important for distributing replicas, but not for datacenter naming.) Because private IPs are used, this snitch does not work across multiple regions.
```

08:15 2018-03-24
================
GTD
---
1.  09:57-10:06 计划
    1.  半小时到1小时写作。起来活动10分钟。
    2.  DONE 30' 整理微软arm server。快速过一下这次所有的议题。
    3.  DONE 10' 洗衣服，扫地，擦地。
    4.  DONE 50'  hikey970 AI资料搜集和整理。
        1.  如果需要看视频，改为整理其它资料。午饭再看。
        1.  DONE 中间穿插腌鸡丁。
    5.  DONE 30' 做饭。
    6.  DONE 30' 吃饭，饭后休息。看linaro connect 视频。
    7.  DONE 40' 刷碗。看休闲视频。
    8.  30' 整理笔记完成初稿。
    9.  DONE 1h 睡觉。
    10. DONE 30' 睡醒后简单活动，做keep。
    11. 1h 完成公众号初稿。
    12. 20' 切白菜。
    13. 1h 看照片分辨率提升算法或图片拼接算法。
    14. 30' 晚上keep。
2.  杂
    1.  7:16-8:16 洗澡，洗漱，洗内衣，洗手间，刷马桶，抹油。
    2.  10:06-10:22 京东买日用品，记账。
    3.  13:41-13:50 记账
    4.  13:53-14:06 膝盖贴药膏。
    5.  14:06-14:44 午睡。被吵醒睡不着了。
    6.  14:44-14:53 刷知乎。
    7.  14:53-15:03 刷牙。
    8.  15:04-15:34 keep两周减脂塑形计划。
    9.  15:34-15:54 刷朋友圈。
    10. 20:23-20:43 揭膏药，刷牙。
    11. 20:47-21:25 keep。发呆一下。
    12. 21:25-22:26 发keep朋友圈，玩儿手机。
3.  做饭
    1.  8:16-8:46 刷碗，早餐，切青椒。
    2.  08:46-09:03 吃饭。
    3.  09:03-09:56 饭后休息。看linaro视频。刷碗。
    4.  11:23-11:58 腌制鸡丁。扫地，擦地。晾衣服。
    5.  11:58-12:35 做辣子鸡丁。
    6.  12:35-13:14 吃饭，休息（看linaro connect George keynote）
    7.  13:14-13:35 刷碗。
    8.  18:16-18:43 做白菜面条。
    9.  18:43-19:51 吃饭，看琅琊榜，刷碗。
4.  公众号
    1.  arm server
        1.  10' 快速看下所有议题题目。
            1.  10:23-10:38
        2.  20-30' 整理已有资料，看看还缺什么。
            1.  10:39-11:23 现在整体材料只缺hikey ai了。
        3.  1h hikey970 AI 半小时找资料，半小时写完。
            1.  15:55-16:48 找资料
                1.  我觉得我找的资料是不是太细了。
            2.  17:03-18:16 理一理思路，希望半小时写完初稿。
                1.  整理资料太累了。今天感觉不会继续写了。
        4.  一边看电视剧一边找照片。
            1.  19:52-20:16 寒军照片。找不到。
5.  总结
    1.  每天有些小事情，也要算时间。比如记账，买日常用品。
    2.  11:23 原本希望把ai整理下再做饭，没想到做完任务2就该做饭了。其实就是增加了一个记账和买日常用品20多分钟的时间。看来自己的时间安排还是太紧了。
    3.  15:37 目前距离完成计划还有3个小时。加油！！！
    4.  20:22 晚饭后就乏了，干不了什么。以后晚上可以试试少吃碳水化合物。
    5.  22:27 晚上除了keep没做什么。
    6.  2018-03-25 09:37 现在每天计划5个小时，基本一天就过去了。需要提高计划和实际的匹配程度。

08:32 2018-03-25
================
GTD
---
1.  日常
    1.  洗漱，洗头，煮面条，吃饭。PLAN: 1h
        1.  08:33-09:03 洗漱，洗头，煮面条，刷马桶。
        2.  09:03-09:18 吃饭。
        3.  09:18-09:32 刷碗。
    2.  PLAN: 10' 日记
        1.  09:42-09:46
    3.  11:06-11:58 买米，买啤酒。
    4.  11:58-12:41 排骨，做米饭。
    5.  13:14-13:28 热鸡丁，吃饭。
    6.  13:28-13:39 休息
    7.  13:39-13:49 洗碗，洗手间
    8.  15:56-16:34 睡觉，被电话吵醒。
    9.  16:34-16:47 洗手间，盛米饭，扫地。
    10. 18:29-18:55 keep
    11. 20:13-20:29 吃饭.
    12. 20:30-20:48 微调简历。
2.  09:34-09:42 09:46-09:48 计划
    1.  PARTIAL 30' 日记
    1.  DONE 40' 买菜
        1.  买米。
        2.  看做排骨需要什么原料：啤酒。
    2.  DONE 1h 公众号思路整理，写出初稿。
    3.  DONE 1h 做排骨，吃昨天的鸡丁。做出周一的米饭。周二去711买主食。
    4.  PARTIAL 1h 饭后休息。CANCEL 考cloud computing.
    5.  1h 午睡
    6.  1h 公众号完善细节。
    7.  1h 做晚饭(TODO 计划)。炒西红柿。
    8.  40' keep
3.  公众号
    1.  PLAN 30' 整理思路，不要陷于细节。
        1.  09:50-11:06 想大概整理下也要码不少字。。。类似宝宝了。
    2.  PLAN 20' 处理图片
        1.  12:43-13:14 写脚本把markdown中图片绝对路径转为img url，并检查图片是否在git库中。
            1.  12:51 感觉20分钟写完有困难。
            2.  13:14 饿了，有什么先吃什么。
    3.  调整格式。
        1.  13:49-15:07 看起来基本可以了。贴到公众号看看篇幅。
        2.  15:07-15:56 写差不多了。困死我了。
    4.  为发文章做准备。
        1.  17:25-18:17 发了第一篇文章。
3.  总结
    1.  09:32 燃气煮面条快一些。从起床到刷碗含饭后休息一共小时。

09:14 2018-03-26
================
公众号运营日记
--------------
1.  今天早晨一看，总用户数57人。昨日新增27个，取关19个。昨天发布的文章[ARM生态系统的盛会Linaro connect（之一）：arm64 server和端侧AI](https://mp.weixin.qq.com/s?__biz=MzI5MzcwODYxMQ==&mid=2247483722&idx=1&sn=6f4ab00336e1beb589388be5fdc8e34c&chksm=ec6cb766db1b3e70995205ec548ed120b7c4fc3d21e513ae744641966341886a77aa7482a6fd#rd)，一共有297人阅读，10个点赞。看一看阅读量超过一千的是什么时候。对我来说阅读量超过一千的文章，完全没有概念。第一次突破100阅读量的文章是[我的一次蒙特梭利幼儿园家长会](https://mp.weixin.qq.com/s?__biz=MzI5MzcwODYxMQ==&mid=2247483711&idx=1&sn=3e20719546efd189d971f3d0550c3e08&chksm=ec6cb713db1b3e0592f911a7cc1e640bf87425679be4b623658e0f1329e7e51577b1964eed9f#rd)，主要原因是孩子妈妈帮忙转发。这次阅读量到达297，主要原因是我在arm有比较多的积累，并且参加过四次linaro connect；同时文章发到了5个左右的微信群，总用户数超过1000。感觉以后如果希望多些反馈，需要发文章到合适的地方。以后每次发文章前，都搜一搜有没有可以投稿或者转发的群。

09:20 2018-03-26
================
GTD
1.  杂
    1.  09:14-09:20 公众号运营总结。
    2.  09:23-09:49 与Tom Cubie交流。see"09:42 2018-03-26"
    3.  09:50-09:56 日记。
    4.  09:56-10:11 交流，如何从驱动学习内核和arm。
    5.  11:27-11:43 热饭。
    6.  12:00-12:19 一边吃饭一边看linaro视频。
    7.  14:14-14:51 午睡.
    8.  14:51-15:00 刷牙，抹油。
    9.  15:00-15:38 散步2500步。听了cloud computing consistency, Hbase两部分。
    10. 16:21-16:27 日记.
    11. 16:27-16:40 记账，查账单。
2.  10:16-10:18 计划
    1.  30' 日记
    2.  2h badger ansible deploy.
    3.  1h 公众号下篇。
        1.  Tom Cubie. Rock960 EE
    4.  完成badgerIO memtable代码阅读。
    5.  next
        1.  ceph安装。
        1.  [Percolator中的两阶段提交实现分析](https://blog.csdn.net/maray/article/details/6978958)
3.  badger
    1.  10:34-10:53 整体计划。
        1.  DONE start monitor
        2.  add osd
            1.  和chenji讨论，osd状态可以从"nentropy/tools/admin.go"查到。但是monitor状态暂时没法查，这个需要我自己写。
        3.  start osd
        4.  create pool and pg.
    2.  10:56-11:27 add osd
        1.  为了生成osd index，看起来比较干净的做法是用jinja2.
    3.  目前badger部署中的问题。
        1.  monitor
            1.  必须是第一个启动的是leader，leader和follower要有顺序。ansible配置文件和yml需要把leader和follower分开。
            2.  monitor启动后没法查状态确认是否成功。
        2.  我还不会ansible中如何把多个monitor ip和端口拼接到一起。造成inventory里面信息冗余。
    4.  12:21-12:48 冬卯说可以用pebbledb替换ceph里面的rocksdb。
    5.  16:10-16:21 17:14-18:34 看Jiaja2怎么用。
        1.  16:21 无限走神中。
        2.  如果不指定basedir，会用当前目录。在os x上用screen启动的时候会放到home目录。
        3.  18:34 不知道如何检查add osd的"in: true"是否正确。
        4.  给冬卯看了下，冬卯觉得现在这样容易阅读，将来需要可以自动生成"inventory.ini"。对齐了下，目前主要问题是monitor没有查状态，我需要修改nentropy代码。
5.  公众号
    1.  11:42-12:00 12:19-12:21 connect 下篇。
        1.  12:21 胃不舒服，休息一会儿。
6.  Cloud computing.
    1.  15:41-16:09 整理今天的笔记。see<bjzhang.github.io/_drafts/cloud-computing-notes.md>
6.  总结
    1.  10:33 发了公众号，交流时间怎么安排很重要。

09:43 2018-03-26
================
1.  交流Tom Cubie vamrs
    1.  <http://armdevices.net/2018/03/22/99-rock960-enterprise-edition-ficus-rock960-pro-with-rk3399pro-with-npu-for-ai/>
    2.  Q: rock960EE主要想用在什么场景？AI么？
        A: IOT网关. AI相关的就是闸机，门禁类的
    3.  Q: rk3399 pro的pcie是标准的么？都测试过哪些设备？
        A: PCIE是标准的, 测试过PCIE  SSD, PCIE 转SATA. 显卡不支持

13:01 2018-03-26
================
storage, distributed, ceph
--------------------------
1.  filestore
    1.  journal
        1.  op: object transaction.
        2.  落盘。
        3.  checkpoint时flush
2.  bluestore.
    1.  冬卯说不太容易理解，暂时从ceph安装开始。

09:08 2018-03-27
================
GTD
---
1.  09:08-09:23 计划
    1.  一共需要6.5个小时，时间有点紧。
    1.  20' 贴膏药，剪指甲。
    2.  nentropy
        1.  1h ansible部署脚本。
        2.  2h 开始写monitor状态查询脚本。
    3.  公众号
        1.  1h 完善并发送connect公众号。
            1.  需要与Tom Cubie讨论。
        2.  10' 如果linaro转了我的文章，转到自己的朋友圈。
        3.  30' 发出后给mark发邮件。
    4.  生活
        1.  keep
            1.  15' 平台支撑1分钟。全身拉伸。
            2.  30' keep两周减脂塑形计划22分钟。
        2.  40' 买中午的主食：玉米，菜团子等。顺便买水果。
        3.  14:03-14:17 午睡，没睡着。
2.  公众号
    1.  PLAN: 30' 修改并与Tom Cubie确认细节。
        1.  09:27-10:08 写完了。时间关系不和Tom确认了。发出后转给他。
    2.  修改并发公众号。
        1.  12:25-13:03 一边听电视剧一边修改。
        2.  13:03-13:18 修改完成。
        4.  13:18-13:38 手机预览。已经群发。困死了。。。
        5.  13:38-14:03 刷牙，转发到微信群。发到微信小号朋友圈。
        6.  17:04 转发到96boards openhours。目前阅读人数78。
    3.  17:20-17:30 linux-4.16 notes.
3.  生活
    1.  10:08-10:41 剪指甲，贴膏药。买水果。玉米，菜团子。
    2.  11:53-12:09 吃饭.
    3.  12:09-12:25 饭后休息，吃玉米。
    4.  14:39-15:20 平板支撑1分钟，下楼散步2200步。
    5.  刷碗，
4.  nentropy
    1.  Ansible完成nentropy部署
        1.  15:46-16:17 16:24-16:34 Ansible检查脚本执行结果。
            1.  16:17 错误检查还是搞不清。现在monitor用screen启动的。所以得不到返回结果。将来加了检查monitor结果的代码才行。
            2.  16:34 困：感觉rc和$?有差别。单独写命令测试。
        2.  完成osd，pool/pg添加。
5.  总结
    1.  上午由于公司考勤制度，大家私下讨论了很久。影响不少同事工作。
    2.  今天中午没有及时睡觉，下午极累，没有完成预期任务。

17:12 2018-03-27
================
notes
-----
1.  <https://lwn.net/Articles/750153/>
    ```
    The Free Software Foundation (FSF) announced[1] the winners of the 2017 Free Software Awards during LibrePlanet. "Public Lab is a community and non-profit organization with the goal of democratizing science to address environmental issues. Their community-created tools and techniques utilize free software and low-cost devices to enable people at any level of technical skill to investigate environmental concerns." The organization received the Award for Projects of Social Benefit.  Karen Sandler, the Executive Director of the Software Freedom Conservancy, received the Award for the Advancement of Free Software.
    ```
2.  [Public Lab and Karen Sandler are 2017 Free Software Awards winners](https://www.fsf.org/news/public-lab-and-karen-sandler-are-2017-free-software-awards-winners-1)
    ```
    "Public Lab gets the tools to study and protect the world into the hands of everyone -- and since they are free (libre) software, they respect both the people who use them, and the community that depends on the results."
    ```
3.  <https://publiclab.org/>
    ```
    Public Lab is a community where you can learn how to investigate environmental concerns. Using inexpensive DIY techniques, we seek to change how people see the world in environmental, social, and political terms.
    ```

09:41 2018-03-28
================
公众号
------
1.  linkedin
    Hi, here are my articles(In Chinese) for the Linaro connect last week in HongKong. It is a wonderful conference for arm ecosystem, including Microsoft works for arm64 server, arm64 workstation and enterprise board as well as low cost debugger for arm and arm64. My blog link: http://aarch64.me/2018/03/linaro-hkg18-notes/
You could find my wechat subscription in my blog. Looking forward to your suggestion and response.
2.  to Mark Brown
Hi, Mark

I am sorry it is a long time I do not ping you. I heard from Chunyan that Akashi is working on the contiguous page hint. I hope it goes well.

Although I do not join the linaro connect last week, I found that there are lots of wonderful informations. And I wrote an article[1] in Chinese, including Microsoft works for arm64 server, arm64 workstation and enterprise board as well as low cost debugger for arm and arm64. And I put it in my wechat public account, more than 600 perple read it(More than the total number of my friend in wechat). Hope Linaro could do more wonderful things in future.

Currently, I am learning the distributed storage. I think storage is essential for cloud infrastructure. I hope I could join Linaro again in future. I like work from home.

Regards

Bamvor

[1] http://aarch64.me/2018/03/linaro-hkg18-notes/

3.  昨天发了自己的公众号下篇之后，arm gdb的maintainer说gdb里面有个别OpenOCD的补丁还没有合入。如果大家遇到GDB使用OpenOCD的问题，我可以帮忙沟通下，看看是否已知问题。
    TODO 确认社区补丁位置。等待qiyao回复。
4.  (13:58 2018-03-28)
	反馈
	1.	华为 战略规划部 畅昕：
		```
		第一篇，微软的那个演讲写的有点主线不清晰，我听完的感觉是，微软认为Arm 要发展，而且也在做很多分析和工作，未来会在网络中用，当然也存在一定的问题
		这个题目和整篇的逻辑关系有点脱离，除了这个议题，其他的内容都是讲96板子的，其实如果放在一起会更好
		其实，如果用板子当主线，然后从AI的端侧，和workstation，到服务器侧的这条线可能更清晰些。然后附上微软的作为服务器生态需求的补充
		你可以研究下ecosystem day，有些阿里和百度的议题，补充作为生态应用
		我刚才也回去找了下，阿里的我听了，主要是说对安全固件的需求，移动支付要经过ifaa认证，百度的我没听，也没看到材料
		```
    2.  华为 容器专家 马全一：
        ```
        写的没问题，就是里面用了表格，屏幕小的看起来不友好，显得比较乱。我看的时候就是关心去哪里能买到便宜的服务器来玩，读到最后也没有看到...
        图片最好，大家其实可以放大了看；购买链接贴了告诉我，我去搞台便宜的玩[捂脸]
        ```
5.  (09:56 2018-03-29)
    截止目前两篇Linaro Connect文章，朋友圈阅读量第一篇，第二篇分别是429，250人阅读；脉脉上508，302阅读量。即使我第二篇还多在朋友圈发了一次，也没有第一篇第一天的阅读量多。排除发文时机的区别。看起来两篇文章写的是有差距。也许第二篇的序言也该改进下。
6.  (11:03 2018-03-30)
    Linaro Executive VP Jill Guo:
    ```
    来自第三方的分享--曾任职于Linaro会员公司并参加过Linaro Connect的小伙伴，非常用心滴从深度合作及技术使用&受益者的角度理解、分析及分享Linaro 香港ConnectHKG18的收获点滴！
    希望有更多像这样的小伙伴们积极参与、互动、分享！大家共同推进技术的发展和创新，棒棒哒👍👍👍
    ```
7.  (10:49 2018-04-02)
    1.  从池建强老师知道微信指数。搜到这个：<https://www.zhihu.com/question/57528953>
    2.  在[清博大数据](http://www.gsdata.cn/)提交了我的公众号。
    3.  回复池老师邮件,see"11:15 2018-04-02"

8.  公众号，观察如果希望周阅读量保持在1000以上，需要怎么发文章？

9.  (17:30 2018-04-04)
    1.  今天和华华讨论了在linux story发公众号。后来看了看阅读量，感觉不是很必要的样子。如果说不发了，感觉不太好。想了想，可以换一个风格，换成综述文章发出去。

10:01 2018-03-28
================
GTD
---
1.  技术
    1.  09:30-10:01 公众号。讨论文章反馈。发送到linked和linaro Mark Brown. see"09:41 2018-03-28"
    2.  10:12-10:39 脉脉上推送消息。
2.  10:47-xxx 计划 被招行电话打断。
3.  11:15-13:57 吃饭，散步。看了一集电视剧。
4.  虚拟机问题 see"14:01 2018-03-28"
    1.  14:05-14:14 快速看下。
        1.  14:14 自己传个镜像测试。
        2.  14:55 正在往72复制。
5.  ansible
    1.  14:25: 看起来社区的建议是用脚本跑到后台。
6.  生活
    1.  19:34-20:20 做饭.
    2.  20:20-20:31 吃饭。
    3.  20:31-20:44 饭后休息。
    4.  20:44-20:54 刷碗，洗手间。
7.  公众号
    1.  20:57-20:35 写板子购买链接。
6.  总结
    1.  18:38 今天下午主要看了虚拟机问题。

14:01 2018-03-28
================
虚拟机问题
----------
1.  访问方式:
    ```
    ssh root@10.127.117.14 -p 20001
    e 75
    e 72
    ```
2.  和宁安沟通了下。我觉得包不能升级，看问题意义不大。宁安觉得已经有两台类似现象，希望看一看。
3.  libvirt提示访问硬盘或光驱permission denied. 好像和原来现象不一样？
    1.  搜索这个出错信息，发现libvirt里面没有处理，应该是qemu打印出来的。
		```
		$ grep "could not open disk image" * -R
		src/qemu/qemu_monitor_text.c:    if (strstr(reply, "could not open disk image")) {
		```
    2.  写了一个qemu-kvm脚本，qemu提示permission denied。
    3.  <https://vmsplice.net/~stefan/stefanha-tracing-summit-2014.pdf>里面提到了tracetool.py，但是看<https://github.com/qemu/qemu/blob/master/docs/devel/tracing.txt>，感觉这个不是我要的东西。
    4.  <https://fedoraproject.org/wiki/How_to_debug_Virtualization_problems>
        1.  "strace -ttt -f libvirtd"，结果，看起来就是EACCESS：
            ```
            $ grep iso strace_log_20180328
            42898 1522227352.256966 access("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", F_OK) = 0
            42898 1522227388.692318 stat("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", {st_mode=S_IFREG|0644, st_size=753926144, ...}) = 0
            42898 1522227388.692562 stat("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", {st_mode=S_IFREG|0644, st_size=753926144, ...}) = 0
            42898 1522227388.695755 setxattr("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", "security.selinux", "system_u:object_r:virt_content_t:s0", 36, 0) = 0
            42898 1522227388.696022 stat("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", {st_mode=S_IFREG|0644, st_size=753926144, ...}) = 0
            33456 1522227388.775810 open("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", O_RDONLY|O_NONBLOCK|O_CLOEXEC) = -1 EACCES (Permission denied)
            33456 1522227388.775846 open("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", O_RDONLY|O_NONBLOCK|O_CLOEXEC) = -1 EACCES (Permission denied)
            33456 1522227388.775876 stat("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", 0x7ffc59da2620) = -1 EACCES (Permission denied)
            33456 1522227388.775910 open("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", O_RDONLY|O_CLOEXEC) = -1 EACCES (Permission denied)
            ```
        2.  redhat族默认使用selinux控制虚拟机相关文件的访问权限，可以关闭试试"/etc/libvirt/qemu.conf"：
            "security_driver='none'"
            关闭以后确实就没有setxattr那句话了，但是问题一样：
            ```
            $ grep iso strace_log_20180328_1733
            48467 1522229625.997357 access("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", F_OK) = 0
            48467 1522229665.136232 stat("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", {st_mode=S_IFREG|0644, st_size=753926144, ...}) = 0
            48467 1522229665.136523 stat("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", {st_mode=S_IFREG|0644, st_size=753926144, ...}) = 0
            48467 1522229665.139938 stat("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", {st_mode=S_IFREG|0644, st_size=753926144, ...}) = 0
            49135 1522229665.217801 open("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", O_RDONLY|O_NONBLOCK|O_CLOEXEC) = -1 EACCES (Permission denied)
            49135 1522229665.217836 open("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", O_RDONLY|O_NONBLOCK|O_CLOEXEC) = -1 EACCES (Permission denied)
            49135 1522229665.217866 stat("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", 0x7fff4b7c0010) = -1 EACCES (Permission denied)
            49135 1522229665.217899 open("/root/zhangjian/Cluster-CentOS-07.0.x86_64-0.8.02.install.iso", O_RDONLY|O_CLOEXEC) = -1 EACCES (Permission denied)
            ```
        3.  移动到var目录就能启动了，和开关qemu selinux选项没关系。
    5.  75机器
        ```
        $ virsh start instance-0000022e
        error: Failed to start domain instance-0000022e
        error: Rejected: destination has a full message queue, 0 matched rules; type="method_call", sender=":1.43281" (uid=0 pid=19937 comm="/usr/lib/systemd/systemd-machined ") interface="org.freedesktop.systemd1.Manager" member="StartTransientUnit" error name="(unset)" requested_reply="0" destination="org.freedesktop.systemd1" (uid=0 pid=1 comm="/usr/lib/systemd/systemd --switched-root --system ")
        ```
    6.  和宁安讨论后回复邮件：
        ```
        Hi，all

        今天获得访问权限后，在72和75调试。虽然从业务角度看72和75问题现象类似（虚拟机无法启动），但是72上虚拟机迁走后无法复现问题，暂时不确定72和75是否同一个问题。同时，72上手工重启libvirtd，虚拟机可以启动。75上做同样操作，虚拟机仍然无法启动。

        目前的推测是该问题与虚拟化组件（libvirtd，qemu）没有直接关系。由于75上仍然上有客户的虚拟机，无法进一步做侵入式调试。等待75上虚拟机迁走后，再进一步比较72和75两个机器的差异。
        ```

23:53 2018-03-28
================
马全一
准备创业在研究kubernetes的安全方面，准备找个方向做些解决方案。
容器用arm其实是有市场，核数多，在有些特定场景，可以设计一些特定的解决方案。我觉得存储还是有搞头，网络只有玩dpdk了。加速镜像存储分发。
(TIDB): 但是独立的数据库服务很难，因为大家最终都会上云，所以发展的商业方向只有两个，为共有云厂商做数据库方案，为私有云客户做数据库产品，私有云场景还是最合适，如果有硬件配套机型就容易赚钱
（公有云）厂商都不会主动推，都是客户要求。而且要定制的硬件才能发挥，限于云厂商的架构体系。我一年前就建议他们走自己的硬件方案，但是刘奇对我的思路不太认同。

09:55 2018-03-29
================
GTD
---
1.  技术
    1.  09:55-09:59 公众号AAR
    2.  nentropy
        1.  11:00-11:11 11:34-11:53 看如何增加类似osd的参数。
            1.  看代码：`nentropy_admin -t osd -c list`
                1.  `osdHandl()`->`listOsds()`, list()
                2.  osd是在
					```
					type Osd struct {
						Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
						Addr   string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
						Weight uint64 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
						Host   string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
						Zone   string `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
						Up     bool   `protobuf:"varint,6,opt,name=up,proto3" json:"up,omitempty"`
						In     bool   `protobuf:"varint,7,opt,name=in,proto3" json:"in,omitempty"`
					}
					```
                    我要改的是"type Mon struct"
                3.  protos里面有个gen.sh
                4.  14:56-xxx 看protos目录。
                    1.  15:07: 走神看手机去了。。。
                5.  16:51-17:15 学习gRPC: see"16:53 2018-03-29"
    3.  13:11-13:19 Cloud computing笔记。
    4.  15:49-16:46 trustzone.
        1.  需求(想外包):
            1.  安全启动。
            2.  密钥。
        2.  自动驾驶两个方向
            1.  百度等公司，开发场景；
            2.  小孔所在的公司，固定场景。预计1-2可以商用。现在主要在做量产，工程化。
    5.  17:19-17:34 17:38- 公众号 kiwi 01
2.  10:00-10:14 计划
    1.  订完计划觉得时间太紧，肯定完不成。调整到8小时左右。
    2.  1h 日记，梳理自己。
    3.  2h 看nentropy如何修改，返回monitor状态。计划两天完成。
    4.  2h 吃饭，午睡。如果有精力考cloud computing week3.
    5.  1h keep健身：平板支撑1'20'' ；减脂训练至少30分钟。
    6.  2h 吃晚饭，准备第二天中午的菜：买鸡腿。做米饭；热菜。
    7.  可选
        1.  1h ansible完成基本badger部署框架。确认ansible如何查询命令返回值。
        1.  本周开始写gRPC学习笔记。
        1.  kiwi公众号修改。饭后如果不考cloud computing。可以看看。
3.  生活
    1.  10:16-10:34 日记。自省。
    2.  10:47-10:52 删除手机里面的无用应用。饭后做这个事情好一些。
    3.  11:11-11:34 小憩。
    4.  11:53-12:12 热饭。看cloud computing week3 time。
    5.  12:12-12:30 吃饭。
    6.  12:30-13:11 看电视剧，琅琊榜。“我明白，凡是人总有取舍。若我觉得没有被选择，而心生怨恨，那这世间岂不是有太多不可原谅之事。毕竟谁也没有责任以我为先。”
    7.  13:29-14:15 午睡。
    8.  14:35-14:54 刷牙，刷碗，抹油。
    9.  15:07-15:43 平板支撑，散步2400步。
    10. 18:41-19:29 做饭。
    11. 19:29-19:47 吃饭
    12. 20:11-20:40 记录菜谱。
    13. 20:45-21:19 keep两周减脂塑形计划。
    14. 21:58-22:16 洗漱。
4.  总结
    1.  时间安排中没有调节的余地。今天和前同事打了50分钟电话。以后要注意，留1h作为弹性工作。

16:53 2018-03-29
================
gRPC学习
--------
1.  gRPC
    看了如下文档，并修改了google helloworld gRPC。
    <https://grpc.io/docs/quickstart/go.html>
    <https://grpc.io/docs/guides/>
    <https://grpc.io/docs/tutorials/basic/go.html>
    <https://grpc.io/docs/guides/concepts.htmlc>
2.  protobuffers
    1.  <https://developers.google.com/protocol-buffers/docs/overview>
        1.  protocol buffer在不需要随时以文本方式查看的场景下比XML有优势，速度快，内存占用下，编程方便。
            ```
            Protocol buffers have many advantages over XML for serializing structured data. Protocol buffers:

            are simpler
            are 3 to 10 times smaller
            are 20 to 100 times faster
            are less ambiguous
            generate data access classes that are easier to use programmatically
            ```
            ```
            However, protocol buffers are not always a better solution than XML – for instance, protocol buffers would not be a good way to model a text-based document with markup (e.g. HTML), since you cannot easily interleave structure with text. In addition, XML is human-readable and human-editable; protocol buffers, at least in their native format, are not. XML is also – to some extent – self-describing. A protocol buffer is only meaningful if you have the message definition (the .proto file).
            ```
        2.  为什么需要protocol buffer？
            ```
            Protocol buffers were designed to solve many of these problems:

            New fields could be easily introduced, and intermediate servers that didn't need to inspect the data could simply parse it and pass through the data without needing to know about all the fields.
            Formats were more self-describing, and could be dealt with from a variety of languages (C++, Java, etc.)
            However, users still needed to hand-write their own parsing code.

            As the system evolved, it acquired a number of other features and uses:

            Automatically-generated serialization and deserialization code avoided the need for hand parsing.
            In addition to being used for short-lived RPC (Remote Procedure Call) requests, people started to use protocol buffers as a handy self-describing format for storing data persistently (for example, in Bigtable).
            Server RPC interfaces started to be declared as part of protocol files, with the protocol compiler generating stub classes that users could override with actual implementations of the server's interface.
            ```

09:21 2018-03-30
================
GTD
---
1.  09:21-09:31 计划
    1.  PARTIAL 20' 招行。
    2.  1h 学习gRPC.
    3.  1h 尝试增加monitor状态.
    4.  2h 午饭，午休。
    5.  30' 中午：更新gdb补丁链接到博客，公众号留言。发朋友圈。
    6.  40' 健身：平板支撑，散步
    7.  1h kiwi文档。
    8.  40' 下班路上cloud computing week3考试。
    9.  1h 心理咨询。
    10. 34' 健身: keep减脂。
2.  生活
    1.  招行
    2.  <https://gophercises.com/>: "Success is no accident. It is hard work, perseverance, learning, studying, sacrifice and most of all, love of what you are doing or learning to do." - Pele
    3.  12:04-12:21 吃饭。
    3.  12:21-12:55 饭后休息。
    4.  12:55-13:28 午睡。
    5.  13:28-13:50 刷牙，刷盘子。
    6.  15:03-15:35 健身：平板支撑，散步2400步。
3.  技术
    1.  09:50-10:10 gRPC, see"16:53 2018-03-29"
    2.  10:34-10:39 11:06-11:20 11:39-11:53 14:21-15:03 16:52-17:15 17:20 尝试改nentropy代码。
        1.  昨天看的gRPC例子改的是service。现在我增加的是Message。
        2.  出错:
            ```
            $ ./build/bin/nentropy_admin -t mon -c list -server_addr 127.0.0.1:12318
            leader is  127.0.0.1:22318
            list mons error:  rpc error: code = Unimplemented desc = unknown method MonConfig
            ```
        3.  看如何定义service。
        4.  看起来没问题，突然觉得可能nentropy不是新启动的，杀掉重新启动：
            ```
            BamvordeMacBook-Pro:nentropy bamvor$ ./build/bin/nentropy_admin -t osd -c mon -server_addr 127.0.0.1:12318
            leader is  127.0.0.1:12318
            unsupport cmd, should be add/remove/in/out
            ```
    3.  <https://linuxfoundation.smapply.io/prog/linuxcon_containercon_cloudopen_china_lc3/>
4.  总结
    1.  16:46 散步回来各种玩儿。
    2.  keep健身没做。希望对nentropy的修改也没有完成。

15:05 2018-03-31
================
GTD
---
1.  生活
    1.  14:31-14:40 卫生间卫生.
    2.  15:06-16:02 扫地，擦地；洗衬衣。
    3.  16:02-16:23 准备米饭。周一的鸡肉装袋。晾衣服，洗衣服。
    4.  16:23-16:51 记账。
    5.  17:21-17:51 keep
    6.  17:51-19:24 做饭，辣子鸡丁，热鸡肉。
    7.  19:55-20:22 做饭笔记。
        1.  20:22 都说一鼓作气。可是我真的困的不行了。
    8.  20:22-20:31 刷碗。
    9.  20:46-21:06 刷手机，看保险文章。
    10. 21:07-21:40 keep
2.  技术
    1.  14:40-15:06 aarch32, aarch64 ILP32问题讨论。

09:37 2018-04-02
================
GTD
1.  09:37-09:40 计划
    1.  DONE 回复池建强老师《卖桃者说》.
    1.  nentropy monitor状态查询必须要完成。
    1.  DONE 中午：信用卡开卡。
    1.  kiwi公众号继续整理，今天必须按最终思路把内容串起来。
    1.  晚上和孩子一起学习，背诵自己感兴趣的文章。了解数学进度。
2.  09:41-10:07 10:12-10:50 11:04-11:15 回复《卖桃者说》《产品增长总是不期而遇》。
3.  生活
    1.  10:50-11:04 取信用卡快递。
    2.  12:37-12:48 热饭。
    3.  13:03-13:21 吃饭。
    4.  13:21-14:10 饭后休息，看电视剧。查信用卡。
    5.  -15:38 散步3100步，信用卡激活。
    6.  15:38-16:47 记账。
    7.  17:00-17:13 os x备份.
    1.  下次起来把明天的菜放到冷藏室。
4.  nentropy
    1.  看周五为什么不对。如果下午4点仍然没有进展，和陈积讨论。
5.  公众号
    1.  12:08-12:37 12:48-13:03 修改综述篇的开头。
6.  总结
    1.  17:46 中午不睡觉下午真是干不了什么。明天饭后不能看电视剧了。
    2.  18:38 下班。
6.  NEXT
    1.  安装ceph
    1.  DONE 建行汇款。
    1.  大姐照片备份。google照片备份。
    1.  kiwi.
    1.  学习gRPC.

11:15 2018-04-02
================
公众号, 职业规划; 产品建议
--------------------------
池老师您好

读了您这篇文章，想到很多，下文包括三方面内容：
1.  自我介绍；
2.  极客时间的感受和建议；
3.  职业规划的问题。

## 自我介绍
我基本一直在做操作系统相关的内容，主要是Linux内核，感觉和您做的东西差别比较大，所以先从自我介绍开始吧。我从05年到现在一直记录[技术笔记][1]，中间也尝试过[博客][2]没有坚持，去年开始尝试公众号（《敏达生活》）。从08年硕士毕业已经有十年觉得还需要多一些对外可见的积累，最近对于公众号比较感兴趣，所以看了您这篇文章有些感觉。这十年经历：
1.  2008-2012（中星微） 2014-2017（华为）6年Linux kernel：从嵌入式到云端都有，基本是公共内核方向；
2.  2012-2014（SUSE）：2年虚拟化；
3.  2017.10-今（海航云）：和原来乐视的分布式存储团队学习分布式存储。

## 极客时间的感受和建议
我手机是android7（华为荣耀note8），使用app。

1.  日常用极客时间听技术新闻感觉不错。
2.  因为会用不方便看手机的时间听课，听课程有时会断开，又不能拖动播放进度，感觉很坑。
3.  极客时间的内容我觉得挺好，只是技术东西实在太广，每个人的积累和需求不同。我在想有没有可能通过技能树的方式，做更为具体的推送。
    1.  比如说我学习分布式需要了解gRPC，但是我编程语言是golang，不是java。如果订阅极客时间gRPC课程之前能提醒我需要学习gRPC，同时告诉课程中示例是java的但是代码量不大。我的体验可能会更好。
    2.  技能树可以是用户自己选择也可以是从其他地方获取，linked，脉脉。。。
4.  前段时间极客时间有个机器学习900分钟课程的推广，内容确实觉得不错，同时：
    1.  觉得要求分享朋友圈的内容有点low：
        ```
        Hi!Hi! 开工啦！我的目标是——学习 AI，升职涨薪！我已领取 900 分钟零基础入门机器学习和 TensorFlow 课程，还有新人满 30 减 30 的礼券，扫码进群免费领取，推荐你也一起来！
        ```
    2.  没有人告诉我怎么学。赠送的课程我把tensor flow的课程都听了，这个课程是从别的地方转过来的，感觉（没有去确认）课程不全。对我像我这样只是想了解下的人，确实也够了。但是如果希望具体学习的人，可能看着app上其它几个相关课程，不知道该怎么选。王天一老师的课程我听了1/3，感觉和我学的东西连不上。说到这里感觉又回到了怎么学的问题。当然如果我真的想认真学习，可以去google怎么学。**觉得怎么学这个问题，众说纷纭，可能很适合极客时间做。**

## 职业规划问题
其实我是集成电路专业，从研究生开始做Linux kernel，职业选择都是兴趣驱动。最近半年换工作去学习分布式存储一个是因为感兴趣，一个是因为老同事，熟人多，风险比较低。同时自己没有持续努力，中间有4年时间虽然外部评价还不错，也在华为升了职级，总觉得做的不扎实（可能也是因为自己不是计算机专业，有时感受到基础知识和基础能力的短板）。目前年薪60w。考虑到人脉和技术的积累，后续即使分布式存储没有继续做，回去做内核也会有机会（实际确认过，年薪保底能找到40w的工作）。但是心里总觉得不扎实。难以提高的感觉。

我的**问题**是，如果我想一辈子做技术（不考虑技术管理，技术支持，测试等），要工作到70岁，现在要怎么规划比较好呢？我自己觉得兴趣点还是在云计算的基础设施（计算，存储，网络）。眼前的话，凭着兴趣学习，暂时也没有大的风险和挑战。问题在于，技术要怎么去进一步成长呢？

目前希望把公众号内容积累好，希望用户数量和阅读量能持续增长（最近两周把用户提高到71个，15天累计阅读量1823次）。下一跳是找开源组织在家办公（有接触，作为明年的计划），这样能更好平衡技术和孩子。

谢谢

张健

[1] https://github.com/bjzhang/open_log
[2] 早期博客内容有点杂。06年开始的博客：http://aarch64.me/

17:27 2018-04-02
================
nentropy
--------
1.  今天运行没有报错但是没有看到monitor
    ```
    BamvordeMacBook-Pro:nentropy bamvor$ ./build/bin/nentropy_admin -t mon -c list -server_addr 127.0.0.1:12318
    leader is  127.0.0.1:12318
    List Mons Result:
    Epoch: 0
    ```

17:35 2018-04-02
================
1.  备份
    1.  不管复制照片或vmare虚拟机到优盘上会提示复制出错，感觉是优盘的问题。
    2.  scp复制一个834M的虚拟机磁盘文件，到了43%一定会stalled。不知道为什么。
        1.  s001, s016复制有问题。TODO最后再试一下。
            1.  s016试了两次都有问题。不知道是不是硬盘问题。
            2.  TODO 先看照片能不能都备份。
2.  重新安装系统：
    1.  <https://support.apple.com/zh-cn/HT205016>，支持列表：
        ```
        MacBook Air （13 英寸，2010 年末）  4   4
        MacBook Air （11 英寸，2010 年末）  4   4
        ```
    2.  <http://ahageek.com/blog/fully-install-windows-on-macbook/index.html>

09:09 2018-04-03
================
GTD
---
1.  生活
    1.  09:10-09:37 完成手机上没做完的事情。
    2.  09:37-09:46 冲速溶咖啡。
    3.  12:26-12:57 吃饭。
    4.  12:57-13:23 饭后休息。
    5.  14:00-14:50 午睡。
2.  09:47-09:52 计划
    1.  今天的重点是nentropy monitor修改。
    1.  **建行转账**。
    2.  公众号: applicance builder调整内容，画图说明。
    3.  中午饭后不要看电视剧，容易影响睡眠。
    4.  下午如果效率不高，去理发。
    5.  健身：平板支撑。6点准时下班到家饭后锻炼。
    6.  过体重。
3.  技术
    1.  10:00-xx 4.16 release notes
    2.  15:29- 看nentropy
        1.  不存log没法调试。暂时先不用ansible启动。
        2.  看起来是'NotifyMemberEvent'返回了。只有入口的"Call NotifyMemberEvent()"打印。

09:37 2018-04-04
================
GTD
---
1.  09:40-09:44 计划
    1.  今天感觉还可以。注意效率和时间管理。
    2.  1h nentropy：看osd添加过程。
    3.  1h nentropy：现有monitor管理方式。
    4.  1h 公众号：appliacne builder流程图。
    5.  3h 中午约了朋友。
    6.  路上休息或做cloud computing week3考试或继续听昨天的犯罪心理专家视频。
2.  nentropy
    1.  09:58-10:28 看现在是如何添加osd的。 see"10:04 2018-04-04"
3.  NEXT
    1.  我是不是该学习下如何画图表示函数调用关系？
    2.  ansible里面如何保存日志的，可以看下TiDB是怎么做的。

10:04 2018-04-04
================
nentropy
--------
1.  0404:
    1.  OsdConfig() -> HandleOsdAdd()
        1.  OsdConfig是个gRPC service. 我加了一个对应的MonConfig。但是后者只有List，没有Add。是不是这个问题呢？
    2.  那之前看的`NotifyMemberEvent()`是做什么用的？
        1.  mon/main.go
            ```
            memberlist.SetNotifyFunc(NotifyMemberEvent)
            ```
        2.  调用流程
            1.  osd/server.go, mon/main.go都会调用memberlist.Init。
                1.  需要看下什么情况会调用？是osd/monitor节点都需要么？
                    1.  看代码是每个节点都会调用。TODO 后续看日志时再对比下。
            2.  memberlist.go的Init 如果是mon会调用recvChanEvent
            3.  recvChanEvent会调用前面设置的monitor
    3.  golang
        1.  今天看到了nentropy里面定义了匿名的function并通过gorutine调用。自己需要练习一下。
2.  (09:53 2018-04-08)
    1.  放假前看到了什么已经记不清了。先看下笔记，和对应的代码。
    2.  现在还不知道osd add是怎么调用的。先看下`OsdConfigRequest_LIST`
    3.  我是不是在mon/main.go里面调用一下`MonConfigRequest_ADD`?
    4.  参考`addOsd`写代码。
    5.  但是gRPC connection是从哪里来的？
        1.  `NewMonitorClient`在monitor里面没有调用，我可以用么？
            1.  问题是我能不能用。我不知道我要和谁通信。
            2.  server是什么时候启动的？
                1.  是不是每个节点都是一个server？原来好像看过
                2.  回去看下hellowold(grpc/examples/helloworld/greeter_server/main.go)
					```
					func main() {
						lis, err := net.Listen("tcp", port)
						if err != nil {
							log.Fatalf("failed to listen: %v", err)
						}
						s := grpc.NewServer()
						pb.RegisterGreeterServer(s, &server{})
						// Register reflection service on gRPC server.
						reflection.Register(s)
						if err := s.Serve(lis); err != nil {
							log.Fatalf("failed to serve: %v", err)
						}
					}
					```
                3.  果然osd/server.go, mon/main.go都调用了grpc.NewServer.
    6.  monitor add是不是一定要用gRPC呢？是不是leader记录上就行了。
3.  (11:34 2018-04-11)
    看monitor add的流程。
4.  (10:55 2018-04-12)
    1.  看monitor add的流程。
        1.  `memberlist.Init`
            1.  "github.com/hashicorp/memberlist"，这是做terraform的公司。
            1.  JoinMemberAddr在`Config.InitConfig`里面通过DefaultConfig赋值为""。如果不是leader，会传入"addr:port".
            1.  进去看memberlist里面的代码感觉看着有点晕。
            1.  TODO "github.com/hashicorp/go-multierror"是做什么的？看起来是存多个error用的。

15:37 2018-04-04
================
arm
---
辛晓慧 虚拟化 senior
徐拯 编译器，jdk senior
Zhu Song 网络
修志龙 arm内核
姚忠伟

15:45 2018-04-04
================
分布式, 存储, 区块链
--------------------
兴义：
ipfs类似对象存储，一般只会存非结构化的数据。
没有API，就是简单的kv存储。
嗯，ipfs对标s3比较合适。跟db不一样。

15:56 2018-04-04
================
社区
----
1.  glibc
    glibc 2.28 release manager: Carlos O'Donell(20180404暂时无人反对)

10:37 2018-04-05
================
GTD
---
1.  10:37-10:43 计划
    1.  总体
        1.  似乎没有计划的一天很容易导致晚上不想睡。另外连续看电视剧，很容易耗着不睡。
        2.  今天的计划安排到9点。看看是什么结果。
    2.  DONE 50' 买菜：鸡，鸡胸。
    3.  DONE 1h 做饭，切鸡肉。鸡蛋炒饭。
    4.  DONE 1h 午饭，饭后休息，刷碗。
    5.  1h 午睡
    6.  1h keep 平板支撑，减脂。
    7.  2h 公众号
        1.  完成applicance builder 01并发送.
        1.  如果有时间在公众号上更新个人简历。
    8.  20' 晚饭直接热菜，做米饭。
    9.  1h 晚饭，饭后休息，刷碗。
        1.  休息时: cloud computing week3考试。
    9.  1h 洗澡，洗衣服。
    10. 30' 扫地，擦地。
2.  生活
    1.  10:43-10:49 洗蘑菇。
    2.  10:49-11:15 买菜
    3.  11:15-11:48 蛋炒饭，热菜。
    4.  11:48-12:04 吃饭。
    5.  12:04-12:59 饭后休息。
    6.  12:59-14:02 腌制三黄鸡。
    7.  -16:21 更新了做饭的博客。
    8.  16:24-16:40 做三黄鸡，准备米饭。
    9.  16:59-17:12 做饭博客。
    10. 17:12-18:20 睡觉
    11. 18:41-19:14 扫地擦地。
    12. 19:17-19:35 换床品。
    13. 19:40-19:55 吃饭.
    14. 19:55-21:05 饭后休息。凉床品。
    15. 21:05-21:25 keep
3.  公众号
    1.  16:45-16:58 appliance builder 01: minor fix

14:55 2018-04-05
================
智能麦克风, 麦克风阵列, zhujiahui师兄
-------------------------------------
1.  我在做麦克风，主要是单体，阵列也是硬件，不涉及软件.现在麦克风都是比较通用的，硅麦，模拟/数字都是标准接口，如果你朋友做类似语音输入的智能硬件，直接找方案厂家最方便
2.  接口有多种
    1.  模拟麦克风转I2S: frame。一般专门的麦克风芯片都是多根SDA。和标准I2S有区别
    2.  PDM: stream
3.  买智能音响开发板：科大讯飞，百度(DuerOS)
4.  师兄公司做： MEMS(麦克风） 放大器 codec。输出是I2S等接口。

07:58 2018-04-06
================
GTD
---
1.  生活
    1.  7:34-7:58 刷牙，洗手间。
    2.  7:58-8:36 洗澡.
    3.  8:36-9:02 煮面，昨天的鸡肉分份。
    4.  09:02-09:12 吃饭。
    5.  09:12-09:28 刷碗，叠被子。
    6.  09:28-10:15 没法集中精力，看见什么做什么，效率不高。
    7.  10:15-10:53 买火腿肠。去了两个店，时间略长一点。
    8.  10:54-11:40 准备午餐，晾衣服，洗衣服。
    9.  12:12-13:02 炒饭，辣子鸡丁，晾衣服。
    10. 13:02-13:18 吃饭。
    11. 13:18-14:10 饭后休息，更新做饭博客。
    12. 14:22-15:00 午睡
2.  09:32-09:38 计划
    1.  总体思路
        1.  先清理旧账，不做的旧账删除。
    1.  1h 公众号appliance builder 01 画图
    1.  DONE 20' 买火腿肠。
    1.  30' 准备午饭：鸡蛋米饭搅拌，腌制鸡丁（如果冻着用手掰开）
    1.  30' 公众号appliance builder 01修改，发送。
    1.  1h 饿的时候，炒菜，炒饭，吃饭。
    1.  40' 饭后休息，cloud computing week3.
    1.  20' 休息的时候，刷碗
    1.  1h 午睡。
    1.  1h keep
    1.  1h 日记
    1.  1h' 晚饭，煮面条，加入中午的剩饭。刷碗。
    1.  饭后离开
    1.  计划外
        1.  4.16 release notes。
        1.  badger文档整理。
        1.  gRPC学习。
3.  技术
    1.  公众号:
        1.  09:12-09:21 appliance builder 01 小修改。
    2.  11:50-12:12 找os x上visio的替代品。

09:08 2018-04-08
================
GTD
---
1.  09:09-09:18 计划
    1.  总体
        1.  白天计划是6小时，看看能不能完成。
    1.  1h 杂
        1.  DONE 公司邮箱密码。
        1.  支付宝中午扣款后，付团体资讯费用。
        1.  DONE 修复代理。
        1.  记账
        1.  日记
    1.  2h nentropy
        1.  看osd添加过程。
        1.  现有monitor管理方式。
    1.  30' ceph安装
        1.  问冬卯，用什么方式安装？
    1.  DONE 3h 午饭
        1.  50' 热饭，吃饭
        2.  40' 休息：cloud computing week3.
        3.  10' 刷碗
        4.  1h 午睡
    1.  准时下班，晚上和孩子一起学习
        1.  关注数学新的算理。
        2.  背诵新的声律启蒙。
        3.  找运动衣，运动鞋。
    1.  1h 健身
        1.  白天：平板支撑2'。
        2.  晚上饭后或者白天无法集中精力的时候。keep上肢或核心锻炼。
2.  生活
    1.  09:18-09:27 杂 记账，代理，邮箱密码问题（未解决）
    2.  09:31-09:38 日记
    3.  10:27-10:37 日记。todolist添加了一个电影。
    4.  11:36-11:57 热饭。听cloud computing week3 lamport timestamp.
    5.  12:02-12:23 吃饭
    6.  12:32-12:44 刷碗。
    7.  12:50-13:40 睡觉
3.  技术
    1.  nentropy
        1.  09:43-10:08 放假前看到了什么已经记不清了。先看下笔记，和对应的代码。
        2.  16:17-16:35 尝试修改ing。
4.  总结
    1.  和人聊天>1h，对现在的状态来说有点长，要想一想这个时间该怎么安排。直接用键盘输入效率会不会高一些？以后加了微信就方便了。
    2.  16:16 又逛游了20分钟。下午睡醒后时间怎么安排看起来很重要。
4.  NEXT
    1.  2h 理发。安排周四下班去？
    1.  gRPC学习笔记.
    1.  我是不是该学习下如何画图表示函数调用关系？
    1.  ansible里面如何保存日志的，可以看下TiDB是怎么做的。

11:06 2018-04-10
================
GTD
---
1.  生活
    1.  已经11点了，感觉今天又做不了什么事情。不过计划还是要做的。
    2.  11:52 上午彻底过去了。
    3.  13:20-14:20 午睡
    4.  今天是真什么都没做，最有意义的事情是锻炼了身体。

10:37 2018-04-11
================
GTD
---
1.  10:38-10:59 计划
    1.  突然发现这周周日到周三没有和咖啡，下周还是和咖啡试试。睡好最重要。
    2.  日记。
    3.  nentropy: list monitor.
    4.  appliance builder画图。
2.  nentropy
    1.  11:38-11:50
3.  生活
    1.  12:10- 吃饭。
    2.  13:43-14:17 午睡。
    3.  17:25-17:37 洗衣服，记账。
    4.  17:37-18:02 keep。
    5.  18:02-19:06 炒饭，炒白菜。

15:59 2018-04-11
================
存储, iops
----------
来源 振尧。
1.  青云12块盘  85000 单盘相当于  7000
1.  乐视时候单块裸盘是 150
1.  易建单块裸盘才 86。裸盘用的是fio测试。
1.  做了raid0 iops会变大

16:15 2018-04-11
================
泰坦云
------
客户要用win7做压测，jdk8，jmeter，tomcat8.
但是我们的云没有win7. windows server 2008 r2和win7内核一样。另外，这些压测工具在Linux也可以测试，不一定要用windows。

16:32 2018-04-11
================
TiDB
----
黄东旭 | PingCAP TiDB:
```
事务那块是 percolator
spanner 基本是告诉我们一个支持 txn 的 kv 系统是可以构建一个 sql database 的
证明了这个事情的可行性
```

10:15 2018-04-12
================
GTD
---
1.  杂
    1.  09:00-10:22 早餐，技术新闻杂记。
    2.  10:35-10:47 平板支撑，放松。
    3.  11:44-11:53 热饭
    4.  12:02-12:19 吃饭
    5.  12:43-13:00 刷碗。
    6.  13:21-14:07 睡觉。
2.  10:23-10:35 计划
    1.  2h nentropy monitor status
    1.  70' 午饭：热饭(cloud computing)，吃饭，休息(cloud computing)，刷碗。
    1.  1h 午睡。
    1.  1h ceph安装：使用ceph deploy。
    1.  1h 公众号 applicance builder画图。
    1.  100' keep健身。带一个保鲜盒回去，做周五中午和晚上的米饭。周五晚上在公司吃。
    1.  70' 晚饭：炒白菜，吃饭，刷碗。
    1.  OPTION
        1.  lwn weekly
            1.  <https://lwn.net/Articles/750928/>
            1.  <https://lwn.net/Articles/751061/>
            1.  <https://lwn.net/Articles/751165/>
3.  nentropy
    1.  10:53-11:20 看monitor add的流程。

15:09 2018-04-12
================
ceph
----
<https://github.com/journeymidnight/documents/blob/master/slide/ceph.html>
一致性hash

09:38 2018-04-13
================
GTD
---
1.  09:38-10:37 golang wechat helper.
    <https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_feature2d/py_matcher/py_matcher.html>
    gocv没有实现。用python测试试试。

11:24 2018-04-13
================
1.  Why use go?
    ```
    We’ve been using Go since March 2017 and it’s been a great experience so far. Go has greatly increased the productivity of our development team. Not only has it improved the speed at which we develop, it’s also 30x faster for many components of Stream.
    The performance of Go greatly influenced our architecture in a positive way. With Python we often found ourselves delegating logic to the database layer purely for performance reasons. The high performance of Go gave us more flexibility in terms of architecture. This led to a huge simplification of our infrastructure and a dramatic improvement of latency. For instance, we saw a 10 to 1 reduction in web-server count thanks to the lower memory and CPU usage for the same number of requests.
    ```
2.  Development a new distributed kv:
    ```
    When building Stream 2.0 we decided to go for a different approach and build Keevo. Keevo is our in-house key-value store built upon RocksDB, gRPC and Raft.
    Keevo implements the Raft consensus algorithm using Hashicorp’s Go implementation.
    ```

14:29 2018-04-13
================
内核
----
1.  谢宝友:
    ```
    昨天提到的孤儿节点里面，link-count>0的情况。
    有一种情况是direct-io引起的
    direct-io为了避免走JBD日志，会将自己先挂到孤儿链表中，完全成功后再摘除。
    在摘除前如果崩溃，就会形成这种情况。
    可以参见ext3_direct_io函数。
    ```
2.  问
    ```
    @码农谢宝友 可不可能，当inode被删除，但它还打开着，有fd->struct file->inode(deleted)，进程又创建一个到它的nlink ?
    ```
3.  李晓辉
    ```
    你是说对文件 direct_io时，挂到孤儿链表上时，该文件的link_count还大于0的。然后此时崩溃后，重启，就会出现ext4_孤儿链表_cleanup 里面的对文件截断操作啊。
    ```
4.  谢宝友
    ```
    direct-io里面，如果发现文件变长，就把自己挂到孤儿链表中，等写完了以后，从孤儿链表中摘除。如果不幸中途崩溃了，就在recorvy的时候执行截断操作。
    ```

21:50 2018-04-13
================
张健，现任海航集团资深架构师。先后在SUSE，华为，海航集团等公司云计算部门工作，在云计算领域有10年的实践经验。曾经在旧金山，柏林，北京和布达佩斯等地发表演讲。

08:57 2018-04-14
================
GTD
---
1.  生活
    1.  8:01-8:57 做粥，刷厕所，洗漱，洗澡，抹油。
    2.  09:18-09:38 杂
    3.  10:50-11:28 去公司。
    4.  11:28-11:33 拿东西，剪指甲。
    5.  11:33-12:26 回家，买菜。
    6.  12:26-12:52 白菜粉丝。
    7.  12:52-13:07 吃饭
    8.  13:07-13:21 饭后休息：记账。
    9.  13:56-15:05 聊天。
    10. 15:05-16:05 午睡。
    11. 16:05-16:19 洗漱。
    12. 16:20-18:38 做饭，带鱼，香菇牛肉片。
    13. 18:38-19:08 吃饭。cloud computing Gnutella.
    14. 21:10-21:40 健身。
    15. 21:46-22:01 洗漱
2.  09:02-09:18 计划
    1.  DONE 40' 买土豆（6个），肉（切丝），香葱。
        周六到周三一共7次正餐，周末做出8次的菜。
        1.  带鱼x2
        1.  白菜x3
        1.  羊肉汤土豆x3
        1.  香菇x2
    1.  4h 饭
        1.  DONE 1.5h 带鱼
        2.  DONE 30' 白菜
        3.  DONE 60' 吃饭x2
        4.  60' 饭后休息 间隙可以考虑cloud computing考试.
    1.  DONE 1h 午睡
    1.  DONE 90' 回公司拿电脑充电器，剪指甲。
        1.  CANCEL 路上听武志红心理学，极客时间，cloud computing。
            1.  实际听的极客时间：区块链。
    1.  1h 周五家长会快速总结。
    1.  80' cloud computing week3, week4 考试。如果没考过，再去有重点的听。
        1.  今天只能利用饭后休息时间做，不能单独占用时间。
    1.  2h applicance builder今天必须完成。
    1.  DONE 20' 和私教讨论今天适合做什么运动。明天几点训练
        1.  最好利用去公司的间隙，不要单独占用时间。
    1.  DONE 30' 健身
        1.  平板支撑两组每次1分钟。
        2.  臀桥两组每次2分钟。
    1.  30' 擦地。
3.  公众号
    1.  09:41-09:57 10:08-10:25 周五白玉萍老师分享总结。
4.  学习
    1.  13:21-13:41 week3，还是没过，重新听Gnutella和Chord。

08:10 2018-04-15
================
GTD
---
1.  生活
    1.  08:10-08:30 热粥，洗漱。
    2.  08:30-08:51 吃饭，刷碗。
    3.  08:51-09:15 洗手间。
    4.  -10:38-11:25 看公众号。
    5.  11:25-12:36 炖土豆，炒土豆，热菜。
    6.  12:36-12:53 转载.
    7.  13:27-14:30 午睡。
2.  TODO
    1.  DONE 午餐：羊蝎子汤土豆。
    1.  DONE 问教练吃什么比较合适。带饭回公园五号，如果公园五号没有晚饭，吃自己的饭。
    1.  CANCEL 擦地。

10:10 2018-04-16
================
GTD
---
1.  10:10-10:28 计划
    1.  杂
        1.  CANCEL 买咖啡。周日或周一买。
    2.  午饭：
        1.  DONE 20' 热饭
        2.  DONE 20' 吃饭
        3.  30' 休息 cloud computing week 3 Gnutella, Chord.
        4.  1h 午睡
    3.  技术
        1.  1h nentropy monitor
        1.  30' 冬卯ceph复习。
        1.  OPTION 1h ceph安装。
    4.  健身
        1.  80' 路程 cloud computing week4.
        1.  健身 30'
        1.  健身后简单吃一些。
    5.  公众号
        1.  40' 编辑转载文章并与作者确认。
    6.  晚上饿了，吃水果。
2.  生活
    1.  10:46-10:57 日记
    2.  12:03-12:26 吃饭。
    3.  12:32-12:49 刷牙，刷碗。
    4.  12:58-13:33 午睡。

09:15 2018-04-17
================
GTD
---
1.  生活
    1.  09:10-09:21-09:25 日记。
    2.  13:30-14:20 午睡
2.  计划
    1.  DONE: 请假。
    2.  看昨天家军说的问题。
    3.  nentropty
    4.  公众号：转载或者修改appliance builder。
3.  技术
    1.  libvirt和qemu匹配问题。
        1.  等家军把ssh key帮我加上。
    2.  一体机本地cache

11:06 2018-04-17
================
一体机, 本地cache
-----------------
1.  目的：
    1.  提供本地cache
        1.  真cache，并不是打标用的。
    2.  不考虑cache的ha，否则考虑cache的一致性等于在ceph上面单独再自己做一致性。
        1.  竟品可能会提供类似drbd的mirror功能。但是这样如果本地ssd挂了，还要去备份的机器读取。
    3.  要考虑迁移，迁移前flush bcache block device，然后迁移。
1.  计划
    1.  1-2个月完成。
1.  方案
    1.  用什么cache。
    2.  在哪里做？
        1.  可以在catkeeper里面或libvirt里面做。
            1.  TODO 看下libvirt对于storage的管理。
1.  涉及到kernel rbd，bcache。
    1.  和qemu rbd的区别是这次要用kernel rbd。看k8s是怎么用kernel rbd的。
        1.  [RBD KERNEL OBJECT OPERATIONS](http://docs.ceph.com/docs/argonaut/rbd/rbd-ko/)
        1.  [Use RBD on a client](https://www.sebastien-han.fr/blog/2012/06/24/use-rbd-on-a-client/) 这是2012年的文章，可能不适用了。"Warning: Don’t use rbd kernel driver on the osd server. Perhaps it will freeze the rbd client and your osd server."
        1.  <libvirt/src/storage/storage_backend_rbd.c>
    2.  bcache：
        1.  bcache按bcache block device flush。这个flush是否和具体rbd设备绑定的？
        1.  lvmcache会修改物理盘，bcache会不会修改？
        1.  TODO bcache设计和使用。
            1.  <https://wiki.archlinux.org/index.php/Bcache>
        1.  bcache和rbd的配合。
            1.  bcache对backing device和caching device都需要格式化。也就是说写入了meta data？
            1.  看起来bcache不用cache设备时时可以的：
				```
				If you're booting up and your cache device is gone and never coming back, you
				can force run the backing device::

				  echo 1 > /sys/block/sdb/bcache/running

				(You need to use /sys/block/sdb (or whatever your backing device is called), not
				/sys/block/bcache0, because bcache0 doesn't exist yet. If you're using a
				partition, the bcache directory would be at /sys/block/sdb/sdb2/bcache)
				```
            1.  这个没有bcache时recovery的方法是否可以用于live migration?
				```
				D) Recovering data without bcache:

				If bcache is not available in the kernel, a filesystem on the backing
				device is still available at an 8KiB offset. So either via a loopdev
				of the backing device created with --offset 8K, or any value defined by
				--data-offset when you originally formatted bcache with `make-bcache`.

				For example::

					losetup -o 8192 /dev/loop0 /dev/your_bcache_backing_dev

				This should present your unmodified backing device data in /dev/loop0
				```
            1.  是否影响做migration?
				1.	实际试下bcache，在不同虚拟机挂载，看看效果。
                    1.  建立opensuse虚拟机挂载两个虚拟机磁盘实验。
						```
						[bamvor@ceph-bj-rabbit-10-72-84-158 zhangjian]$ sudo virsh vol-create-as zhangjian bcache-test-cache-device.raw --capacity 500G --allocation 0
						Vol bcache-test-cache-device.raw created

						[bamvor@ceph-bj-rabbit-10-72-84-158 zhangjian]$ sudo virsh vol-info --pool zhangjian bcache-test-cache-device.raw
						Name:           bcache-test-cache-device.raw
						Type:           file
						Capacity:       500.00 GiB
						Allocation:     0.00 B

						[bamvor@ceph-bj-rabbit-10-72-84-158 zhangjian]$ sudo virsh vol-create-as zhangjian bcache-test-backing-device.raw --capacity 8T --allocation 0
						Vol bcache-test-backing-device.raw created

						[bamvor@ceph-bj-rabbit-10-72-84-158 zhangjian]$ sudo virsh vol-info --pool zhangjian bcache-test-backing-device.raw
						Name:           bcache-test-backing-device.raw
						Type:           file
						Capacity:       8.00 TiB
						Allocation:     0.00 B
						```
                        attach
						```
						sudo virsh attach-disk 04_opensuse42.3 $PWD/bcache-test-cache-device.raw vdb --current
						sudo virsh attach-disk 04_opensuse42.3 $PWD/bcache-test-backing-device.raw vdc --current
						```
                    1.	感觉不应该建立虚拟机磁盘，应该是建立物理磁盘，然后attach到虚拟机。但是这样测试migration么？好像不行。所以用虚拟磁盘测试migration应该没问题。
                    1.  安装bcache-tools，TODO：有没有capi?
                        1.  `sudo zypper in bcache-tools`
                    1.  format
						```
						vagrant@os17:~> sudo make-bcache -C /dev/vdb
						UUID:                   c6fedb4f-88a4-4cbf-90a3-7ee57fa3813f
						Set UUID:               8465db04-38f1-4858-a3d6-a93414e232ec
						version:                0
						nbuckets:               1024000
						block_size:             1
						bucket_size:            1024
						nr_in_set:              1
						nr_this_dev:            0
						first_bucket:           1
						vagrant@os17:~> sudo make-bcache -B /dev/vdc
						UUID:                   5ad92b29-9f6f-4686-8bc1-7b24a615e01d
						Set UUID:               d70a680f-9ae0-49e5-a6af-8a58ce44236c
						version:                1
						block_size:             1
						data_offset:            16
						```
						不知道为什么backing device有个disk。但是caching device没有。
						```
						vagrant@os17:~> lsblk
						NAME      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
						...
						vdb       254:16   0  500G  0 disk
						vdc       254:32   0    8T  0 disk
						└─bcache0 253:0    0    8T  0 disk
						```
                        这里要注意参数需要和具体设备一致：TODO
						```
						The block size should match the backing devices sector size which will usually be either 512 or 4k. The bucket size should match the erase block size of the caching device with the intent of reducing write amplification. For example, using a HDD with 4k sectors and an SSD with an erase block size of 2MB this command would look like

					    # make-bcache --block 4k --bucket 2M -C /dev/sdy2
						```
                        ```
						vagrant@os17:~> sudo bcache-super-show /dev/vdb
						sb.magic                ok
						sb.first_sector         8 [match]
						sb.csum                 47F830613D1AAC15 [match]
						sb.version              3 [cache device]

						dev.label               (empty)
						dev.uuid                c6fedb4f-88a4-4cbf-90a3-7ee57fa3813f
						dev.sectors_per_block   1
						dev.sectors_per_bucket  1024
						dev.cache.first_sector  1024
						dev.cache.cache_sectors 1048574976
						dev.cache.total_sectors 1048576000
						dev.cache.ordered       yes
						dev.cache.discard       no
						dev.cache.pos           0
						dev.cache.replacement   0 [lru]

						cset.uuid               8465db04-38f1-4858-a3d6-a93414e232ec
						```
					1.	attach
						```
						vagrant@os17:~> su -c 'echo 8465db04-38f1-4858-a3d6-a93414e232ec > /sys/block/bcache0/bcache/attach'
						```
                        attach之后，caching device有个和backing device大小一样的盘(type是disk不是part)。
						```
						os17:/sys/block/bcache0/bcache # lsblk
						NAME      MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
						...
						vdb       254:16   0  500G  0 disk
						└─bcache0 253:0    0    8T  0 disk
						vdc       254:32   0    8T  0 disk
						└─bcache0 253:0    0    8T  0 disk
						```
					1.	cache mode:
						```
						os17:/sys/block/bcache0/bcache # echo writeback > /sys/block/bcache0/bcache/cache_mode
						os17:/sys/block/bcache0/bcache # cat cache_mode
						writethrough [writeback] writearound none
						```
                    1.  关闭writeback后，state仍然是dirty。
						```
						os17:/sys/block/bcache0/bcache # echo 0 > writeback_percent
						os17:/sys/block/bcache0/bcache # cat state
						dirty
						```
                        过了不知多久，state变成clean了。
                    1.  实际测试，backing device/dev/bcache0可以直接mount。
                    1.  在另一个vm测试。同样的backing device，新的cache device。
                        1.  正常来说udev应该可以自动帮忙注册/dev/bcacheX，在新的虚拟机插入后，没有自动认出来，尝试手动注册：`echo /dev/sdc > /sys/fs/bcache/register`。
							```
							vagrant@os25:~> su -c 'echo /dev/vdc > /sys/fs/bcache/register'
							Password:
							bash: /sys/fs/bcache/register: No such file or directory
							vagrant@os25:~> sudo modprobe bcache
							vagrant@os25:~> lsmod |grep bcache
							bcache                245760  0
							vagrant@os25:~> su -c 'echo /dev/vdc > /sys/fs/bcache/register'
							Password:
							```
                        1.  注册后，不论是直接mount还是加了cache mount，都可以。
                        1.  detach cache, detach disk后再回到原本的虚拟机04看下。
                            1.  内容是对的。同时发现vm04里面bcache编号变成了/dev/bcache1.
                    1.  TODO
                        1.  看如何flush数据。
                        2.  测试换虚拟机和cache device后，是否可以使用。
                        1.  bcache sys里面的信息是在kernel里面还是在bcache的设备里面？
                            1.  因为发现backing device attach到另一个虚拟机，cachemode也是writeback。不知道是默认就是writeback还是因为在vm04修改的结果。
                        1.  libvirt caching device.
                        1.  部署ceph。测试rbd+本地cache。

1.  杂
    1.  ceph社区现在已经不做ssd cache了。bluestore里面用了ssd cache。
1.  TODO
    1.  bcache设备的管理，例如不会重名。
    1.  bcache flush是按时间还是按数据比例？
        1.  如果按数据比例有没有影响？
            1.  也没有影响。只是按实际flush，可能能少丢一些数据。
    1.  cache机制的错误处理。
    1.  bcache performance tuning。
    1.  冬卯：
        1.  不用lvm的原因：
            1.  lvm vg重名。bamvor：解决办法：libvirt用uuid做vg的名字。
            2.  bcache可能性能好一些。ceph社区说的。
                1.  bluestore: nvme, ssd, hdd.
                    TODO需要看了bluestore再向冬卯请假。
        1.  bcache: transaction, b tree, 空闲空间管理。
        1.  怎么把rbd给kernel?

10:09 2018-04-18
================
GTD
---
1.  生活
    1.  09:00-10:09 早餐，吃饭，朋友圈。
        1.  有些有用的信息，但是并没有及时记录。每天有多少时间吸收杂学比较好？
    2.  18:15-18:48 吃饭，休息。
2.  技术
    1.  中软讨论。TODO 整理讨论内容。
    2.  一体机本地cache。
        1.  17:21-17:30 看bcache内核文档
        1.  17:30-17:45 测试bcache是否可以live migration。
        1.  bcache和rbd的配合。
        2.  libvirt storage接口。

09:23 2018-04-19
================
GTD
---
1.  09:23-09:25 计划
    1.  DONE 30' 教育的思考。
    2.  DONE 总结家军调试过程。
    3.  一体机本地cache。
    4.  DONE 80'+30' 健身
    5.  1.5h 午饭，午睡
    6.  DONE OPTION
        1.  2h 跑步
2.  生活
    1.  09:36-09:58 教育
    1.  18:00-18:17 热饭
    1.  18:20-18:32 吃饭。
    1.  18:36-18:55 刷碗。
3.  技术
    1.  10:02-10:16 libvirt升级问题。
    1.  -11:02 linux 4.17 merge window 2 quick notes.
    1.  11:31-11:58 17:14-18:00 19:20-20:03 一体机本地cache see"11:06 2018-04-17"
    1.  TODO
        1.  augtools: 'Defaults env_keep += "http_proxy https_proxy"'
            ref<https://gist.github.com/anuaimi/4074714>
4.  总结
    1.  今天的状态比昨天好一些。到了晚上8点，并不觉得累。只是脖子疼了。

10:03 2018-04-19
================
tech, virtualization, libvirt, qemu
-----------------------------------
原始问题是p2v，需要支持uefi。运维同学升级libvirt和qemu后，出错。搜索相关出错信息，可以找到下面bug。
[Bug 1450317 - "cpu-baseline" command doesn't deal with "cmt" fea-ture](https://bugzilla.redhat.com/show_bug.cgi?id=1450317)
但是升级后仍然有问题，根据下面bug升级后解决。
[Bug 1525337 - virt-manager shouldn't copy host cpu capabilities directly with setting 'copy host CPU definition'](https://bugzilla.redhat.com/show_bug.cgi?id=1525337)
之所以会出问题，应该是用了intel比较新的cpu，新cpu的特性在vm中没有完全支持。不升级libvirt情况下，libvirt和qemu都不认识新的cpu，实际是当成相对旧的cpu使用的。在执行live migration时要求源和目的cpu feature完全一致。
cpu型号：2683和2650. "新的型号多了一个 monitor & ida"
```
编辑 /usr/share/libvirt/cpu_map.xml, 去掉新版的qemu不支持的 cmt, mbm_total, mbm_local
```

10:32 2018-04-19
================
software skill, sync, google drive, icloud
------------------------------------------
因为app store上没法下载软件，注销再登陆设置icloud账户后解决。但是google drive无法同步macbook的文稿的内容。后来发现是icloud没有打开文稿同步的功能。看起来即使能看到要同步的Documents目录，如果icloud里面没有选择同步文稿，也不行。

10:34 2018-04-20
================
1.  xxx
    1.  infrastructure as code
    2.  micro servers. service meshes.
    3.  rethink enterprise architecture
2.  俞军

1.  lvm vg重名。
2.  bcache可能性能好一些。ceph社区说的。
    1.  bluestore: nvme, ssd, hdd.
        TODO.
3.  bcache: transaction, b tree, 空闲空间管理。
4.  怎么把rbd给kernel?

