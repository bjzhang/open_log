
09:41 2018-01-12
----------------
TODO
1.  children english dictionary
    1. https://www.oxforddictionaries.com/schools
2.  nas
3.  deploy tools.

10:36 2018-01-14
----------------
GTD
---
1.  plan
    1.  跑动ceph镜像构建部署全流程。
    2.  大姐路由器。
    3.  和凡一一起买字典？

00:04 2018-01-27
----------------
hikey960, Linux
---------------
1.  烧写debian
    第一次烧写没成功，似乎是因为hikey_idt和config以及二进制没有在同一个目录，也许hikey_idt去了上一个目录找二进制。
    我烧写时候，大约几秒钟会完成。如果时间太长可能是是有异常。尤其是ttyUSB0长期不动的时候。
    todo：strace hikey_idt，看是否和我怀疑的一样。
    https://github.com/96boards-hikey/tools-images-hikey960.git
    tools-images-hikey960/install-prebuilt-uefi/README.md
    tools-images-hikey960/install-prebuilt-uefi/hikey960-efi-prebuilt.sh

    ./hikey_idt -c config


    echo "Sleeping till device resets... zzz"

    打印上面内容，另一篇文档写系统重起时，有10s的timeout，按f后就可以用fastboot继续烧写。
    todo：确定不按f是否可以用。

    fastboot flash ptable prm_ptable.img
    fastboot flash xloader sec_xloader.img
    fastboot flash fastboot l-loader.bin
    fastboot flash fip fip.bin

烧写boot uefi img和desktop img。
fastboot flash boot boot-0.0+AUTOINC+ba45819943-ea12986b87-r0-hikey960-20180126071619-127.uefi.img
fastboot flash system rpb-desktop-image-lava-hikey960-20180126071619-127.rootfs.img
启动说找不到rootfs，看到grub cfg的root在sdd10，不知道是不是写错了。
rpb-console-image-lava-hikey960-20180126071619-127.rootfs.img 成功。


    [自己改写ptable，生成ptable.img](https://github.com/96boards-hikey/partition-table-tool/blob/master/efipartition.c)


    <https://github.com/96boards-hikey/tools-images-hikey960>

    <http://snapshots.linaro.org/reference-platform/embedded/master/hikey960/latest/rpb/>

2.  烧写后lspci看不到任何设备。
    1.  找资料
        1.  [HiKey960のM.2コネクタがSSDを認識するようになった](http://raphine.hatenablog.com/entry/2017/12/29/031501)
        2.  [HiKey960のM.2コネクタはSSDを認識するのだろうか＜その１＞](http://raphine.hatenablog.com/entry/2018/01/10/205559)
        3.  [HiKey960上でM.2 SSDの性能をゆるーく測定した。](http://raphine.hatenablog.com/entry/2018/01/10/210640)
    2.  根据资料1.1，找到[linaro 庄皓坚]的commit(https://github.com/ARM-software/arm-trusted-firmware/pull/1216/commits)，看下主线的git日志，已经合入了。从[hikey960-efi-prebuilt.sh](https://github.com/96boards-hikey/tools-images-hikey960/blob/master/install-prebuilt-uefi/hikey960-efi-prebuilt.sh)找到日构建的连接，目前最新版本是[51](http://builds.96boards.org/snapshots/reference-platform/components/uefi-staging/51/hikey960/release/)。为了简单也可以每次看latest目录。

3.	(23:00 2018-02-07)
	1.	自己编译了内核仍然不行。有点怀疑是uefi问题。
		1.	`dmesg |grep pci -i`:
			```
			root@hikey960:~# dmesg |grep pci -i
			[    0.000000]     PCI I/O : 0xffff7dfffee00000 - 0xffff7dffffe00000   (    16 MB)
			[    0.293605] PCI: CLS 0 bytes, default 128
			[    0.401360] ehci-pci: EHCI PCI platform driver
			[    0.401619] ohci-pci: OHCI PCI platform driver
			[    0.691484] tcpci_timer_init : init OK
			[    0.768787] [E/hisi_pd] tcpci_disable_vbus_control: !!!++++++++
			```
		2.	加打印：
			```
			root@hikey960:~# dmesg | grep pci -i
			[    0.000000]     PCI I/O : 0xffff7dfffee00000 - 0xffff7dffffe00000   (    16 MB)
			[    0.293994] PCI: CLS 0 bytes, default 128
			[    0.313790] kirin-pcie f4000000.pcie: kirin_pcie_probe start
			[    0.401700] ehci-pci: EHCI PCI platform driver
			[    0.401960] ohci-pci: OHCI PCI platform driver
			[    0.714180] tcpci_timer_init : init OK
			[    0.789097] [E/hisi_pd] tcpci_disable_vbus_control: !!!++++++++
			```

09:41 2018-02-03
----------------
GTD
---
1.  7:30醒，没睡着。8:05起床，做鸡蛋羹，洗漱，吃早餐 -9:05
2.  9:06-9:36 下楼散步，本来想跑步，觉得膝盖不是很舒服，取消。
3.  9:36-10:10 回家，写GTD。整理本周支出。感觉困。
4.  10:10-10:58 keep。膝关节，俯卧撑。
5.  10:59-11:06 收衣服，洗衣服
6.  11:06-16:44 午饭，羊蝎子准备，泡点香菇。吃饭。台式机升级完成，配置proxy，cow。准备晚餐。
7.  16:44-17:44 睡觉30‘，刷牙，合并open_log。
8.  17:45- 羊蝎子调味。
9.  hikey960 20'

09:44 2018-02-04
----------------
GTD
---
1.  8:00-9:46 起床。hikey960资料。洗漱。吃干拌面。
2.  9:45-10:05 洗碗，休息10’。
3.  10:05-11:41 饭后散步，跑前热身，分阶段燃脂跑（膝盖不舒服，基本没有快跑），跑后拉伸。
3.  11:41-13:20 做午饭（高压锅做香菇鸡腿，蒸米饭），准备早餐（菠菜鸡蛋全麦饼），吃麻酱，蜂蜜。
4.  13:20- 等待饭菜熟。吃饭。睡觉（约一个小时）
5.  16:27-17:13 电饭锅做米饭，擦厨房地，擦屋里的地。
6.  17:13-17:43 聊天，买蟑螂药。
7.  17:43-18:14 看朋友圈，看17年就业去向。
8.  18:14-18:49 热菜。香菇鸡腿汤饭。
9.  18:49-19:06 吃饭。
4.  wish list
    1.  健身。（周六周日完成，）
    1.  hikey960 NAS性能测试。
        1.  板子下周可能要还。最好周末有结果。
        2.  m.2认不出来。uefi, kernel.
        3.  性能测试。
            1.  m.2
            2.  wlan.
            3.  1000M usb lan.
    1.  读英语。
        1.  看下复习所有不会的题目需要多长时间。
        2.  看托业对应的章节。
    3.  mark邮件?
    4.  公众号。30'
    5.  读论文，看分布式课程。
    6.  准备羊蝎子火锅（状态不好的时候做）
        1.  炖羊蝎子。
        2.  摘菜。

13:21 2018-02-03
----------------
Software skill, distribution, opensuse
--------------------------------------
[libreoffice](http://download.opensuse.org/repositories/LibreOffice:/5.4/openSUSE_Leap_42.3/LibreOffice:5.4.repo)
[packman](http://mirrors.hust.edu.cn/packman/suse/openSUSE_Leap_42.3/)

[浏览器插件](https://opensuse-guide.ustclug.org/browserplugins.php>
`zypper addrepo -f http://packman.inode.at/suse/openSUSE_Leap_42.3/ packman`
`zypper install freshplayerplugin`
`zypper install xine-browser-plugin`
[Microsoft Silverlight](http://software.opensuse.org/package/pipelight)未安装。

[多媒体解码器](https://opensuse-guide.ustclug.org/codecs.php)
`zypper addrepo -f http://opensuse-guide.org/repo/openSUSE_Leap_42.3/ dvd`
`zypper install ffmpeg lame gstreamer-plugins-bad gstreamer-plugins-ugly gstreamer-plugins-ugly-orig-addon gstreamer-plugins-libav libdvdcss2`
执行下面命令切换所有相关软件包到packman。
`zypper dup --from http://packman.inode.at/suse/openSUSE_Leap_42.3/`

19:35 2018-02-05
----------------
ref<https://github.com/shadowsocks/shadowsocks/issues/646>
```
ansible@localhost:~/ss> sudo pip install -U git+https://github.com/shadowsocks/shadowsocks.git@2.9.1
Collecting git+https://github.com/shadowsocks/shadowsocks.git@2.9.1
  Cloning https://github.com/shadowsocks/shadowsocks.git (to 2.9.1) to /tmp/pip-usy75n86-build
Installing collected packages: shadowsocks
  Found existing installation: shadowsocks 2.8.2
    Uninstalling shadowsocks-2.8.2:
      Successfully uninstalled shadowsocks-2.8.2
  Running setup.py install for shadowsocks ... done
Successfully installed shadowsocks-2.9.1
```

21:55 2018-02-10
----------------
资源
----
1.	cubietruck
	```
	2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000
		link/ether 02:53:04:41:84:79 brd ff:ff:ff:ff:ff:ff
	3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
		link/ether 00:22:f4:fb:55:be brd ff:ff:ff:ff:ff:ff
	```

22:50 2018-02-10
----------------
internet sharing
----------------
```
yast2 firewall interfaces add interface=eth1 zone=internal
yast2 firewall interfaces add interface=wlan0 zone=external
yast2 firewall masquerade enable
```

15:13 2018-02-14
----------------
GTD
---
1.	游戏：勇者斗恶龙6。14:33-15:05 18:21-19:18
2.  杂：
	1.	日记：15:13-15:17
	2.	计划. 15:20-15:23 刚写完计划就觉得困了。
	3.	睡觉。15:30-16:00
	4.	keep. 16:00-16:27
	5.	做晚饭，整理原来做的菜，记录最近两天的食谱。16:30-17:34
	6.	吃饭，洗完：17:47-18:21
	7.	洗漱. 19:36-19:56
	8.	打电话，看readhub，发呆。19:56-20:14
3.	技术学习计划
	1.	Linaro的akashi联系我，说他在看我之前做的cont page hint。这个事情确实没事做，果断放弃了。
	2.	有个想法把每次以时间为单位记录的内容都放在badgerIO里面。从evernote和git提取并合并信息。重点是1和2.
		1.	go语言学习。
		2.	keyvalue数据库学习: [badgerIO](https://blog.dgraph.io/post/badger/)。20:14-20:49
			1.	[log structured merge (LSM)](https://en.wikipedia.org/wiki/Log-structured_merge-tree)
			2.	badger IO performance
				```
				Based on benchmarks, Badger is at least 3.5x faster than RocksDB when doing random reads. For value sizes between 128B to 16KB, data loading is 0.86x - 14x faster compared to RocksDB, with Badger gaining significant ground as value size increases. On the flip side, Badger is currently slower for range key-value iteration, but that has a lot of room for optimization.
				```
			3.	rocksDB用C++写的，使用Cgo转换会有潜在的问题。但是为什么TiKV rust调用C++没问题呢？语言的差异么？
			4.	LSM会有读放大和写放大。Badger使用LSM保存Key，value log保存value。
			5.	Guiding principles
				*	Write it purely in Go language.
				*	Use the latest research to build the fastest key-value store.
				*	Keep it simple, stupid.
				*	SSD-centric design.
			6.	badger不把key value在一起保存。只是把(value log中)value的指针和key放在一起。
			7.	performance: Range iteration latency慢的比较多，文章认为设计上badger会比rocksdb慢一点，但不应该这么多。需要进一步调查。
			8.	[benchmark](https://github.com/dgraph-io/badger-bench.git)
				1.	TODO: 参考badgerIO benchmark写最简单的go代码get, set, iteration.
		3.	github和evernote api学习。
4.	消化后看golang或keyvalue数据库。
	1.	golang 19:19-19:36
4.	春节后计划
	1.  Linaro的板子春节还。
	2.	问笔记本报销什么时候下来。

19:25 2018-02-14
----------------
<https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/04.2.md>
```
当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。

（大写字母可以使用任何 Unicode 编码的字符，比如希腊文，不仅仅是 ASCII 码中的大写字母）。
```

08:08 2018-02-15
----------------
GTD
---
1.	杂
	1.	7:53-8:39 起床，看手机，短信，洗漱，算账算不清
	2.	8:39-8:49 做早餐。
	3.	8:49-8:58 卫生间
	4.	8:58-9:33 早饭
	5.	9:33-9:45 刷碗。
	6.	超市 11:50-12:40
	7.	做饭. 12:43-13:04
	8.	午睡 13:50-14:20
2.	游戏，勇者斗恶龙6 10:03-11:40 没想到玩儿这么久。
	1.	11:45-11:50 游戏笔记
	2.	14:43 游戏
	2.	TODO整理目前的截图。

10:16 2018-02-21
----------------
GTD
---
1.	杂
	1.	昨天7点多困了，躺在床上玩儿游戏。今天上午觉得头沉。

