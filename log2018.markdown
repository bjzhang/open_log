
09:41 2018-01-12
----------------
TODO
1.  children english dictionary
    1. https://www.oxforddictionaries.com/schools
2.  nas
3.  deploy tools.

10:36 2018-01-14
----------------
GTD
---
1.  plan
    1.  跑动ceph镜像构建部署全流程。
    2.  大姐路由器。
    3.  和凡一一起买字典？

00:04 2018-01-27
----------------
hikey960, Linux
---------------
1.  烧写debian
    第一次烧写没成功，似乎是因为hikey_idt和config以及二进制没有在同一个目录，也许hikey_idt去了上一个目录找二进制。
    我烧写时候，大约几秒钟会完成。如果时间太长可能是是有异常。尤其是ttyUSB0长期不动的时候。
    todo：strace hikey_idt，看是否和我怀疑的一样。
    https://github.com/96boards-hikey/tools-images-hikey960.git
    tools-images-hikey960/install-prebuilt-uefi/README.md
    tools-images-hikey960/install-prebuilt-uefi/hikey960-efi-prebuilt.sh

    ./hikey_idt -c config


    echo "Sleeping till device resets... zzz"

    打印上面内容，另一篇文档写系统重起时，有10s的timeout，按f后就可以用fastboot继续烧写。
    todo：确定不按f是否可以用。

    fastboot flash ptable prm_ptable.img
    fastboot flash xloader sec_xloader.img
    fastboot flash fastboot l-loader.bin
    fastboot flash fip fip.bin

烧写boot uefi img和desktop img。
fastboot flash boot boot-0.0+AUTOINC+ba45819943-ea12986b87-r0-hikey960-20180126071619-127.uefi.img
fastboot flash system rpb-desktop-image-lava-hikey960-20180126071619-127.rootfs.img
启动说找不到rootfs，看到grub cfg的root在sdd10，不知道是不是写错了。
rpb-console-image-lava-hikey960-20180126071619-127.rootfs.img 成功。


    [自己改写ptable，生成ptable.img](https://github.com/96boards-hikey/partition-table-tool/blob/master/efipartition.c)


    <https://github.com/96boards-hikey/tools-images-hikey960>

    <http://snapshots.linaro.org/reference-platform/embedded/master/hikey960/latest/rpb/>

2.  烧写后lspci看不到任何设备。
    1.  找资料
        1.  [HiKey960のM.2コネクタがSSDを認識するようになった](http://raphine.hatenablog.com/entry/2017/12/29/031501)
        2.  [HiKey960のM.2コネクタはSSDを認識するのだろうか＜その１＞](http://raphine.hatenablog.com/entry/2018/01/10/205559)
        3.  [HiKey960上でM.2 SSDの性能をゆるーく測定した。](http://raphine.hatenablog.com/entry/2018/01/10/210640)
    2.  根据资料1.1，找到[linaro 庄皓坚]的commit(https://github.com/ARM-software/arm-trusted-firmware/pull/1216/commits)，看下主线的git日志，已经合入了。从[hikey960-efi-prebuilt.sh](https://github.com/96boards-hikey/tools-images-hikey960/blob/master/install-prebuilt-uefi/hikey960-efi-prebuilt.sh)找到日构建的连接，目前最新版本是[51](http://builds.96boards.org/snapshots/reference-platform/components/uefi-staging/51/hikey960/release/)。为了简单也可以每次看latest目录。

3.	(23:00 2018-02-07)
	1.	自己编译了内核仍然不行。有点怀疑是uefi问题。
		1.	`dmesg |grep pci -i`:
			```
			root@hikey960:~# dmesg |grep pci -i
			[    0.000000]     PCI I/O : 0xffff7dfffee00000 - 0xffff7dffffe00000   (    16 MB)
			[    0.293605] PCI: CLS 0 bytes, default 128
			[    0.401360] ehci-pci: EHCI PCI platform driver
			[    0.401619] ohci-pci: OHCI PCI platform driver
			[    0.691484] tcpci_timer_init : init OK
			[    0.768787] [E/hisi_pd] tcpci_disable_vbus_control: !!!++++++++
			```
		2.	加打印：
			```
			root@hikey960:~# dmesg | grep pci -i
			[    0.000000]     PCI I/O : 0xffff7dfffee00000 - 0xffff7dffffe00000   (    16 MB)
			[    0.293994] PCI: CLS 0 bytes, default 128
			[    0.313790] kirin-pcie f4000000.pcie: kirin_pcie_probe start
			[    0.401700] ehci-pci: EHCI PCI platform driver
			[    0.401960] ohci-pci: OHCI PCI platform driver
			[    0.714180] tcpci_timer_init : init OK
			[    0.789097] [E/hisi_pd] tcpci_disable_vbus_control: !!!++++++++
			```

09:41 2018-02-03
----------------
GTD
---
1.  7:30醒，没睡着。8:05起床，做鸡蛋羹，洗漱，吃早餐 -9:05
2.  9:06-9:36 下楼散步，本来想跑步，觉得膝盖不是很舒服，取消。
3.  9:36-10:10 回家，写GTD。整理本周支出。感觉困。
4.  10:10-10:58 keep。膝关节，俯卧撑。
5.  10:59-11:06 收衣服，洗衣服
6.  11:06-16:44 午饭，羊蝎子准备，泡点香菇。吃饭。台式机升级完成，配置proxy，cow。准备晚餐。
7.  16:44-17:44 睡觉30‘，刷牙，合并open_log。
8.  17:45- 羊蝎子调味。
9.  hikey960 20'

09:44 2018-02-04
----------------
GTD
---
1.  8:00-9:46 起床。hikey960资料。洗漱。吃干拌面。
2.  9:45-10:05 洗碗，休息10’。
3.  10:05-11:41 饭后散步，跑前热身，分阶段燃脂跑（膝盖不舒服，基本没有快跑），跑后拉伸。
3.  11:41-13:20 做午饭（高压锅做香菇鸡腿，蒸米饭），准备早餐（菠菜鸡蛋全麦饼），吃麻酱，蜂蜜。
4.  13:20- 等待饭菜熟。吃饭。睡觉（约一个小时）
5.  16:27-17:13 电饭锅做米饭，擦厨房地，擦屋里的地。
6.  17:13-17:43 聊天，买蟑螂药。
7.  17:43-18:14 看朋友圈，看17年就业去向。
8.  18:14-18:49 热菜。香菇鸡腿汤饭。
9.  18:49-19:06 吃饭。
4.  wish list
    1.  健身。（周六周日完成，）
    1.  hikey960 NAS性能测试。
        1.  板子下周可能要还。最好周末有结果。
        2.  m.2认不出来。uefi, kernel.
        3.  性能测试。
            1.  m.2
            2.  wlan.
            3.  1000M usb lan.
    1.  读英语。
        1.  看下复习所有不会的题目需要多长时间。
        2.  看托业对应的章节。
    3.  mark邮件?
    4.  公众号。30'
    5.  读论文，看分布式课程。
    6.  准备羊蝎子火锅（状态不好的时候做）
        1.  炖羊蝎子。
        2.  摘菜。

13:21 2018-02-03
----------------
Software skill, distribution, opensuse
--------------------------------------
[libreoffice](http://download.opensuse.org/repositories/LibreOffice:/5.4/openSUSE_Leap_42.3/LibreOffice:5.4.repo)
[packman](http://mirrors.hust.edu.cn/packman/suse/openSUSE_Leap_42.3/)

[浏览器插件](https://opensuse-guide.ustclug.org/browserplugins.php>
`zypper addrepo -f http://packman.inode.at/suse/openSUSE_Leap_42.3/ packman`
`zypper install freshplayerplugin`
`zypper install xine-browser-plugin`
[Microsoft Silverlight](http://software.opensuse.org/package/pipelight)未安装。

[多媒体解码器](https://opensuse-guide.ustclug.org/codecs.php)
`zypper addrepo -f http://opensuse-guide.org/repo/openSUSE_Leap_42.3/ dvd`
`zypper install ffmpeg lame gstreamer-plugins-bad gstreamer-plugins-ugly gstreamer-plugins-ugly-orig-addon gstreamer-plugins-libav libdvdcss2`
执行下面命令切换所有相关软件包到packman。
`zypper dup --from http://packman.inode.at/suse/openSUSE_Leap_42.3/`

19:35 2018-02-05
----------------
ref<https://github.com/shadowsocks/shadowsocks/issues/646>
```
ansible@localhost:~/ss> sudo pip install -U git+https://github.com/shadowsocks/shadowsocks.git@2.9.1
Collecting git+https://github.com/shadowsocks/shadowsocks.git@2.9.1
  Cloning https://github.com/shadowsocks/shadowsocks.git (to 2.9.1) to /tmp/pip-usy75n86-build
Installing collected packages: shadowsocks
  Found existing installation: shadowsocks 2.8.2
    Uninstalling shadowsocks-2.8.2:
      Successfully uninstalled shadowsocks-2.8.2
  Running setup.py install for shadowsocks ... done
Successfully installed shadowsocks-2.9.1
```

21:55 2018-02-10
----------------
资源
----
1.	cubietruck
	```
	2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000
		link/ether 02:53:04:41:84:79 brd ff:ff:ff:ff:ff:ff
	3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
		link/ether 00:22:f4:fb:55:be brd ff:ff:ff:ff:ff:ff
	```

22:50 2018-02-10
----------------
internet sharing
----------------
```
yast2 firewall interfaces add interface=eth1 zone=internal
yast2 firewall interfaces add interface=wlan0 zone=external
yast2 firewall masquerade enable
```

15:13 2018-02-14
----------------
GTD
---
1.	游戏：勇者斗恶龙6。14:33-15:05 18:21-19:18
2.  杂：
	1.	日记：15:13-15:17
	2.	计划. 15:20-15:23 刚写完计划就觉得困了。
	3.	睡觉。15:30-16:00
	4.	keep. 16:00-16:27
	5.	做晚饭，整理原来做的菜，记录最近两天的食谱。16:30-17:34
	6.	吃饭，洗完：17:47-18:21
	7.	洗漱. 19:36-19:56
	8.	打电话，看readhub，发呆。19:56-20:14
3.	技术学习计划
	1.	Linaro的akashi联系我，说他在看我之前做的cont page hint。这个事情确实没事做，果断放弃了。
	2.	有个想法把每次以时间为单位记录的内容都放在badgerIO里面。从evernote和git提取并合并信息。重点是1和2.
		1.	go语言学习。
		2.	keyvalue数据库学习: [badgerIO](https://blog.dgraph.io/post/badger/)。20:14-20:49
			1.	[log structured merge (LSM)](https://en.wikipedia.org/wiki/Log-structured_merge-tree)
			2.	badger IO performance
				```
				Based on benchmarks, Badger is at least 3.5x faster than RocksDB when doing random reads. For value sizes between 128B to 16KB, data loading is 0.86x - 14x faster compared to RocksDB, with Badger gaining significant ground as value size increases. On the flip side, Badger is currently slower for range key-value iteration, but that has a lot of room for optimization.
				```
			3.	rocksDB用C++写的，使用Cgo转换会有潜在的问题。但是为什么TiKV rust调用C++没问题呢？语言的差异么？
			4.	LSM会有读放大和写放大。Badger使用LSM保存Key，value log保存value。
			5.	Guiding principles
				*	Write it purely in Go language.
				*	Use the latest research to build the fastest key-value store.
				*	Keep it simple, stupid.
				*	SSD-centric design.
			6.	badger不把key value在一起保存。只是把(value log中)value的指针和key放在一起。
			7.	performance: Range iteration latency慢的比较多，文章认为设计上badger会比rocksdb慢一点，但不应该这么多。需要进一步调查。
			8.	[benchmark](https://github.com/dgraph-io/badger-bench.git)
				1.	TODO: 参考badgerIO benchmark写最简单的go代码get, set, iteration.
		3.	github和evernote api学习。
4.	消化后看golang或keyvalue数据库。
	1.	golang 19:19-19:36
4.	春节后计划
	1.  Linaro的板子春节还。
	2.	问笔记本报销什么时候下来。

19:25 2018-02-14
----------------
<https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/04.2.md>
```
当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。

（大写字母可以使用任何 Unicode 编码的字符，比如希腊文，不仅仅是 ASCII 码中的大写字母）。
```

08:08 2018-02-15
----------------
GTD
---
1.	杂
	1.	7:53-8:39 起床，看手机，短信，洗漱，算账算不清
	2.	8:39-8:49 做早餐。
	3.	8:49-8:58 卫生间
	4.	8:58-9:33 早饭
	5.	9:33-9:45 刷碗。
	6.	超市 11:50-12:40
	7.	做饭. 12:43-13:04
	8.	午睡 13:50-14:20
2.	游戏，勇者斗恶龙6 10:03-11:40 没想到玩儿这么久。
	1.	11:45-11:50 游戏笔记
	2.	14:43 游戏
	2.	TODO整理目前的截图。

10:16 2018-02-21
----------------
GTD
---
1.	杂
	1.	昨天7点多困了，躺在床上玩儿游戏。今天上午觉得头沉。

11:49 2018-02-22
----------------
GTD
---
1.	今日总结
	1.	工作时间分析keyvalue数据库学习时用在竟品的时间有点长。这次为了学习还是围绕golang为主。

2.  golang key-value
    1.  计划 13:56-15:55
        1.  使用golang读取markdown笔记，并按一级标题分割
            1.  golang markdown parser还是自己读取？
            2.  现有文件对markdown使用是否需要调整？时间和关键字用不同标题级别比较好。
        2.  golang读取evernote笔记。
            1.  看到了evernote api可以根据GUID读取笔记内容，也看到了如何添加笔记。但是没看到如何列出指定时间的笔记。
            2.  evernote gosdk是使用facebook的thrift代码生产工具生产的。暂时还不会用。
            3.  感觉evernote api估计需要更多时间搞定，优先级降低一些。
            4.  使用其它笔记软件？之前觉得evernote不方便的地方一个是Linux命令行下没有适合的工具。在一个就是--等很多符号做自动合并为中文符号，而且没法控制。
        3.  二者都写入badgerIO数据库，并显示。
        4.  调研竟品。
            1.  <https://www.integromat.com/>类似原来的IFTTT，可以提供从github gist到evernote的功能。当gist更新时，建立新的evernote笔记。免费版本15分钟同步一次，感觉实时性不太好。
            2.  有道笔记markdown到hexo博客，使用模拟登录方式：https://github.com/gosongs/ynote2hexo/blob/master/start.py
    2.  badgerIO读写key value。15:56-16:07 16:30-17:18

3.  golang game helper: ocr.
    1.  晚上试试ocr方案是否可行。

4.  macbook air重装windows。

17:16 2018-02-22
----------------
golang
------
1.	type File, type Reader
	1.	开始不理解为什么os.Open打开的文件可以丢给Scanner，明明要求是Reader才可以。后来看了<https://medium.com/@matryer/golang-advent-calendar-day-seventeen-io-reader-in-depth-6f744bb4320b>才明白，原因是File实现了Read方法。

09:12 2018-02-23
================
GTD
---
1.	今日总结
	1.	看论文的时候看一部分整理一部分笔记感觉效果挺好的，后面继续坚持。
2.	最近看bigtable和badgerIO的论文，分别出自OSDI和FAST，后面要关注这两个会议。
	1.	TODO查会议时间。
	2.	DONE 打印论文。
3.	badgerIO
	1.	重新过了下trello的任务。
		1.	rocksdb的wiki内容很丰富，可以作为参考。
		2.	<https://github.com/dgraph-io/badger>里面的四篇blog目前看了第一篇。
	1.	看完levelDB文档 10:22-10:39
		1.	levelDB文档只是简单过了下。后续对照badgerIO看。
			1.	TODO: levelDB和huge tlb的关系。
	2.	开始看fast16-papers-lu.pdf
		1.	15:32-16:13 看完第二节。16:15-16:27 整理笔记. ref<bjzhang.github.io/_drafts/2018-02-26-WiscKey-key-value-store.md>
	3.	NEXT: 工作日志可以保存。
4.	杂
	1.	用python写自动插入图片的脚本。看看半个小时能不能写完。13:53
		1.	13:53-14:34 原定功能写完了。想增加一个图片前面的文字，需要再看下正则表达式。
		2.	14:34-14:54 markdown文件已上传。<http://aarch64.me/2018/02/how-to-transfer-file-through-putty/>
		3.	14:54-15:13 整理脚本。
5.	DQ6
	1.	识别图中对话框中的文字。
		1.	根据昨天python的./detect_shapes.py，写了go代码调用这个脚本并且裁出这个矩形：
			```
			rectangle := try_to_get_main_dialog()
			crop(rectangle)
			```
			使用`tesseract result.png stdout -l chi_sim --psm 12`时多数情况效果不错，个别2-3场景识别的不好。
		2.	我继续考虑，即使有了都不错的结果。如果知道我要按哪里呢？还是需要提前记录位置。添加每个场景还是比较复杂。后来想了想之前的材料，可以通过[【OCR技术系列之二】文字定位与切割](http://www.cnblogs.com/skyfsm/p/8029668.html)，做文字切割，得到文字区域（给出文字大小，目前游戏中只有一种字体），然后识别。这样就可以根据识别的文字按键了。如果效果不好（误把图片识别为文字），可以参考<https://stackoverflow.com/a/34262838/5230736>的opencv库识别是否可能为文字。后者略有复杂，感觉对我太挑战了。
	2.	NEXT: 可以正确退出战斗。
		1.	其实根据今天的结果，已经可以处理这个场景了。明天先加入这个功能。

09:51 2018-02-24
================
GTD
---
1.	杂
	1.	早晨起来发现所有vpn都不能用了。
	2.	自动化vpn部署脚本。
		1.	今天的目标是手工执行所有适合脚本执行的命令。时间半个小时。没完成的话穿插做。10:10-11:15
			1.	实际用了1个小时完成了可以ssh到vm的文档。
		2.	personal api key: 46d6376a0d764b311e83c68aea114a62da03471f030c3b684c111bf3951c3075
		3.	<bjzhang.github.io/_posts/2018/2018-02-24-linode-cli.md> <http://aarch64.me/2018/02/linode-cli/>
		4.	ips可以通过api得到<https://developers.linode.com/v4/reference/linode#ips>。将来可用golang写一个客户端
			1.	很奇怪，通过linode-cli show xxx | grep ips 得不到结果
		5.	linode可以保存images，也可以写SlackScript，可以把部署shadowsocks和kcp tunnel都写在脚本里面。
	3.	计划 11:19-11:23
	4.	记账，吃饭，刷碗，卫生间。11:23-12:35
	5.	午睡 12:40-13:16
	6.	刷牙，散步1000不。13:16-13:42
	7.	日记。14:40-14:43
2.	badgerIO
	1.	fast16-papers-lu.pdf
		1.	看完一遍 13:52-14:31 看的时候不断走神。
		2.	NEXT: 整理笔记。
		3.	NEXT: 和冬卯讨论
		4.	把技术日志保存在BadgerIO里面。14:54-16:01 16:13-
			1.	DONE: readline from file
			2.	DONE 从命令行读取文件。
			3.	DONE: 把文件缓存
				1.	16:01 已经可以匹配到key。
			4.	DONE: 转为byte写入badgerIO。
		5.	golang需要尽快系统学习，感觉现在仅仅是当c语言用。
3.	DQ6
	1.	DONE 识别战斗退出和全恢复什么也没发生的场景。
	2.	积累博客素材。
4.	NEXT
	1.	看冬卯今天发的材料和视频<https://talks.golang.org/2012/concurrency.slide>

09:21 2018-02-26
================
GTD
---
1.	杂
	1.	10’ 发公众号。
		1.	本来就是点几下鼠标点事情，转发朋友圈之前还是有些犹豫，觉得技术含量不高的感觉。
	2.	计划 09:34-09:37
	3.	做饭，吃饭，休息，明天早餐. 11:21-14:19
	4.	记账。14:19-14:38
	5.	睡觉 16:06-16:23
	6.	感觉现在列的action item又有点多了。这样很难做完。有些信息收集要放到笔记里面，不要直接放到action item中。
2.	NEXT: 通过bmc安装部署。截图便于后续opencv分析。
	1.	尝试连接bmc
		1.	配置ip后网络断了。14:39-14:49 16:23-16:39. ref"16:37 2018-02-26"
		2.	网络不通 15:41-15:47
3.	badgerIO
	1.	golang:
		1.	看冬卯今天发的材料和视频<https://talks.golang.org/2012/concurrency.slide> 09:38-10:03 听到21:45听困了。14:49-15:25 看完了。
			1.	Concurrecny is not parallelism.
			2.	有类似golang concurrency的特性的语言：Occam, Erlang...
			3.	"Rough analogy: writing to a file by name (process, Erlang) vs. writing to a file descriptor (channel, Go)."
			4.	go statement: run but not make the caller wait.
			5.	channel: do not communicate with share memories, use channels instead.
				1.	"func boring(msg string) <-chan string { // Returns receive-only channel of strings."
			6.	buffer channel like mailbox in Erlang.
	1.	fast16-papers-lu.pdf
		1.	NEXT: 整理笔记。10:05-10:41 15:59-16:06
			1.	ref <bjzhang.github.io/_drafts/2018-02-26-WiscKey-key-value-store.md>
			2.	下午一看论文也是困，郁闷。
4.	DQ6
	1.	整理思路，写公众号素材。
	2.	NEXT: 在game helper里面使用channel。
5.  Nentropy ansible部署。<https://github.com/journeymidnight/nentropy>
	1.	学习Nentropy如何使用。10'

16:37 2018-02-26
================
software skill, windows, network, add ip address
------------------------------------------------
1.	<https://www.howtogeek.com/51741/how-to-quickly-add-multiple-ip-addresses-to-windows-servers/>
	`netsh interface ipv4 add address “Local Area Connection” 192.168.1.2 255.255.255.0`
2.	<https://superuser.com/questions/786345/why-do-i-get-error-the-filename-directory-name-or-volume-label-syntax-is-inco>
	注意上面的interface名字需要是从`netsh interface show interface`得到的。

09:11 2018-02-27
================
GTD
---
1.	杂
	1.	计划 09:11-09:14
	2.	梳理任务安排。
	3.	刷碗. -09:46(5')
	4.	睡觉。12:00-12:39
	5.	吃饭 13:35-14:13
	6.	请假 14:17-14:25
	7.	云平台工时填写培训。20'
2.	通过bmc安装部署。截图便于后续opencv分析。
	1.	第一次安装，截图。09:19-09:37 09:46-11:57 12:42-13:35
		1.	DONE bmc是192.168.70.103/104/105, 浏览器打开，admin/admin
			1.	安装中。
			2.	执行dracut -f，检查uefi启动菜单。
	2.	同步测试下之前矩形分析和文字识别的代码。
		1.	第一次截图是直接抓了感兴趣的区域，这对于写文档很方便，但是对于全屏文字识别反而是越俎代庖了。
		2.	图片整理。14:27-15:11
3.	badgerIO
	1.	fast16-papers-lu.pdf
		1.	整理笔记。
			1.	ref <bjzhang.github.io/_drafts/2018-02-26-WiscKey-key-value-store.md>
4.	computer vision 15:15-16:18
	1.	<https://github.com/opencv/opencv_contrib/blob/master/modules/text/samples/textdetection.py>把最小区域调小后，白色背景深色字体的情况效果很好。
		```
		-  er1 = cv.text.createERFilterNM1(erc1,16,0.00015,0.13,0.2,True,0.1)
		+  er1 = cv.text.createERFilterNM1(erc1,16,0.00001,0.13,0.2,True,0.1)
		```
	2.	有明显区域的看看能不能通过区域监测划分出小区域。
		1.	试了试，对于大的色块并且不是完全封闭的区域（因为有标题栏）基本认不出区域。

08:46 2018-02-28
================
GTD
---
1.	杂
	1.	休年假一天。
	1.	计划 8:46-08:54
	1.	今天的定位是文档整理，思路梳理。
	1.	微信群讨论。09:50-10:03
1.	game helper目前进度整理，思路梳理。
	1.	思路梳理 08:54-09:50 下午也用了2h整理。发现其实整理的是图片，并不是思路。感觉自己有点做的太细迷失了方向。

16:37 2018-02-28
================
全年计划
--------
1.	完成coursera cloud computing 两门课。
1.	熟悉golang语言，编写独立golang文本识别和界面控制自动化引擎。
1.	理解分布式存储基础知识，写出简答可用的keyvalue数据库。

09:13 2018-03-01
================
GTD
---
1.	杂
	1.	计划 09:17-09:18
		1.	每天定的计划都完不成。
	2.	为冬卯简介SGX。09:18-09:26
	3	English
		1.	nesscssitate.
	4.	午睡 12:30-13:15
	5.	刷牙 13:25-13:43
	6.	记账。13:43-13:55
1.	badgerIO
	1.	fast16-papers-lu.pdf
		1.	09:28-10:02
		2.	和冬卯讨论:
			1.	说对于传统数据库，1k value已经很大了。
			2.	levelDB文档要认真看。
	1.	有空的话看看如何在keyvalue数据库中保存信息。
		1.	和冬卯简单讨论，冬卯说最简单的办法是cow_col作为key，value存到value里面。
		1.	和冬卯讨论
			1.	一看论文就困。不知道要讨论啥。
2.  Nentropy ansible部署。<https://github.com/journeymidnight/nentropy>
	1.	脚本可以在多节点上跑通。10:30-11:08
		1.	ceph
			1.	<http://docs.ceph.com/docs/kraken/man/8/ceph-osd/>
		1.	pg没有建立成功。初步怀疑选错了网卡，因为日志里面用的是我169网段的网卡。虽然自己机器可以ping通。不知道对协议有没有影响。
		1.	15:52-16:10 关了vpn就可以了。现在ip地址拿的也是10.71.84.61，不是169网段的地址了。
		1.	16:55
3.	golang
	1.	golang保存照片。
		1.	base64 14:32-15:22
			1.	终于抄出来把png转为base64的代码。但是没有完全理解。

09:49 2018-03-02
================
GTD
---
1.	杂
	1.	小憩 10:54-11:03
	2.	记账 11:03-11:34
	3.	寄hikey960.
1.	机器学习，人工智能
	1.	python机器学习。kmins函数。30' 40'(一边走路一边听)
1.	badgerIO
	1.	levelDB文档。 10:36-10:54 11:03-xxx
		1.	levelDB log format是做什么的？
		2.	levelDB其它文档：
			1.	<https://ayende.com/blog/posts/series/161410/reviewing-leveldb?page=2>
			2.	[SSTable and Log Structured Storage: LevelDB](https://www.igvita.com/2012/02/06/sstable-and-log-structured-storage-leveldb/)

12:17 2018-03-03
================
1.	杂
	1.	没有多难受。但是也不想写东西。从12多真正开始写了，觉得写东西也没有那么难受。也许这就是自律的作用。
	2.	睡觉。睡醒觉得舒服多了。13:50-16:00
	3.	醒觉，找go学习材料。16:00-16:28
	4.	刷碗，做粥。13:28-16:39
	5.	洗手间，洗手，晾粥。18:11-18:20
	6.	刷碗。19:03-19:09
3.	完成周一公众号。
	1.	完成大纲。
		1.	想的是写大纲，但是写的太细了。12:22-12:51
		2.	完成整理思路，看看还缺什么。13:05-13:31 13:36-13:50 17:17-17:56 17:56-18:11
		3.	重新看下写好的草稿。18:20-19:03 19:36-20:02 20:06-xxx
			1.	一边做一边吃零食的习惯不好。以后零食不放工作台边上。
			2.	以后还是需要一边做一边写文档，这次dq6是做到中后期写文档，感觉单独写文档的时间比较长。
		4.	制作动画方法见：<bjzhang.github.io/public/images/games/convert.sh>。19:09-19:36
		5.	再简单整理下文档。21:00-21:17
			1.	自己容易陷入细节，通过番茄工作法可能是个办法提醒自己review每段工作的效果。
		6.	重头戏是完成代码。
			1.	写整理流程。21:20-21:47
				1.	希望尽可能多用于写go的特性。
					1.	使用goroutine。一个抓图一个处理。多个抓图一个处理？
					2.	main函数尽量和dq6解耦，便于以后用于其它游戏和bmc。
					3.	感觉对于golang还很不熟悉。
3.	16:28-17:16 听golang讲座1, 2. <https://github.com/Unknwon/go-fundamental-programming>.
	1.	go command
		1.	`godoc -http ":6060"`，用浏览器"localhost:6060"查看本地go文档。
		2.	gofmt格式化代码。
		3.	go test运行测试代码。

1.	每天抽出时间看视频。
	1.	今天看coursera的cloud computing视频。
		1.	看了gossip协议部分，还没有看完。
1.	投linuxcon议题。
1.	macbook air重装。
	1.	调研方案。
1.	badgerIO
	1.	看看PingCap 唐刘的TiKV。
		1.	看完coursera视频之后。

16:21 2018-03-03
================
学习资源
--------
1.	golang学习: 整理到useful link
	1.	中文教程。<https://github.com/Unknwon/go-fundamental-programming>
	1.	里面有syncthing, k8s等我听说过的项目，需要时可以参考。<http://herman.asia/open-source-go-projects-to-learn-from>
	1.	[Google I/O 2013 - Advanced Go Concurrency Patterns](https://www.youtube.com/watch?v=QDDwwePbDtw)

2.	机器学习: TODO报名机器学习么？看看google的课是否也有玩儿游戏的例子？我觉得我还是聚焦下，先多学学分布式存储。
	1.	<https://developers.google.com/machine-learning/crash-course/?hl=zh-cn>

11:53 2018-03-04
================
GTD
---
1.	杂
	1.	去医院开药。13:20-15:36
		1.	路上听了golang slice。
	2.	记账。15:39-xxx
	3.	发呆 -16:38 继续刷手机。-17:03
	4.	吃面条. 21:10
2.	LC3: 投了两个topic。11:53-13:20
3.	DQ6
	1.	代码逻辑
		1.	基本数据结构定了。17:04-17:49
		2.	确定基本函数逻辑。
			1.	17:51-18:18 写了半天在一个函数调用提示。开始一直觉得是函数或变量不对。后来发现把函数移到while外面就可以。才看出是因为golang没有while关键字。。。
				```
				$ go run fighting_new.go
				# command-line-arguments
				./fighting_new.go:99:35: syntax error: unexpected newline, expecting comma or }
				```
			2.	18:28-19:13 中间被打算10'，学会了怎么初始化嵌套的map。开始有问题是因为map里面多加了一层大括号。没多一层大括号这样golang会认为多了一层类型。TODO怎么把处理每个scenario和button的代码也加入进去?
				```go
				type position struct {
					x int
					y int
				}
				type button map[string](position)
				type scenario map[string](button)
				var scenarios = scenario{
					"startFighting": {
						"fighting": {-1, -1},
						"escaping": {-1, -1},
					},
					"exitFighting": button{
						"exiting": {-1, -1},
					},
				}
				func main() {
					scnr := "startFighting"
					bttn := "fighting"
					fmt.Printf("%v: %v: %v\n", scnr, bttn, scenarios[scnr][bttn])
				}
				```
			3.	19:29-19:55 结构体不动的情况下能不能把函数细化下？一直再改结构体。
				1.	还是遇到数据结构使用的问题，map里面的value不能直接修改，需要reassign。
				2.	突然觉得是不是应该在什么地方把map里面把value定义为不重复的类型？或者定义为接口？然后把不同的处理函数放进入。
			4.	20:09-20:34 看起来代码结构还可以，先写一个战斗画面的完整逻辑看看。
				1.	连贴带写写了很多。感觉再有25分钟肯定写完了，编译和调试估计还需要两个25分钟。
			5.	20:43-21:07 检查代码。希望能够编译通过。
				1.	可以获得文字了。
			6.	-22:35 从现在情况看还是需要单独提取出白色灰色等颜色，看看能不能更好的识别出文字。不要把时间用在无目的的参数调整上。

6.	去拉勾网上看看相关职位的行情。

11:57 2018-03-04
================
演讲
1.	short
	2014 Opensuse Asia Summit: openSUSE on ARM
	2016 Linuxcon Europe: An efficient unit test and fuzz tools for kernel/libc porting
	2016 Linaro Connect Las Vegas: LAS16-TR07: Working upstream [Mandarin]
	2017 Linaro Connect Budapest: BUD17-305 - Implement contiguous page hint for anonymous page in user space

2.	long version(not finished!)
	Join openSUSE Asia Submit 2014 and give the presentation named "openSUSE on ARM”(https://github.com/openSUSE-CN/oSA2014-slides/blob/master/Bamvor_Jian_Zhang-openSUSE_on_Arm.pdf)
	Give a presentation on community activity:
	Activity link: http://code.csdn.net/news/2818866
	Slide: http://share.csdn.net/slides/1347

12:02 2018-03-04
================
BIO
---
Bamvor Zhang works kernel, libc and storage in differnt senarios such as cloud and mobile in recent ten years. He worked for Huawei and Linaro as Senior Engineer. Right now, he is architect of Eking technology which belong to Hainan airline. His prsentations in recently:
2014 Opensuse Asia Summit: openSUSE on ARM
2016 Linuxcon Europe: An efficient unit test and fuzz tools for kernel/libc porting
2016 Linaro Connect Las Vegas: LAS16-TR07: Working upstream [Mandarin]
2017 Linaro Connect Budapest: BUD17-305 - Implement contiguous page hint for anonymous page in user space

12:11 2018-03-04
================
LC3 China 2018, kiwi
--------------------
1.	Abstract Title
	Building your appliance with suitable method
2.	Abstract
	In this presentation, Bamvor will compare the pros and cons of different appliance builders such as Kiwi, kickstart, autoyast, virt-builder and terraform.  He will share the experiences, challenges, and solutions in their project when building an appliance in a special environment such as the small bootable disk, private network. In the end, He will show the audience how to use these builders to build the same appliance base on the different distribution.
3.	Audience: Describe who the audience is and what you expect them to gain from your presentation.
	Expert audiences are who need to customize the appliance in the standalone, private and public cloud environment. By choosing the suitable appliance builder, audiences could same time on installation and configuration of distribution.

4.	Benefits to the Ecosystem: Tell us how the content of your presentation will help better the ecosystem. (We realize that this can be a difficult question to answer, but as with the abstract, the relevance of your presentation is just as important as the content).

13:05 2018-03-04
================
LC3 China 2018, contiguous page hint
------------------------------------
1.	Audience:
	Kernel developer or System performance engineer who want to analyze and improve the memory performance. After this presentation, audiences will learn how to determine if the memory is the bottleneck and how to know if there is an issue in cache or tlb. Finally, audiences will learn how to improve 64k page performance in arm64 architecture.

09:43 2018-03-05
================
GTD
---
1.	杂
	1.	帮租客查孩子打疫苗的医院，并记录。10:16-10:23
	2.	吃水果。10:23-10:47
		1.	同时在看leveldb文档。
	3.	散步，午饭，散步。11:40-14:15
	4.	今天确定要不要报名xuewei，zouzheng的团体。
	5.	卫生间，喝水，吃火腿肠。15:07-15:20
	6.	小憩 15:24-15:38
	7.	上午和兴义定位个运维报的问题。virsh启动虚拟机卡住，并且是paused状态，没法resume。我猜测是存储问题。实测ceph -s可以，rbd不行。结论是网络问题。
	8.	刷牙，洗手间，看自己的公众号。16:13-16:30
	9.	NEXT
		1.	下周一个公众号如果写不出keyvalue数据库的文章。考虑把kernel-4.16 release notes写出来。
	10.	看看我的icloud是不是被关闭了？
2.	转正 09:40-10:14
	1.	基本信息
		1.	进入海航时间 2017.10.18
		2.	部门及岗位 云服务事业群云平台事业部基础架构中心资深架构师
	2.	本人述职
		1.	参与2017年公司重点项目虚拟机迁移项目
			1.	负责优化virt-p2v工具性能。
			2.	输出项目文档。
				1.	virt-p2v 迁移脚本使用方法: http://cf.polex.io/pages/viewpage.action?pageId=14457399
				2.	P2V迁移输出文档 2. 交付物（环境、脚本等）信息: http://cf.polex.io/pages/viewpage.action?pageId=16745167
		2.	参与2018年公司重点项目一体机项目。
			1.	负责系统镜像构建和开发自动化测试。
				1.	负责镜像构建工具选型，测试和研发。
			2.	输出镜像服务器搭建到构建手册：http://git.ekingcloud.com/zhangjian/storage_applicance/blob/master/README.md
3.	看和讨论levelDB文档。10:47-11:35
	1.	levelDB implementation.
	2.	现在raft log也存在badgerIO里面。
	3.	相关材料
		1.	badgerIO: 搜索badgerIO的snapshot可以找到snapshot和backup。snapshot和backup都用到了transaction。backup把keyvalue写到一个新的文件完成。
			1.	[any plan to support snapshot? ](https://github.com/dgraph-io/badger/issues/39)
			2.	[Add DB.Backup() and DB.Load() for backup purposes.](https://github.com/dgraph-io/badger/commit/671c20ed0363d44820a3086ad5d86d24fb753c97)
			3.	[transaction](https://github.com/dgraph-io/badger/issues/230)
		1.	rocksDB
			1.	<https://github.com/facebook/rocksdb/wiki/How-to-backup-RocksDB%3F>
			2.	<http://rocksdb.org/blog/2015/11/10/use-checkpoints-for-efficient-snapshots.html>
	4.	badgerIO学习
		1.	从badgerIO的transaction看。14:20-14:44
			1.	[badgerIO transaction设计文档](https://discuss.dgraph.io/t/supporting-transactions-in-badger/1766)
			2.	CockroachDB评测badgerIO的性能和badgerIO自己不同，看起来是场景不同。
		2.	梳理badgerIO代码结构。14:45-15:07 15:20-15:24 15:38-16:13 16:30-17:42(Compact还会没看懂)
			1.	过一遍文件和目录
				1.	CHANGELOG.md: 看到修复在32-bit windows，ios，armv7的编译问题。感觉badger用的还挺广的。
				1.	LICENSE
				1.	README.md
				1.	appveyor.yml: windows持续集成的工具。
				1.	backup.go: 看起来和我关系很大。[Add DB.Backup() and DB.Load() for backup purposes.](https://github.com/dgraph-io/badger/commit/671c20ed0363d44820a3086ad5d86d24fb753c97)
				1.	backup_test.go
				1.	cmd
					1.	backup.go: 迭代keyvalue并通过protobuf写入文件。
					1.	restore.go: restore.
					1.	root.go: 最顶层的命令实现。
				1.	compaction.go
				1.	contrib
				1.	db.go: DB flushChan chan flushTask // For flushing memtables.
				1.	db_test.go
				1.	dir_unix.go
				1.	dir_windows.go
				1.	doc.go
				1.	errors.go
				1.	images
				1.	iterator.go
				1.	level_handler.go
				1.	levels.go: levelsController。很长。compactDef是什么?
				1.	managed_db.go
				1.	manifest.go
				1.	manifest_test.go
				1.	options
				1.	options.go
				1.	protos: gogo的protobuf
				1.	skl
				1.	structs.go
				1.	table
				1.	test.sh
				1.	transaction.go
				1.	transaction_test.go
				1.	util.go
				1.	value.go
				1.	value_test.go
				1.	y

	5.	pingcap的唐刘有个项目[ledisDB](https://github.com/siddontang/ledisdb)，支持多种数据格式(KV, List, Hash, ZSet, Set)和多种底层数据库(LevelDB, goleveldb, RocksDB, RAM)。
		1.	可以用于学习怎么使用keyvalue数据库。
		2.	唐刘自己有计划，但是还没有用badgerIO的transaction: <https://github.com/siddontang/ledisdb/issues/296>
4.	今天golang学到了
	1.	sort.Slice
	2.	protobuf
	3.	函数返回函数。
