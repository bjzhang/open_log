
09:41 2018-01-12
----------------
TODO
1.  children english dictionary
    1. https://www.oxforddictionaries.com/schools
2.  nas
3.  deploy tools.

10:36 2018-01-14
----------------
GTD
---
1.  plan
    1.  跑动ceph镜像构建部署全流程。
    2.  大姐路由器。
    3.  和凡一一起买字典？

00:04 2018-01-27
----------------
hikey960, Linux
---------------
1.  烧写debian
    第一次烧写没成功，似乎是因为hikey_idt和config以及二进制没有在同一个目录，也许hikey_idt去了上一个目录找二进制。
    我烧写时候，大约几秒钟会完成。如果时间太长可能是是有异常。尤其是ttyUSB0长期不动的时候。
    todo：strace hikey_idt，看是否和我怀疑的一样。
    https://github.com/96boards-hikey/tools-images-hikey960.git
    tools-images-hikey960/install-prebuilt-uefi/README.md
    tools-images-hikey960/install-prebuilt-uefi/hikey960-efi-prebuilt.sh

    ./hikey_idt -c config


    echo "Sleeping till device resets... zzz"

    打印上面内容，另一篇文档写系统重起时，有10s的timeout，按f后就可以用fastboot继续烧写。
    todo：确定不按f是否可以用。

    fastboot flash ptable prm_ptable.img
    fastboot flash xloader sec_xloader.img
    fastboot flash fastboot l-loader.bin
    fastboot flash fip fip.bin

烧写boot uefi img和desktop img。
fastboot flash boot boot-0.0+AUTOINC+ba45819943-ea12986b87-r0-hikey960-20180126071619-127.uefi.img
fastboot flash system rpb-desktop-image-lava-hikey960-20180126071619-127.rootfs.img
启动说找不到rootfs，看到grub cfg的root在sdd10，不知道是不是写错了。
rpb-console-image-lava-hikey960-20180126071619-127.rootfs.img 成功。


    [自己改写ptable，生成ptable.img](https://github.com/96boards-hikey/partition-table-tool/blob/master/efipartition.c)


    <https://github.com/96boards-hikey/tools-images-hikey960>

    <http://snapshots.linaro.org/reference-platform/embedded/master/hikey960/latest/rpb/>

2.  烧写后lspci看不到任何设备。
    1.  找资料
        1.  [HiKey960のM.2コネクタがSSDを認識するようになった](http://raphine.hatenablog.com/entry/2017/12/29/031501)
        2.  [HiKey960のM.2コネクタはSSDを認識するのだろうか＜その１＞](http://raphine.hatenablog.com/entry/2018/01/10/205559)
        3.  [HiKey960上でM.2 SSDの性能をゆるーく測定した。](http://raphine.hatenablog.com/entry/2018/01/10/210640)
    2.  根据资料1.1，找到[linaro 庄皓坚]的commit(https://github.com/ARM-software/arm-trusted-firmware/pull/1216/commits)，看下主线的git日志，已经合入了。从[hikey960-efi-prebuilt.sh](https://github.com/96boards-hikey/tools-images-hikey960/blob/master/install-prebuilt-uefi/hikey960-efi-prebuilt.sh)找到日构建的连接，目前最新版本是[51](http://builds.96boards.org/snapshots/reference-platform/components/uefi-staging/51/hikey960/release/)。为了简单也可以每次看latest目录。

3.	(23:00 2018-02-07)
	1.	自己编译了内核仍然不行。有点怀疑是uefi问题。
		1.	`dmesg |grep pci -i`:
			```
			root@hikey960:~# dmesg |grep pci -i
			[    0.000000]     PCI I/O : 0xffff7dfffee00000 - 0xffff7dffffe00000   (    16 MB)
			[    0.293605] PCI: CLS 0 bytes, default 128
			[    0.401360] ehci-pci: EHCI PCI platform driver
			[    0.401619] ohci-pci: OHCI PCI platform driver
			[    0.691484] tcpci_timer_init : init OK
			[    0.768787] [E/hisi_pd] tcpci_disable_vbus_control: !!!++++++++
			```
		2.	加打印：
			```
			root@hikey960:~# dmesg | grep pci -i
			[    0.000000]     PCI I/O : 0xffff7dfffee00000 - 0xffff7dffffe00000   (    16 MB)
			[    0.293994] PCI: CLS 0 bytes, default 128
			[    0.313790] kirin-pcie f4000000.pcie: kirin_pcie_probe start
			[    0.401700] ehci-pci: EHCI PCI platform driver
			[    0.401960] ohci-pci: OHCI PCI platform driver
			[    0.714180] tcpci_timer_init : init OK
			[    0.789097] [E/hisi_pd] tcpci_disable_vbus_control: !!!++++++++
			```

09:41 2018-02-03
----------------
GTD
---
1.  7:30醒，没睡着。8:05起床，做鸡蛋羹，洗漱，吃早餐 -9:05
2.  9:06-9:36 下楼散步，本来想跑步，觉得膝盖不是很舒服，取消。
3.  9:36-10:10 回家，写GTD。整理本周支出。感觉困。
4.  10:10-10:58 keep。膝关节，俯卧撑。
5.  10:59-11:06 收衣服，洗衣服
6.  11:06-16:44 午饭，羊蝎子准备，泡点香菇。吃饭。台式机升级完成，配置proxy，cow。准备晚餐。
7.  16:44-17:44 睡觉30‘，刷牙，合并open_log。
8.  17:45- 羊蝎子调味。
9.  hikey960 20'

09:44 2018-02-04
----------------
GTD
---
1.  8:00-9:46 起床。hikey960资料。洗漱。吃干拌面。
2.  9:45-10:05 洗碗，休息10’。
3.  10:05-11:41 饭后散步，跑前热身，分阶段燃脂跑（膝盖不舒服，基本没有快跑），跑后拉伸。
3.  11:41-13:20 做午饭（高压锅做香菇鸡腿，蒸米饭），准备早餐（菠菜鸡蛋全麦饼），吃麻酱，蜂蜜。
4.  13:20- 等待饭菜熟。吃饭。睡觉（约一个小时）
5.  16:27-17:13 电饭锅做米饭，擦厨房地，擦屋里的地。
6.  17:13-17:43 聊天，买蟑螂药。
7.  17:43-18:14 看朋友圈，看17年就业去向。
8.  18:14-18:49 热菜。香菇鸡腿汤饭。
9.  18:49-19:06 吃饭。
4.  wish list
    1.  健身。（周六周日完成，）
    1.  hikey960 NAS性能测试。
        1.  板子下周可能要还。最好周末有结果。
        2.  m.2认不出来。uefi, kernel.
        3.  性能测试。
            1.  m.2
            2.  wlan.
            3.  1000M usb lan.
    1.  读英语。
        1.  看下复习所有不会的题目需要多长时间。
        2.  看托业对应的章节。
    3.  mark邮件?
    4.  公众号。30'
    5.  读论文，看分布式课程。
    6.  准备羊蝎子火锅（状态不好的时候做）
        1.  炖羊蝎子。
        2.  摘菜。

13:21 2018-02-03
----------------
Software skill, distribution, opensuse
--------------------------------------
[libreoffice](http://download.opensuse.org/repositories/LibreOffice:/5.4/openSUSE_Leap_42.3/LibreOffice:5.4.repo)
[packman](http://mirrors.hust.edu.cn/packman/suse/openSUSE_Leap_42.3/)

[浏览器插件](https://opensuse-guide.ustclug.org/browserplugins.php>
`zypper addrepo -f http://packman.inode.at/suse/openSUSE_Leap_42.3/ packman`
`zypper install freshplayerplugin`
`zypper install xine-browser-plugin`
[Microsoft Silverlight](http://software.opensuse.org/package/pipelight)未安装。

[多媒体解码器](https://opensuse-guide.ustclug.org/codecs.php)
`zypper addrepo -f http://opensuse-guide.org/repo/openSUSE_Leap_42.3/ dvd`
`zypper install ffmpeg lame gstreamer-plugins-bad gstreamer-plugins-ugly gstreamer-plugins-ugly-orig-addon gstreamer-plugins-libav libdvdcss2`
执行下面命令切换所有相关软件包到packman。
`zypper dup --from http://packman.inode.at/suse/openSUSE_Leap_42.3/`

19:35 2018-02-05
----------------
ref<https://github.com/shadowsocks/shadowsocks/issues/646>
```
ansible@localhost:~/ss> sudo pip install -U git+https://github.com/shadowsocks/shadowsocks.git@2.9.1
Collecting git+https://github.com/shadowsocks/shadowsocks.git@2.9.1
  Cloning https://github.com/shadowsocks/shadowsocks.git (to 2.9.1) to /tmp/pip-usy75n86-build
Installing collected packages: shadowsocks
  Found existing installation: shadowsocks 2.8.2
    Uninstalling shadowsocks-2.8.2:
      Successfully uninstalled shadowsocks-2.8.2
  Running setup.py install for shadowsocks ... done
Successfully installed shadowsocks-2.9.1
```

21:55 2018-02-10
----------------
资源
----
1.	cubietruck
	```
	2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000
		link/ether 02:53:04:41:84:79 brd ff:ff:ff:ff:ff:ff
	3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
		link/ether 00:22:f4:fb:55:be brd ff:ff:ff:ff:ff:ff
	```

22:50 2018-02-10
----------------
internet sharing
----------------
```
yast2 firewall interfaces add interface=eth1 zone=internal
yast2 firewall interfaces add interface=wlan0 zone=external
yast2 firewall masquerade enable
```

15:13 2018-02-14
----------------
GTD
---
1.	游戏：勇者斗恶龙6。14:33-15:05 18:21-19:18
2.  杂：
	1.	日记：15:13-15:17
	2.	计划. 15:20-15:23 刚写完计划就觉得困了。
	3.	睡觉。15:30-16:00
	4.	keep. 16:00-16:27
	5.	做晚饭，整理原来做的菜，记录最近两天的食谱。16:30-17:34
	6.	吃饭，洗完：17:47-18:21
	7.	洗漱. 19:36-19:56
	8.	打电话，看readhub，发呆。19:56-20:14
3.	技术学习计划
	1.	Linaro的akashi联系我，说他在看我之前做的cont page hint。这个事情确实没事做，果断放弃了。
	2.	有个想法把每次以时间为单位记录的内容都放在badgerIO里面。从evernote和git提取并合并信息。重点是1和2.
		1.	go语言学习。
		2.	keyvalue数据库学习: [badgerIO](https://blog.dgraph.io/post/badger/)。20:14-20:49
			1.	[log structured merge (LSM)](https://en.wikipedia.org/wiki/Log-structured_merge-tree)
			2.	badger IO performance
				```
				Based on benchmarks, Badger is at least 3.5x faster than RocksDB when doing random reads. For value sizes between 128B to 16KB, data loading is 0.86x - 14x faster compared to RocksDB, with Badger gaining significant ground as value size increases. On the flip side, Badger is currently slower for range key-value iteration, but that has a lot of room for optimization.
				```
			3.	rocksDB用C++写的，使用Cgo转换会有潜在的问题。但是为什么TiKV rust调用C++没问题呢？语言的差异么？
			4.	LSM会有读放大和写放大。Badger使用LSM保存Key，value log保存value。
			5.	Guiding principles
				*	Write it purely in Go language.
				*	Use the latest research to build the fastest key-value store.
				*	Keep it simple, stupid.
				*	SSD-centric design.
			6.	badger不把key value在一起保存。只是把(value log中)value的指针和key放在一起。
			7.	performance: Range iteration latency慢的比较多，文章认为设计上badger会比rocksdb慢一点，但不应该这么多。需要进一步调查。
			8.	[benchmark](https://github.com/dgraph-io/badger-bench.git)
				1.	TODO: 参考badgerIO benchmark写最简单的go代码get, set, iteration.
		3.	github和evernote api学习。
4.	消化后看golang或keyvalue数据库。
	1.	golang 19:19-19:36
4.	春节后计划
	1.  Linaro的板子春节还。
	2.	问笔记本报销什么时候下来。

19:25 2018-02-14
----------------
<https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/04.2.md>
```
当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。

（大写字母可以使用任何 Unicode 编码的字符，比如希腊文，不仅仅是 ASCII 码中的大写字母）。
```

08:08 2018-02-15
----------------
GTD
---
1.	杂
	1.	7:53-8:39 起床，看手机，短信，洗漱，算账算不清
	2.	8:39-8:49 做早餐。
	3.	8:49-8:58 卫生间
	4.	8:58-9:33 早饭
	5.	9:33-9:45 刷碗。
	6.	超市 11:50-12:40
	7.	做饭. 12:43-13:04
	8.	午睡 13:50-14:20
2.	游戏，勇者斗恶龙6 10:03-11:40 没想到玩儿这么久。
	1.	11:45-11:50 游戏笔记
	2.	14:43 游戏
	2.	TODO整理目前的截图。

10:16 2018-02-21
----------------
GTD
---
1.	杂
	1.	昨天7点多困了，躺在床上玩儿游戏。今天上午觉得头沉。

11:49 2018-02-22
----------------
GTD
---
1.	今日总结
	1.	工作时间分析keyvalue数据库学习时用在竟品的时间有点长。这次为了学习还是围绕golang为主。

2.  golang key-value
    1.  计划 13:56-15:55
        1.  使用golang读取markdown笔记，并按一级标题分割
            1.  golang markdown parser还是自己读取？
            2.  现有文件对markdown使用是否需要调整？时间和关键字用不同标题级别比较好。
        2.  golang读取evernote笔记。
            1.  看到了evernote api可以根据GUID读取笔记内容，也看到了如何添加笔记。但是没看到如何列出指定时间的笔记。
            2.  evernote gosdk是使用facebook的thrift代码生产工具生产的。暂时还不会用。
            3.  感觉evernote api估计需要更多时间搞定，优先级降低一些。
            4.  使用其它笔记软件？之前觉得evernote不方便的地方一个是Linux命令行下没有适合的工具。在一个就是--等很多符号做自动合并为中文符号，而且没法控制。
        3.  二者都写入badgerIO数据库，并显示。
        4.  调研竟品。
            1.  <https://www.integromat.com/>类似原来的IFTTT，可以提供从github gist到evernote的功能。当gist更新时，建立新的evernote笔记。免费版本15分钟同步一次，感觉实时性不太好。
            2.  有道笔记markdown到hexo博客，使用模拟登录方式：https://github.com/gosongs/ynote2hexo/blob/master/start.py
    2.  badgerIO读写key value。15:56-16:07 16:30-17:18

3.  golang game helper: ocr.
    1.  晚上试试ocr方案是否可行。

4.  macbook air重装windows。

17:16 2018-02-22
----------------
golang
------
1.	type File, type Reader
	1.	开始不理解为什么os.Open打开的文件可以丢给Scanner，明明要求是Reader才可以。后来看了<https://medium.com/@matryer/golang-advent-calendar-day-seventeen-io-reader-in-depth-6f744bb4320b>才明白，原因是File实现了Read方法。

09:12 2018-02-23
================
GTD
---
1.	今日总结
	1.	看论文的时候看一部分整理一部分笔记感觉效果挺好的，后面继续坚持。
2.	最近看bigtable和badgerIO的论文，分别出自OSDI和FAST，后面要关注这两个会议。
	1.	TODO查会议时间。
	2.	DONE 打印论文。
3.	badgerIO
	1.	重新过了下trello的任务。
		1.	rocksdb的wiki内容很丰富，可以作为参考。
		2.	<https://github.com/dgraph-io/badger>里面的四篇blog目前看了第一篇。
	1.	看完levelDB文档 10:22-10:39
		1.	levelDB文档只是简单过了下。后续对照badgerIO看。
			1.	TODO: levelDB和huge tlb的关系。
	2.	开始看fast16-papers-lu.pdf
		1.	15:32-16:13 看完第二节。16:15-16:27 整理笔记
			1.	论文提到使用keyvalue保存照片。文章从标题和公司看就是[冬卯推荐的论文](https://code.facebook.com/posts/685565858139515/needle-in-a-haystack-efficient-storage-of-billions-of-photos/)
			2.	TODO: 文章比较了LSM和B tree。需要再看下B+ tree。
			3.	FIXME: 文章提到把key和value分开对于crash后的一致性有调整，WiscKey怎么做的没看懂。
			4.	Wisckey对于随机写小value并且做大范围查询的情况性能不如LevelDB。但是: "this workload does not reflect real-world use cases (which primarily use shorter range queries) and can be improved by log reorganization. "
			5.	LSM tree对于插入多于查找的情况很有用（相比于B tree）。
			6.	由于L0的数据可能重叠，查找时数据时需要查找所有L0的文件（其它层文件每层只需要查一个），所以当LevelDB发现L0层文件大于8时，会降低前台写入的速度，便于后台的compaction把部分数据从L0降到L1。
			7.	TODO：论文提到了bloom filter，需要简单看下。
		3.	16:56-17:27 看完第三节。17:27-17:43 整理笔记。
			1.	Wisckey在range queries时通过对next，prev行为的分析预测用户行为并从value log预取value，这样可以充分利用ssd的随机读可以高并发的特点。
			2.	减小读放大主要为了加快查找。
			3.	因为只保存key和value的地址这样LSM tree比较小，可以更容易的cache在内存中。
			4.	插入和删除：插入时先插入value再插入key到LSM tree。删除时只删除LSM tree的key。这样带来一个问题，垃圾回收的时候，怎么知道value log里面的value时无用的？
				1.	解决办法是在vlog中保存(key size, value size, key, value)的tuple。这样只需要从vlog里面得到key再去LSM tree看有没有这个value，如果没有说明时已经删除的。
			5.	value log很大，如何垃圾回收？
				1.	新数据永远从head写入。Wisckey GC时从tail扫描，如果是有用的value，会写回head；没用的删除。TODO：问题上这样回不回有大量多于的写？
			6.	Challenges后续还需要重点看。
			7.	Implementation里面用的系统调用可以关注下。
				1.	posix_fadvise()
				2.	fallocate(): Wisckey会分配一个很大的value log（TODO具体看是多大），这样长时间都不会绕回。
	3.	NEXT: 工作日志可以保存。
4.	杂
	1.	用python写自动插入图片的脚本。看看半个小时能不能写完。13:53
		1.	13:53-14:34 原定功能写完了。想增加一个图片前面的文字，需要再看下正则表达式。
		2.	14:34-14:54 markdown文件已上传。<http://aarch64.me/2018/02/how-to-transfer-file-through-putty/>
		3.	14:54-15:13 整理脚本。
5.	DQ6
	1.	识别图中对话框中的文字。
		1.	根据昨天python的./detect_shapes.py，写了go代码调用这个脚本并且裁出这个矩形：
			```
			rectangle := try_to_get_main_dialog()
			crop(rectangle)
			```
			使用`tesseract result.png stdout -l chi_sim --psm 12`时多数情况效果不错，个别2-3场景识别的不好。
		2.	我继续考虑，即使有了都不错的结果。如果知道我要按哪里呢？还是需要提前记录位置。添加每个场景还是比较复杂。后来想了想之前的材料，可以通过[【OCR技术系列之二】文字定位与切割](http://www.cnblogs.com/skyfsm/p/8029668.html)，做文字切割，得到文字区域（给出文字大小，目前游戏中只有一种字体），然后识别。这样就可以根据识别的文字按键了。如果效果不好（误把图片识别为文字），可以参考<https://stackoverflow.com/a/34262838/5230736>的opencv库识别是否可能为文字。后者略有复杂，感觉对我太挑战了。
	2.	NEXT: 可以正确退出战斗。
		1.	其实根据今天的结果，已经可以处理这个场景了。明天先加入这个功能。

09:51 2018-02-24
================
GTD
---
1.	杂
	1.	早晨起来发现所有vpn都不能用了。
	2.	自动化vpn部署脚本。
		1.	今天的目标是手工执行所有适合脚本执行的命令。时间半个小时。没完成的话穿插做。10:10-11:15
			1.	实际用了1个小时完成了可以ssh到vm的文档。
		2.	personal api key: 46d6376a0d764b311e83c68aea114a62da03471f030c3b684c111bf3951c3075
		3.	<bjzhang.github.io/_posts/2018/2018-02-24-linode-cli.md> <http://aarch64.me/2018/02/linode-cli/>
		4.	ips可以通过api得到<https://developers.linode.com/v4/reference/linode#ips>。将来可用golang写一个客户端
			1.	很奇怪，通过linode-cli show xxx | grep ips 得不到结果
		5.	linode可以保存images，也可以写SlackScript，可以把部署shadowsocks和kcp tunnel都写在脚本里面。
	3.	计划 11:19-11:23
	4.	记账，吃饭，刷碗，卫生间。11:23-12:35
	5.	午睡 12:40-13:16
	6.	刷牙，散步1000不。13:16-13:42
	7.	日记。14:40-14:43
2.	badgerIO
	1.	fast16-papers-lu.pdf
		1.	看完一遍 13:52-14:31 看的时候不断走神。
		2.	NEXT: 整理笔记。
		3.	NEXT: 和冬卯讨论
		4.	把技术日志保存在BadgerIO里面。14:54-16:01 16:13-
			1.	DONE: readline from file
			2.	DONE 从命令行读取文件。
			3.	把文件缓存
				1.	16:01 已经可以匹配到key。
			4.	转为byte写入badgerIO。
		5.	golang需要尽快系统学习，感觉现在仅仅是当c语言用。
3.	DQ6
	1.	识别战斗退出和全恢复什么也没发生的场景。
	2.	积累博客素材。

