9:40 2007-2-1
LED项目进展
1, 三端稳压器提供的电流不够。测量电流，更换大功率的稳压电源；
2, 软件。光敏电阻AD输入当电压在2.3-2.4时，继电器抖动，查软件。

12:14 2007-2-1
LED项目进展
1, 当蓄电池（用直流电源模拟）电压超过14.56v时，天亮变为天黑（用手盖住继电器模拟）时会有一个阶段控制LED灯亮的继电器反复吸合。
经过检查发现当三端稳压器输入电压增大时，带现有负载的情况下，输出电压会降低。当三端稳压器输入电压是14.6v时，其带负载的输出电压时4.0v左右。高于14.6v时输出电压继续降低，此时控制LED灯亮的继电器反复吸合。
查找L7805的数据手册，发现三端稳压器输入输出压差大于10v时，输出电流会降低。怀疑负载需要的电流超过额定电流。
解决方法：在蓄电池输出接两个独立的三端稳压器。一路接MCU和继电器，另一路接数码管。这样功能实现，而两个三端稳压器输出保持稳定，均在5.05-5.10之间。
2, 控制蓄电池充电的继电器电压现在是16.0v（软件设置的是15.8v，14.8释放（软件设置的是14.4v）），需要把它调整为14.8v
3, 单片机有时会复位。怀疑是接触不好，查***。
4, 蓄电池需要的容量：36W/12v=3A，假设三天
5, 给数码管加一个开关，不用时关闭LED数码管和对应的三端稳压器***。
给后勤看的时候是否需要再焊接一个板子，里面尽量少用单根的连线。
更换为大功率的三端稳压器。

15:33 2007-2-1
LED项目进展
1, 蓄电池充电过充保护: 蓄电池电压高于14.8v时，太阳能电池板与蓄电池断开；降低到14.1v连接。
蓄电池电压降低到11v转为市电供电。蓄电池电压升高为12.5v时转为蓄电池供电。
不接LED灯时：不使用数码管0.02A，使用数码管后0.11A。所以数码管的电流是0.09A。
2, 需要考虑如果蓄电池极端放电时如果蓄电池电压过低，需要考虑第二条线路保证单片机能正常工作和蓄电池不损坏。现在考虑是市电给蓄电池充电。

16:16 2007-2-1
LED项目进展
还需要的工作：
1, 软件写文档（完成，待检查）；软件完成调试：按键切换23:59:50和4:59:50（完成）。用三个LED灯表示系统状态。（完成）
2, 完成硬件原理图（完成，待检查）；
3, 硬件完成文档（完成，待检查）；
4, 总结需要改进的地方：包括根据系统电压5.10v调整AD阈值（完成）；市电做为备用电源。
5, 装盒放到楼顶测试。（暂时不做）
6, 把项目购买的元件放回元件柜。

17:39 2007-2-1
LED项目进展
1, 软件
(1)保留下午的演示程序和现在的程序。
tai_yang_dingwu_dong_kan.c是下午给吴老师和董老师演示的程序。实现：
功能一：天亮，一般情况下，充电。
功能二：天亮，当蓄电池电压升高至15.1V（4.2V）时，停止充电，当蓄电池电压降低到   14.4V（4.0V）时，重新开始充电；
功能三：天黑， 12VLED灯亮，一般情况下是蓄电池供电；
功能四：天黑，当蓄电池电压降低至10.8V时，自动切换至市电供电，当蓄电池电压升高至12.24V时,自动切换至蓄电池供电；注：LED灯指示市电供电；
tai_yang_ding_bian_shi_an_jian.c是下午6点的程序。
和上面程序相比，实现了下面写出的功能(4)，问题是(2)。
(2)数码管闪烁，现在的刷新时间是8ms。需要改小。
(3)接上市电后，相当于按下的时间切换按键。怀疑是接上市电以后相当于是共地了。先接市电，再开蓄电池（用电源模拟）。
(4)实现了按下按键切换为23:59:48, 再按下按键变为4:59:50。这样可以测试在白天，0点到5点之间灯两种情况。

19:43 2007-2-1
网址, 公司
http://www.finetech1860.com/
深圳市梵特光电开发有限公司－红外线发射接收二极管、三极管、接收头、食人鱼数码管LED、SMD LED
产品,表贴红外接收器
http://www.finetech1860.com/productShow.asp?id=60

10:30 2007-2-2
LED项目进展
解决数码管闪烁问题：现在的刷新时间是2ms，文件名是“tai_yang_ding_bian_shi_che_di_ok_zj.c”。

10:48 2007-2-2
LED项目进展
1, 注意保密。
2, 要做的事：
(1)2月8日（周四）上午回学校，2月9日给后勤演示。
(2)外面画板子制板。
张旺写元件清单。
又出现了了数码管小时十位（RB1）显示不正常，比较上次小时个位出现问题的原因，现象是“00:00:00”改为“08:08:08”开始计时出了问题。思路：
(1)由于出错的芯片与上面正常的芯片不是同一个芯片，需要先用““tai_yang_ding_bian_shi_che_di_ok_zj.c”测试这个芯片是否正常。
(2)如果芯片正常，把““tai_yang_ding_bian_shi_che_di_ok_zj.c””代码“00:00:00”改为“08:08:08”，再试验。
经过实验，那个芯片有问题，更换第三个芯片，工作正常，联想1月27日数码管出的问题，当时RB1用做小时个位的显示，所以小时个位显示不正常，基本认为是该芯片（编号是“No.3”）引脚有问题。
看建辉软件文档。

14:08 2007-2-2
LED项目进展
软件：
406-413行的注释需要更新。
422行最好改成“else if 大于4.1v”
代码中按键切换的时间不统一。
统一改为23:59:48和4:59:52

19:28 2007-2-2
LED项目进展
软件：
建辉的问题：
1, 在子函数中不能如此用static  int8  k = 0 ;  因为：当k =  7时，下次进入该子函数中时，k=7,不会  = 1 ；因为
该子函数记住了上次调用后的值，，寄存器级分析？？？？？？？？？？？？？
答：static用在函数内部表示变量是局部静态变量，在编译时初始化(例如k=0)，函数执行时不会重新初始化，执行后这个变量的所用空间不会释放，变量值被保留，但是仍然只有本函数内部可以访问。对比全局静态变量或全局静态函数：在函数外声明，只有本文件函数可以访问，其余文件无法访问，可以用于封装。
2, 软件文档只写了经验总结，功能文档没有写。
3, 下载PIC单片机时是如何配置的？写出配置的含义。
4, MIAO_ZHI_60起什么作用？
所有注释的语句，如果确定没有作用。应该删除：例如行203，//int8     k                  = 1 ; 行229，//int       k
改时间初值。
所有注释语句是否有用？
行329的问号什么作用？
每个函数的作用。
SHI_JIAN_KONG函数中的时间调整部分，定义宏定义。

11:01 2007-2-3
LED项目进展
1, 除了建辉的软件文档，完成其他预定工作。建辉的文档估计周日会给我，希望本周完成这个项目。
2, 如果必要学习如何使用PIC16F877A的EEPROM。看在线编程，仿真，P149。
3, 下学期适当时机给实验室讲。张旺和建辉。

23:25 2007-2-4
***先写计划，再看前面剩余的。
1, 单片机开发板：(1)串口用几个？(2)注意电源部分的版图(3)；
2, LED项目文档：给耿师姐短信，文档尚未整理好，整理好立刻发。问孙建辉文档情况（与郭跃沟通之后）；
3, ARM开发板：订计划；

11:39 2007-2-6
杂记
http://article.ednchina.com/EDA/2007-01/20070127122528.htm
最大的两家 IP 厂商――ARM 和 Rambus，两家厂商不加入 EDAC， 并且不把自己看作 EDA 厂商的主要原因很简单：它们不是 EDA 公司，并且不想涉足一个多数人认为顶多会缓慢但稳定增长的行业。

15:08 2007-2-6
网址, 公司, RFID模块
http://www.comait.com/
台湾康迈特, 北京有分公司
CRM2400LNC使用nRF2400, 不是nRF2401, 但是距离达到300m. 我感觉原因是因为使用了GFSK, 这样抗干扰能力增强很多.
联系方式: 
Beijing Office
Add：Rm607,Tower A,Sigma Apartment, No.49 Zhichun Road.,HaiDian
Tel：+86（10）88099682
Fax：+86（10）88099683
Email：susan@comait.com; Sales@comait.com; Service@comait.com
We will offer 30 minutes consultation for free and will charge over time fee.

18:14 2007-2-6
单片机讲座, MSP430开发板
初步完成布局，明后天张健用2h以内时间完成最后的原理图修改。希望一周之内可以完成这个板子。

21:50 2007-2-6
单片机讲座, MSP430开发板, ARM S3C2410学习
经过考虑，如果分开准备两个内容精力太分散。打算做无线音频收发系统。
功能：包括一个主机S3C2410和多个从机MSP430F1611，使用nRF905 433MHz的无线通信模块。主机可以通过USB或网口连接PC机，下载音乐；通过无线向从机播放音乐；通过AD采集音频。从机可以通过无线播放主机发出的音频，也可以USB或串口连接PC机，做为PC机的扩展音频输出。
S3C2410主机部分包括液晶显示，UDA1341音频模块；远期要完成彩色液晶。技术上是学习ARM和嵌入式Linux开发，这是这个题目对于我自己的重点。MSP430F1611从机包括液晶显示，DA音频输出模块。关键是建立具有操作系统基本功能的嵌入式系统。这个项目还要完成自己对于代码量的要求。预计今天暑假完成，为找工作以及毕设中基于FPGA的嵌入式Linux开发做进一步的准备。
以这个内容为线索，进行单片机讲座。这样单片机开发板就没有必要做诸如八段数码管等基础功能。所以现在需要做的工作：
1, 完成原有MSP430开发板要做的工作；
2, 查169/1611的DA能否做音频，做一个简单的喇叭和一个带功放的音频输出。
3, 画S3C2410的转接板：(1)液晶。两个2.54间距5*2插座转为1个2.0间距20*1的插座。2410板子上2.0间距液晶接口去掉其中的VCC和GND转为2.0间距连续IO口，和2.54间距的连续IO口。(2)nRF905模块的转接口。同上。

22:22 2007-2-6
经验, MSP430
http://bbs.lierda.com/showthread.php?t=3106
1, 楼上大虾，可能是你误会了，我说的习惯一是指诸如在实验板布线和测试时的做法。
我们在做51时总习惯在万用板上焊接飞线连接电路，有时甚至是很长的飞线，但这对430来说却是有很大影响的，所以必须在一开始就要注意PCB布线的电磁兼容性。
第二，测量仪器（仪表）的使用习惯。430相对于51来说却是抗干扰能力差了些，但我所遇到的死机问题90％以上都是在测量时引起的（怀疑是仪器仪表静电干扰所致），后来我将仪表地与单片机系统地先连接起来，再进行测量，就没有遇到异常死机了。
还有，在线仿真时的死机也可能会导致上位机仿真程序的异常，光是单片机系统复位有时并不有效，之前我都是重启C-SPY来解决诸如死机和不能下载的问题的。
2, MSP430连接5v系统的方法
我现在跟5V接口就没有问题。一般人好象都是在接口的时候，在程序里面使用输出高电平来做接口，但是这时候一般都是只能达到2.9V左右，对CMOS来说，这个电平未必能够判为“1”。但是，我们为什么不能在需要输出高电平的时候，就修改为输入状态呢？这时候，430的高阻会将电压抬到4V左右。
3, 关于晶振起振问题，据我的经验，取决于你在焊接430片子所用的助焊剂，如果用纯松香酒精溶液，则没有任何问题***。MSP430开发板

13:38 2007-2-7
网址, MSP430, 开发工具
http://www.lierda.com/reward/index.html
http://www.lierda.com/reward/product_id/1/pro.html
EZ430 USB型开发工具 业界最小的单片机开发套件 EZ430让您开发产品更Easy
http://www.lierda.com/reward/product_id/2/pro.html
430F22X学习套件 430F22X学习套件在手 单片机入门易无忧

15:43 2007-2-7
LED项目进展
突然想分析一下数码管的功耗:
用数码管显示0-9十个数字时分别会使用6, 2, 5, 5, 4, 5, 6, 3, 7, 5个二极管导通, 假设二极管导通电流是3.v时20mA(一般不会到达这个数值, 但是现在LED板子的数码管二极管电压=IO口高电平-PNP管Vc=5-0.82=4.18v高于3.3v), 每个数字出现频率相等, 且不考虑驱动数码管的PNP三极管的功耗, 又考虑到同一个时间驱动的多个数码管只会有一个数码管显示数字. 因此数码管功耗=(6+2+5+5+4+5+6+3+7+5)/10*20mA=4.8*20mA=96mA.
对比(15:33 2007-2-1)测得的数据90mA, 考虑到当时使用的是安培档, 测量几十mA的数据误差较大. 上面算是中又没有考虑不考虑驱动数码管的PNP三极管的功耗. 所以可以认为估计的功耗基本准确. 如果在数码管的a, b..., g, dp的输入端加一个电阻降压, 使加在数码管的二极管两端的电压是3v, 功耗应该会降低很多, 这样更能延长数码管的寿命.

测量数码管电压: 6个数码管从左到右依次为1-6, 其中1是小时十位. 从每个PNP管从左至右依次是Ve, Vb, Vc.
1, 3.97 4.76 0.69
2, 3.96 4.77 0.61
3, 3.99 4.77 0.61
4, 3.98 4.76 0.61
5, 3.95 4.76 0.59
6, 3.95 4.92 0.99

17:21 2007-2-7
资料, 嵌入式, CPU, 光学逻辑
http://forum.eetchina.com/thread.jspa?threadID=1200024661
设计 CPU 需要哪些专业(续)
全光处理器的全面研究开始与美国人在80年代的“星球大战计划”，但是由于无法解决光寄存的问题，所以一直到现在没有任何实质性进展。
.
我认为，要等全光处理器技术应用于商业至少还需要15到20年的时间。未来，光电混合是一个很重要的方向，以色列在2003年9月研制出来的那东西其实是一个光电混合的DSP，迁入了一个全光ALU。不是适用于面向控制的PROCESSOR领域。也许以后的GPU上面会有些作为吧。
bamvor: 查这个帖子信息.待查.

17:54 2007-2-7
NFC
NFC基本知识
自: http://www.eetchina.com/ART_8800431570_617687_599c95e6200609.HTM
NFC最初被设计为采用13.56 MHz RFID频段，用于在非常短的距离间(10cm或更近)实现非接触的数据传输。它是一个开放标准，由ISO 18092 和ECMA 340标准定义，并与针对RFID的全球标准ISO 1443后向兼容。 
ISO/IEC 18092(NFC)标准。

18:13 2007-2-7
网址, 博客, 待看
http://wenzi.blog.dianyuan.com/article_list.php?blog_id=183&cate_id=7632
有很多LED的资料

18:35 2007-2-7
音频DA, MSP430开发板
TI PCM1770
http://focus.ti.com/docs/prod/folders/print/pcm1770.html#toolssoftware
看了数据手册和评估版使用手册，感觉使用简单。现在一是担心多学一个芯片耽误时间，二是芯片价格高。考虑是否在单片机开发板中加入***。

13:49 2007-2-8
LED项目进展
与蓄电池厂沟通：
蓄电池放电电压改为12.4v，10.8v太低了，修改***。
充电电压应该在13.6到14.5v之间。这个基本符合。

14:31 2007-2-8
LED项目进展
1, 架子打眼太阳能版；
2, 螺丝的长度，直径。买螺丝

11:00 2007-02-09
1、为后勤主管做系统功能展示；
提出的需求：a，系统不能工作时能给电工指示；b，保证所有灯能够同时亮、灭；
a要求现在已经满足. b要求考虑两个方案: (1)通过时钟控制天亮天黑(b)增加光敏电阻到4个, 这样采光均匀, 容易保证灯的同时亮灭.

2、搭建样机
   需要做的工作：为装蓄电池及控制电路板的箱子开窗（20*12cm, 是样机的临时性措施），解决采光的问题；最终产品设计时箱子应考虑采光的问题（可以开一扇透明的门）；
                 焊接蓄电池电路板的托架；
                 绝缘胶布、单股线、面包板用细线、玻璃胶；

19:29 2007-2-9
今日进展
1, LED项目, 完成开窗等工作, 需要买胶柱固定开发板. 周一要装出样品. 连接方法见2月9日笔记本上面的日志;
2, 单片机开发板: 
(1)昨天张健发现的MSP430不能布线的问题还没有解决. 把光栅原来的PCB版图复制到一个新的库文件中也不行. 下一步尝试完全自己画一个PM库.
(2)修改CP2102复位引脚还没有完成. 看下面网页复习RC复位. 其中有一个链接是用java做的RC延时的演示, 有电压曲线, 阻容的电压变化图.
http://forum.eetchina.com/thread.jspa?threadID=1100029836&tstart=0

23:17 2007-2-10
今日进展：
1, 单片机开发板：
发现换成其它的芯片封装，也不能布上线。

21:59 2007-2-11
单片机开发板进展
*之前不能对MSP430布线的问题是设计规则的问题。
如果把布线间隔(Clearance)设置为9mil，就没有错误了。（菜单Design-Rules->"Design Rules"-Electrical-Clearance）
现象：手动布线可以完成从芯片引脚到插头的布线，但是如果选择自动布线，Protel会把先前布好的部分线拆除。拆除的部分都是从芯片出发的线。
*具体解决过程：逐个排除问题原因：排除项目版图的问题，排除msp430库的问题（直接把光栅项目版图的430封装复制到MSP430开发板的库中）...，发现换成其它的芯片，也不能布上线。最终只有设计规则没有排除。
继续尝试：光栅板子的版图拆除所有的线，设置线宽为10mil，可以布线。但是如果把光栅板子版图中芯片的封装直接复制到MSP430开发板项目，并且手工指定了MSP焊盘对应的net，就不能布线。这时联想到MSP430这个芯片总是绿色（表示违反设计规则），确定就是设计规则的问题。由于430芯片不与任何芯片相连，而且板子没有布线，只能是430芯片违反设计规则。觉得可能是布线最小间距的问题。
经过尝试，选择只在顶层布线(布线对话框的Routing-Routing Layer)，且布线约束条件是Any时。对于MSP430和周边插头的布线效果最好。
*疑问：间距是10mil，为什么最小的布线间隔是9mil才行？
*需要改进的地方：如何让布线开始是直着出来的？如果从焊盘布线时是斜着的，就不能加补泪滴，这样影响信号完整性。
*注：
1, 选择菜单Aoto Route-Component，protel会检查版图的状态，等鼠标变成十字以后，用鼠标选择要布线的期间即可。

23:05 2007-2-11
单片机开发板进展
为MSP430芯片加入单独的设计规则：
1, Design-Classes->"Object Class Explorer"-"Net Classes"
加入MSP430芯片的net，除了电源和地以外。
2, 设计规则对话框中：在Routing-Routing Layers上面点右键，选择"New Rule"，把新加入的规则命名为MSP430，修改"Where the First object matches"为Net Class-MSP430。然后关键是设置规则为只在顶层布线。底层不布线。
3, 郭跃继续完成布线。
注：斜着连接到pad，也可以加补泪滴。

11:10 2007-2-12
LED项目进展
1, 写PIC16F877A的EEPROM的程序, 记录程序运行数据. 包括, 当系统状态切换时的时间，蓄电池电压, 光敏电阻阻值, 三个继电器的状态. 试验PIC16F877A的EEPROM的写入和读出. 考虑系统复位后, 不会覆盖旧的数据, 而是记录复位, 并且继续记录数据. 暂时不加入时间调整功能. 开始试验时记录实际时间和板子上的时间.
2, 把板子和蓄电池装在架子上
注: 董老师在百安居买的螺丝, 螺母, 垫片等.

12:49 2007-2-12
LED项目进展
877A的PIC16F877A的EEPROM大小为256字节。如果按记录14天的数据计算。每天可以使用18个字节。
每天需要记录的数据：当系统继电器状态切换时的时间，蓄电池电压, 光敏电阻分压值, 三个继电器的状态.
每天会至少有两次切换（天亮和天黑），所以每次状态切换可以使用9个字节的数据。时间的小时，分，秒各用一个字节。蓄电池电压用一个字节（AD读入的数据/1024*5.12*10），光敏电阻分压用一个字节（AD读入的数据/1024*5.12*10），三个继电器状态公用一个字节, bit0表示蓄电池充电继电器，bit1表示蓄电池放电继电器。bit2表示市电供电继电器。

.LOG
12:49 2007-2-12
LED项目进展
877A的PIC16F877A的EEPROM大小为256字节。如果按记录14天的数据计算。每天可以使用18个字节。
每天需要记录的数据：当系统继电器状态切换时的时间，蓄电池电压, 光敏电阻分压值, 三个继电器的状态.
每天会至少有两次切换（天亮和天黑），所以每次状态切换可以使用9个字节的数据。时间的小时，分，秒各用一个字节。蓄电池电压用一个字节（AD读入的数据/1024*5.12*10），光敏电阻分压用一个字节（AD读入的数据/1024*5.12*10），三个继电器状态公用一个字节, bit0表示蓄电池充电继电器，bit1表示蓄电池放电继电器。bit2表示市电供电继电器。
(18:18 2007-2-12)
AD读入数据的记录方式改为"AD读入数据>>2"，因为AD数据在0-1023之间，右移两位就在0-255之间（即在一个字节范围之内）。

14:05 2007-2-12
还要记录系统上电时的状态（完成）

15:15 2007-2-12
PIC16F877A的PIC16F877A的EEPROM的数据，由topwin烧录器读取，自动保存在0x4200起始的地址。
  4200:  ff 01 ff 08 04 00 ff 01 ff 00 ff 09 06 00 ff 02 
  4210:  ff 00 ff 09 06 00 ff 01 ff 00 ff 09 06 00 ff 02 
  4220:  ff 00 ff 09 07 00 ff 01 ff 00 ff 09 07 00 ff 02 
  4230:  ff 00 ff 09 07 00 ff 01 ff 00 ff 09 08 00 ff 02 
  4240:  ff 00 ff 09 08 00 ff 01 ff 00 ff 09 09 00 ff 02 
  4250:  ff 00 ff 09 0c 00 ff 04 ff 00 ff 09 0c 00 ff 01 
  4260:  ff 00 ff 09 0d 00 ff 04 ff 00 ff 09 0d 00 ff 02 
  4270:  ff 00 ff 09 0f 00 ff 01 ff 00 ff 09 0f 00 ff 00 
  4280:  ff 00 ff 09 10 00 ff 01 00 00 ff 00 00 00 ff 00 
  4290:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42a0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42b0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42c0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42d0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42e0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42f0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff ff 

16:24 2007-2-12
PIC16F877A的EEPROM的数据，由topwin烧录器读取，自动保存在0x4200起始的地址。
  4200:  ff 01 ff 08 04 00 ff 01 ff 00 ff 09 06 00 ff 02 
  4210:  ff 00 ff 09 06 00 ff 01 ff 00 ff 09 06 00 ff 02 
  4220:  ff 00 ff 09 07 00 ff 01 ff 00 ff 09 07 00 ff 02 
  4230:  ff 00 ff 09 07 00 ff 01 ff 00 ff 09 08 00 ff 02 
  4240:  ff 00 ff 09 08 00 ff 01 ff 00 ff 09 09 00 ff 02 
  4250:  ff 00 ff 09 0c 00 ff 04 ff 00 ff 09 0c 00 ff 01 
  4260:  ff 00 ff 09 0d 00 ff 04 ff 00 ff 09 0d 00 ff 02 
  4270:  ff 00 ff 09 0f 00 ff 01 ff 00 ff 09 0f 00 ff 00 
  4280:  ff 00 ff 09 10 00 ff 01 00 00 ff 00 00 00 ff 00 
  4290:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42a0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42b0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42c0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42d0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42e0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 
  42f0:  00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00 ff ff 

16:32 2007-2-12
PIC16F877A的EEPROM的数据，由topwin烧录器读取，自动保存在0x4200起始的地址。
这次的数据除了AD读入的数值以外，都正确。AD读入数据有问题，原因是整数相除之前没有转为浮点数。为了提高效率，把AD数据直接右移2位，然后保存。
  4200:  ff 01 08 08 04 00 00 01 ff 00 08 08 06 00 00 02 
  4210:  ff 00 08 08 07 00 00 04 ff 00 08 08 08 00 00 02 
  4220:  ff 00 08 08 0c 00 00 01 ff 00 08 08 0e 00 00 00 
  4230:  ff 00 08 08 12 00 00 01 ff 00 08 08 11 00 00 02 
  4240:  ff 00 08 08 1a 00 00 00 ff 00 08 09 07 00 00 01 
  4250:  ff 00 08 09 07 00 00 00 ff 00 08 09 08 00 00 01 
  4260:  ff 00 08 09 08 00 00 00 ff 00 08 09 09 00 00 01 
  4270:  ff 00 08 09 0a 00 00 02 ff 00 08 09 0a 00 00 01 
  4280:  ff 00 08 09 0b 00 00 02 ff 00 08 09 0b 00 00 01 
  4290:  ff 00 08 09 0b 00 00 02 ff 00 08 09 0b 00 00 01 
  42a0:  ff 00 08 09 0c 00 00 02 ff 00 08 09 0c 00 00 01 
  42b0:  ff 00 08 09 0c 00 00 02 ff 00 08 09 0c 00 00 01 
  42c0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  42d0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  42e0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  42f0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 

16:52 2007-2-12
第一，二，四次试验时，有时LED状态指示灯没有正常点亮。怀疑是接触不良。（后来发现是蓄电池地线的插孔接触不好，见2-15, 2-15日志）

16:59 2007-2-12
第五次试验：
PIC16F877A的EEPROM的数据，由topwin烧录器读取，自动保存在0x4200起始的地址。
  4200: ff 01 08 08 04 af 17 01
	ff 00 08 08 05 af 85 02 //17->85, 意味着光敏电阻是2.66v时天黑。
  4210: ff 00 08 08 07 96 8e 04 //af->96，意味着蓄电池是10.8v时停止放电。
	ff 00 08 08 08 aa 8e 02 
  4220: ff 00 08 08 09 b0 6a 01 //8e->6a，意味着光敏电阻是2.12v时天亮，电压值远低于设定的2.4v，下次慢慢变化光线再试。
	ff 00 08 08 0a c8 17 00
  4230: ff 00 08 08 0d ca 83 02
	ff 00 08 08 11 96 86 04 
  4240: ff 00 08 08 12 90 6d 01
	ff 00 08 08 15 c8 19 00 
  4250: ff 00 17 3b 18 b8 13 01
	ff 00 08 08 0c af 85 02 
  4260: ff 00 08 08 0c af 76 01
	ff 00 08 08 0c af 83 02 
  4270: ff 00 08 08 0c af 72 01
	00 00 00 00 00 00 00 00 
  4280: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  4290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  42a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  42b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  42c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  42d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  42e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
  42f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 
(18:15 2007-2-12)
现有每组数据需要8个字节，一共可以保存32组，即最多16天的数据。
经过分析，PIC16F877A的EEPROM写入正确。
下一步要做的：
1, 加预定义：有无时钟控制，明天测试时不需要是时钟控制；
2, 加入防止覆盖EERPROM的功能；（完成）
第一个8字节。记录系统信息。其中第一个字节记录系统中有多少组数据。
3, 测试天亮电压是否是设定的2.4。（完成）
4, 写一个上位机的程序：把PIC16F877A的EEPROM读到的数据转化为表格，文字描述；
5, 看看写flash是否简单，flash空间有很大空余，如果写入flash，更便于以后的数据分析。
其中1-3要在19点前完成。

19:08 2007-2-12
  4200:  1c 00 08 08 1a 8c 1c 01 ff 00 08 08 1a 8c 19 01 
  4210:  ff 00 08 08 1a 8c 18 01 ff 00 08 08 1a 8c 19 01 
  4220:  ff 00 08 08 1a 8c 18 01 ff 00 08 08 1a 8c 16 01 
  4230:  ff 00 08 08 1a 8c 15 01 ff 00 08 08 1a 8c 17 01 
  4240:  ff 00 08 08 1a 8c 16 01 ff 00 08 08 1a 8c 14 01 
  4250:  ff 00 08 08 1a 8c 13 01 ff 00 08 08 1a 8c 15 01 
  4260:  ff 00 08 08 1a 8c 15 01 ff 00 08 08 1a 8c 13 01 
  4270:  ff 00 08 08 1a 8c 13 01 ff 00 08 08 1a 8c 15 01 
  4280:  ff 00 08 08 1a 8c 14 01 ff 00 08 08 1a 8c 13 01 
  4290:  ff 00 08 08 1b 8c 13 01 ff 00 08 08 1b 8c 16 01 
  42a0:  ff 00 08 08 1b 8c 16 01 ff 00 08 08 1b 8c 14 01 
  42b0:  ff 00 08 08 1b 8c 13 01 ff 00 17 3b 18 8c 16 01 
  42c0:  ff 00 17 3b 18 8c 16 01 ff 00 17 3b 18 8c 15 01 
  42d0:  ff 00 17 3b 18 83 14 01 ff 00 17 3b 18 6b 13 01 
  42e0:  ff 00 17 3b 18 88 16 ff ff 00 08 08 1a 8c 1f 01 
  42f0:  ff 00 08 08 1a 8c 1d 01 ff 00 08 08 1a 8c 1e 01 

19:24 2007-2-12
  4200:  1d 00 08 08 07 93 a9 04 ff 00 08 08 07 93 af 04 
  4210:  ff 00 08 08 07 93 af 04 ff 00 08 08 07 93 ab 04 
  4220:  ff 00 08 08 07 93 b3 04 ff 00 08 08 07 93 af 04 
  4230:  ff 00 08 08 07 93 af 04 ff 00 08 08 07 93 b5 04 
  4240:  ff 00 08 08 07 93 af 04 ff 00 08 08 07 93 b3 04 
  4250:  ff 00 08 08 07 93 b3 04 ff 00 08 08 07 93 ae 04 
  4260:  ff 00 08 08 07 93 b4 04 ff 00 08 08 07 93 b1 04 
  4270:  ff 00 08 08 07 93 ad 04 ff 00 08 08 07 93 b5 04 
  4280:  ff 00 08 08 08 93 ad 04 ff 00 08 08 08 93 ae 04 
  4290:  ff 00 08 08 08 93 b3 04 ff 00 08 08 08 93 ac 04 
  42a0:  ff 00 08 08 08 93 b0 04 ff 00 08 08 08 93 b0 04 
  42b0:  ff 00 08 08 08 93 a9 04 ff 00 17 3b 18 93 ae 04 
  42c0:  ff 00 17 3b 18 93 a9 04 ff 00 17 3b 18 93 b0 04 
  42d0:  ff 00 17 3b 18 93 aa 04 ff 00 17 3b 18 68 a8 04 
  42e0:  ff 00 17 3b 18 78 b3 04 ff 00 08 08 07 93 ac 04 
  42f0:  ff 00 08 08 07 93 a9 04 ff 00 08 08 07 93 b1 04 

19:35 2007-2-12
  4200:  0f 00 08 08 18 c7 14 00 ff 00 08 08 18 c7 12 00 
  4210:  ff 00 08 08 18 c8 13 00 ff 00 08 08 18 c8 14 00 
  4220:  ff 00 08 08 18 c8 12 00 ff 00 08 08 18 c8 13 00 
  4230:  ff 00 08 08 18 c8 14 00 ff 00 08 08 18 c8 12 00 
  4240:  ff 00 08 08 18 c7 13 00 ff 00 17 3b 18 c8 14 00 
  4250:  ff 00 17 3b 18 c8 12 00 ff 00 17 3b 18 c8 13 00 
  4260:  ff 00 17 3b 18 a4 14 01 ff 00 17 3b 18 6c 13 01 
  4270:  ff 00 17 3b 18 77 13 01 ff 00 ff 08 18 c4 12 01 
  4280:  ff 00 08 08 18 c5 14 01 ff 00 08 08 18 c6 13 01 
  4290:  ff 00 08 08 18 c6 12 01 ff 00 08 08 18 c7 14 01 
  42a0:  ff 00 08 08 18 c8 13 00 ff 00 08 08 18 c8 12 00 
  42b0:  ff 00 08 08 18 c8 14 00 ff 00 08 08 18 c8 13 00 
  42c0:  ff 00 08 08 18 c8 12 00 ff 00 08 08 18 c8 14 00 
  42d0:  ff 00 08 08 18 c8 13 00 ff 00 08 08 18 c8 12 00 
  42e0:  ff 00 08 08 18 c8 14 00 ff 00 08 08 18 c8 13 00 
  42f0:  ff 00 08 08 18 c8 12 00 ff 00 08 08 18 c8 14 00 

20:01 2007-2-12
PIC16F877A的EEPROM的数据，由topwin烧录器读取，自动保存在0x4200起始的地址。
  4200: 0c 00 08 08 07 b6 83 02
	ff 00 08 08 0c 96 9f 04 
  4210: ff 00 08 08 0d aa a2 02
	ff 00 08 08 11 af 78 01	//a2->78说明天亮，对应电压是2.4v 
  4220: ff 01 08 08 04 af 1e 01 //复位
	ff 00 08 08 0a af 82 02 //82天黑
  4230: ff 00 08 08 0c 96 9b 04	//96，市电供电10.8v
	ff 00 08 08 0e 96 78 01 //78，天亮
  4240: ff 00 08 08 12 c8 1a 00	//c8，过充保护。14.4v
	ff 00 08 08 18 be 7b 01 
  4250: ff 00 08 08 18 ba 83 02
	ff 00 08 08 19 96 85 04 
  4260:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  4270:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  4280:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  4290:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42a0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42b0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42c0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42d0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42e0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42f0:  ff ff ff ff ff ff ff ff ff 01 08 08 04 b6 13 01  
由于程序设计有问题。第一组数据在最后“ff 01 08 08 04 b6 13 01  ”。此外其它数据正常。前几次不正常首先是因为isUpdate使用后没有清零，还有可能还是接触不好。

20:33 2007-2-12
把数据第二位，修改为高8位表示复位。第八位表示日期计数。

20:45 2007-2-12
PIC16F877A的EEPROM的数据，由topwin烧录器读取，自动保存在0x4200起始的地址。
  4200:  10 00 08 08 04 8f 17 01 ff 00 08 09 0b 8f 83 04 
  4210:  ff 00 08 09 0f aa 8e 02 ff 00 08 09 11 ab 78 01 
  4220:  ff 00 08 09 11 ab 82 02 ff 00 08 09 13 ab 71 01 
  4230:  ff 00 08 09 17 c8 16 00 ff 00 08 09 1d c2 83 02 
  4240:  ff 00 17 3b 18 93 8f 04 ff 00 08 08 04 c2 d1 02 
  4250:  ff 00 08 08 09 96 c9 04 ff 00 08 08 0d 93 77 01 
  4260:  ff 00 08 08 0e 93 83 04 ff 00 08 08 0f 93 78 01 
  4270:  ff 00 08 08 13 c8 10 00 ff 00 08 08 13 be 10 01 
  4280:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  4290:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42a0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42b0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42c0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42d0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42e0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42f0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 

20:50 2007-2-12
有时PIC16F877A的EEPROM会擦除不成功，可以反复擦除，直到读出的数据是0xff。

20:54 2007-2-12
PIC16F877A的EEPROM的数据，由topwin烧录器读取，自动保存在0x4200起始的地址。
  4200:  1c 10 08 08 04 b7 18 01 ff 00 08 08 0a b7 83 02 
  4210:  ff 00 08 08 0c 96 98 04 ff 00 08 08 0c aa 96 02 
  4220:  ff 00 08 08 0e ae 78 01 ff 00 08 08 0f ae 85 02 
  4230:  ff 00 08 08 0f ae 70 01 ff 00 08 08 10 c8 1a 00 
  4240:  ff 10 08 08 04 cf 15 00 ff 00 08 08 06 ce 83 02 
  4250:  ff 00 08 08 09 96 94 04 ff 00 08 08 09 93 6f 01 
  4260:  ff 00 08 08 0b c8 12 00 ff 00 08 08 0c bd 11 01 
  4270:  ff 00 08 08 0f b8 83 02 ff 00 08 08 10 b8 76 01 
  4280:  ff 00 08 08 10 b8 85 02 ff 00 08 08 11 b8 78 01 
  4290:  ff 00 08 08 11 b8 86 02 ff 00 08 08 11 b8 73 01 
  42a0:  ff 00 08 08 11 b8 83 02 ff 00 08 08 11 b8 78 01 
  42b0:  ff 00 08 08 11 b8 83 02 ff 00 08 08 11 b8 78 01 
  42c0:  ff 00 08 08 11 b8 86 02 ff 00 08 08 12 b8 77 01 
  42d0:  ff 00 08 08 12 b8 83 02 ff 00 08 08 12 b8 78 01 
  42e0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42f0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 

21:06 2007-2-13
LED项目进展
2月13日
把太阳能电池板放到了三楼楼顶，安装时接反了蓄电池正负极，用于保护其它电路的二极管导通（原理图中的D1），这使蓄电池电流很大，连接蓄电池的细线部分被烧坏，同时保护二极管被永久击穿。更换蓄电池线且使细线尽量短，单片机正常运行。单片机板子启动时大约是18:40（板子时间是11:00）。
注：2-12下午开始，板子中分钟十位的数码管不亮，由于板子本身已经容易接触不良，没有细查原因。
***，可以把时间值写入PIC16F877A的EEPROM，这样即使单片机程序跑飞，也可以从原来的时间继续运行。
2月12日
1, 编写保存系统数据（写入PIC16F877A的EEPROM）的程序，源代码见“代码\光电楼顶测试版目录”。
功能如下：当系统上电或三个继电器状态发生变化，记录下列信息：
数据头(0xff, 8bits)，是否复位(1=复位, 4bits)，日期计数(小时每到24, 日期计数加一, 4bits)，时间的小时，分，秒各用一个字节。蓄电池电压用一个字节（AD读入的数据右移两位），光敏电阻分压用一个字节（AD读入的数据右移两位），三个继电器状态公用一个字节, bit0表示蓄电池充电继电器，bit1表示蓄电池放电继电器。bit2表示市电供电继电器。
根据PIC16F877A的EEPROM 256bytes的容量，现有每组数据需要8个字节，一共可以保存32组，即最多16天的数据。
2, 把数码管显示单独列为一个函数，这样便于除了“SHI_JIAN_KONG”函数以外的其它函数使用。但是用于数码管显示的数组名没有改，仍是“SHI_JIAN_TABLE”，
bamvor: 感觉今天下午一个人做东西效率挺低的，整个下午就解决了一个蓄电池正负极短路的问题。感觉现在还没有进入状态，明天14日，估计应该能把LED项目和开发板暂时结了。15,16两天看看arm的东西。春节过后时间就不多了。如果不抓紧时间学，开学时的实习就又赶不上了。

22:02 2007-2-13
LED项目进展
下一步：
1, 改为数码管_table, 查数码管用英文怎么说。
2, 重新编译下载，保证修改后的程序仍然正确。
3, 据此，重新整理LED项目的文档，主要是软件文档和“问题日志及未尽信息汇总”。
4, 明天和师姐一起换芯片，看数据，天亮天黑数据，包括日期计数是否正确。再次测试时，拔去数码管PNP管的电源。

0:07 2007-2-14
网址, 嵌入式, 待看, 
http://mculab.com/
芯片实验室, 待看

11:44 2007-2-14
LED项目进展
1, 有时不能正常工作的原因可能是三端稳压器电路的问题。
不正常时，PIC芯片GND和VCC电压为0，但是PIC VCC与电源地之间电压为电源电压(13v)。测量三端稳压器的输出电解电容两端电压也是0。会不会是地线有问题？经检验首先一个原因就是地线的问题，蓄电池地的插座左侧两个插孔接触不好，有时插进去但是实际没有连接到地线。

.LOG
LED项目进展
下一步：
1, 改为数码管_table, 查数码管用英文怎么说。
2, 重新编译下载，保证修改后的程序仍然正确。
3, 据此，重新整理LED项目的文档，主要是软件文档和“问题日志及未尽信息汇总”。
4, 明天和师姐一起换芯片，看数据，天亮天黑数据，包括日期计数是否正确。再次测试时，拔去数码管PNP管的电源。
　　　或　95105660
10:56 2007-2-14
1, 改为数码管_table, 查数码管用英文怎么说。
SHI_JIAN_TABLE改为Digital_LED_table。

11:52 2007-2-14
LED项目进展
EEPROM数据
2-13 18点 至 2-14 11点
  4200: 10 00 17 39 0f a9 76 01	//共有16组数据，时间23:57:15，可能是由于是关机时写入的数据，所以数据没有写全。
	ff 01 03 1f 0d ab 83 02 
  4210: ff 01 03 1f 0e aa 76 01
	ff 01 03 1f 16 ab 83 02 
  4220: ff 01 03 1f 17 ab 78 01
	ff 01 03 1f 17 ab 83 02 
  4230: ff 01 03 1f 17 ab 77 01
	ff 01 03 1f 17 ab 83 02 
  4240: ff 01 03 1f 18 ab 78 01
	ff 10 0b 00 00 ac 01 01 //此处是开始系统开始正常运行：11:00:00，
  4250: ff 01 00 02 0a ac 83 02 //两分钟后，天黑。这可能是由于当时有手电照射的原因。
	ff 01 00 02 0c ab 77 01
  4260: ff 01 00 02 0d ac 82 02
	ff 01 00 02 10 ab 77 01
  4270: ff 01 00 02 10 ab 82 02
	ff 01 00 02 11 ab 78 01
  4280: ff 00 0b 00 10 b1 a2 02
	ff 00 0b 00 1c b0 72 01
  4290: ff 00 0b 00 1c b0 a4 02
	ff 00 0b 00 1c b0 65 01 
  42a0: ff 00 0b 00 1c b1 9c 02 
	ff 00 0b 01 02 70 ba 04 
  42b0: ff 10 0b 00 00 b3 38 01 
	ff 00 0b 00 01 b3 83 02 
  42c0: ff 00 0b 00 19 b0 77 01 
	ff 00 0b 00 1a b0 9c 02 
  42d0: ff 00 0b 00 1a b0 75 01 
	ff 00 0b 00 1a b0 9b 02 
  42e0: ff 00 0b 03 17 b0 77 01 
	ff 00 0b 03 18 b0 83 02 
  42f0: ff 00 17 06 1c a8 78 01 
	ff 00 17 39 0d aa 86 02 
数据有问题，需要修改程序保证不会覆盖旧数据（地址是8位，超出255后又从00开始）。
17开始的时间是23点，表明当时系统关机（系统关机时时间总会变成23:59:48，很奇怪，查原因。）。

14:45 2007-2-14
LED项目进展
EEPROM数据
  4200:  0b 10 08 08 04 ac 01 01 ff 10 08 08 04 ac 01 01
  4210:  ff 10 08 08 04 ac 01 01 ff 10 08 08 04 b9 18 01
  4220:  ff 00 08 08 05 b9 86 02 ff 00 08 08 06 b9 68 01
  4230:  ff 00 08 08 07 c8 18 00 ff 00 08 08 08 bd 18 01
  4240:  ff 10 08 08 04 b7 18 01 ff 10 08 08 04 b7 18 01 
  4250:  ff 10 08 08 04 b7 18 01 ff ff ff ff ff ff ff ff 
  4260:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  4270:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  4280:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  4290:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42a0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42b0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42c0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42d0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42e0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42f0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 

13:11 2007-2-14
单片机讲座, MSP430开发板进展
1, 原理图：CP2102的SUSPEND接到了一个header上。将来可以接LED或接单片机IO口；
2, 原理图：USB的VBUS与Vccin相连，开发板使用USB供电。USB VBUS通过一个跳线连接到CP2102的VBUS和REGIN。这样如果系统仅仅使用USB口供电，不使用CP2102，就不需要连接这个跳线。
3, 原理图：删除了高速晶振；
4, DA功能的测试：通过键盘L6, L7的插座接到LED口，电压的变化会引起LED亮度的变化（不知是否可行）。
5, 加入了USB A口和按键的封装。

15:43 2007-2-14
LED项目进展
和耿师姐一起把板子放到三楼楼顶，并且在灯上绕上胶带防水。记录的数据如下：
空载时：蓄电池电压12.51；太阳能电池板19.71。
系统开始运行时实际时间是15:22，板子的时间约是15:02。

10:42 2007-2-15
LED项目进展
由于蓄电池地线接触不良，昨天和师姐装上不久后，系统就无法工作了，所以晚上灯没有亮。
解决：在同一排重新焊了三个地线插孔，堵上了原来两个接触不良的插孔。

10:55 2007-2-15
LED项目进展
原理图文档：
三个继电器从左到右依次是市电给LED供电，蓄电池给LED供电，太阳能电池板给蓄电池充电。

11:00 2007-2-15
LED项目进展
EEPROM数据
2-14芯片测试结果。由于蓄电池地线接触不良，昨天和师姐装上不久后，系统就无法工作了，所以晚上灯没有亮。
  4200:  13 10 0f 81 00 f0 20 00 ff 10 0f 00 00 60 00 01 
  4210:  ff 10 0f 00 00 ad 00 01 ff 10 0f 00 00 ad 00 01 
  4220:  ff 00 0f 02 10 ac 82 02 ff 00 0f 02 12 ac 76 01 
  4230:  ff 00 0f 05 1b ac 83 02 ff 00 0f 05 1d ab 5c 01 
  4240:  ff 10 0f 00 00 69 03 01 ff 10 0f 00 00 ac 02 01 
  4250:  ff 10 0f 00 00 60 02 01 ff 10 0f 00 00 ac 03 01 
  4260:  ff 10 0f 00 00 ac 03 01 ff 10 0f 00 00 ac 02 01 
  4270:  ff 00 0f 01 1a ad 82 02 ff 00 0f 01 1c ac 78 01 
  4280:  ff 00 0f 02 00 ad 82 02 ff 00 0f 02 01 ac 78 01 
  4290:  ff 10 0f 00 00 ac 02 01 ff ff ff ff ff ff ff ff 
  42a0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42b0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42c0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42d0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42e0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
  42f0:  ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 

11:31 2007-2-15
LED项目进展, 待做
2, 数据有问题，需要修改程序保证不会覆盖旧数据（地址是8位，超出255后又从00开始）。(完成)

12:15 2007-2-15
LED项目进展
再次到三楼楼顶测试. 蓄电池开路电压为12.37v。
大约从12:05开始测试。安装后为了验证系统是否正常运行，人工模拟天亮天黑3次，再加上系统手动重启一次，开始8组数据不需要分析。
(19:37 2007-2-15)
傍晚前系统停止工作。重新插拔地线后，系统正常运行。为了检测系统运行时数据，以及判断系统能够连续运行的时间，加入了小时监控(HOUR_MONITOR)，当小时经过了INTERVAL_HOUR时，记录系统数据。加入的代码在save_state函数中。
便于系统测试初期分析系统数据。

19:38 2007-2-15
LED项目进展, 待做
1, 完善软件前面文档，写清函数名。
2, 尝试flash读写。如果可以把数据记录到flash中。使用串口传回电脑。

11:12 2007-2-16
今日计划（暂时放弃）：
1, 完成flash读写和串口通信，通过一个跳线选择是正常工作，还是用串口传送数据。
(1)flash读写测试, 现有程序仅仅使用了1307字节, 数据保存在高4k的flash空间.
(1)-1 flash是分块读写的. 先测试块的读写, 用烧录器读出结果验证.
(1)-2 可能需要把临时数据保存在flash中. 然后整块写入flash.
(2)串口通信实验, 使用PC机超级终端. 
2, 如果有时间，完成在系统运行时的数据输出。
3, 远期使用ARM系统在线读写系统信息.

11:45 2007-2-16
flash读写保护：
配置位：WRT1:WRT0，11，表示没有flash读写保护。如果为了保护程序不被修改，应该使用flash读写保护。可以从低到高，保护1-4页flash（每页2k）。
CPD：EEPROM读写保护。1表示不保护

12:10 2007-2-16
开发板上的程序没有运行。查原因。
经检查，电源正常，但是晶振没有起振。

22:49 2007-2-19
存储器, 2007 IIC-China
http://www.cellphone.eetchina.com/ARTP_8800452334_2000007.HTM
美光科技和奇梦达都针对移动便携应用开发了性能更高的DRAM。
美光科技专为手机推出了CellularRAM，它采用了PSDRAM代替标准RAM，基于双晶体管单元架构，较传统的6晶体管单元架构SRAM成本更低。其与传统处理器和总线架构兼容，能
容易替换手机NOR总线上的传统的SRAM。
奇梦达公司则推出了首款183兆赫双数据速率同步移动RAM(DDR366)，数据传输速率为366 Mbit/s，比标准DDR266 DRAM快30%。另外，该产品不但具备电池供电设备所需的超低功
耗，而且采用了适用于板卡空间受限产品的极其紧凑的芯片级封装。该芯片采用了奇梦达自己的节电型沟道技术，并具有多项电源管理特性，例如TCSR(温度补偿自刷新)、PASR
(部分阵列自刷新)、OTCS(片上温度传感器)和DPD(深度省电)模式。该移动DRAM实现了工作电流最小化，从而延长了电池工作时间。

23:08 2007-2-19
降低成本, 电子产品++
http://www.mediaplayer.eetchina.com/ARTP_8800452539_2200001.HTM
索尼表示将通过以下的措施来促进成本的削减：缩小芯片面积、减少零部件数量、提高半导体成品率。其中，缩小芯片面积这一项措施已经在微处理器 “Cell”中开始实施。PS3上市之初，Cell是采用90nm工艺半导体工艺制造的，而最近开始采用65nm工艺半导体技术量产Cell，这样可实现成本的削减。

0:52 2007-2-20
网址, 网络硬盘
http://www.storlinksemi.com/about.htm

16:21 2007-2-25
嵌入式, flash存储, SD卡
microSD, 一共8个引脚，支持SD模式和SPI模式。SPI模式使用简单，SD模式速度快。

17:40 2007-2-26
实验室, 服务器, 内网
今天打开了实验室的服务器。开始为了省事只开了网关，但是不能上网。所以按顺序打开所有机器，结果可以从内网上网，也可以上ftp。

18:29 2007-2-26
嵌入式，arm, s3c2410, 远峰开发板学习(续)
函数void MMU_CleanInvalidateDCacheIndex(U32 index), 使用汇编语言实现("2410slib.s"), 如下:
;void MMU_CleanInvalidateDCacheIndex(U32 index) 
   EXPORT MMU_CleanInvalidateDCacheIndex
MMU_CleanInvalidateDCacheIndex  
   ;r0=index
   mcr  p15,0,r0,c7,c14,2
   MOV_PC_LR

其中, mcr是把数据从CPU寄存器移动到协处理器寄存器, 详见"ARM920t_TechnicalReferenceManual", P29 2.3节CP15协处理器寄存器映射总结, mrc相反, 是把数据从协处理器寄存器移动到CPU寄存器. 待看***
其余MMU的使用看来也比较复杂, 看来需要认真看文档, 上网找是否有入门的资料. 看2410驱动书.
暂时不看这部分, 先往下看.

20:18 2007-2-26
嵌入式，arm, s3c2410, 远峰开发板学习(续)
下面这个函数没有找到, 查option.h文件, "If you use ADS1.x, please define ADS10". 查"__rt_lib_init()"函数起什么作用.
#if ADS10   
    __rt_lib_init();                //for ADS 1.0
#endif

23:17 2007-2-26
嵌入式，arm, s3c2410, 远峰开发板学习(续)
阅读完"Uart_Init(0,115200);", 239行

11:23 2007-2-27
嵌入式，arm, s3c2410, 远峰开发板学习(续)
阅读到stop.c Test_PowerOffMode 503行,  

16:08 2007-2-27
C中的转义序列
http://tag.csdn.net/Article/cc0e5d88-1df3-4dc2-89ff-17814e631122.html
\a 警报 \b 退格 \f 走纸 \n 换行 \r 回车 \t 水平制表 \v 垂直制表 \\ 反斜杠(\) \‘ 单引号 \" 双引号 \? 问号 \Ooo 八进制(o表示八进制) \xhh 十六进制(h表示一个16进制数字)

16:41 2007-2-27
嵌入式，arm, s3c2410, 远峰开发板学习(续)
完成main函数中除了各个测试函数以外的内容, 从音频开始看测试函数.
阅读到2410iis.c.

19:55 2007-2-27
嵌入式, 总线
IIS是Inter-IC Sound (IIS) 的缩写, 全称是"Inter-IC Sound (IIS) bus interface".

20:26 2007-2-27
嵌入式，arm, s3c2410, 远峰开发板学习(续)
寄存器位操作, 例如要修改rGPBCON的4-9位为010101, 可以用下面的指令. ~(0x3f<<4)是复位, 4-9位都清零, (0x15<<4)是置位, 把4, 6, 8位设为1.
rGPBCON = rGPBCON & ~(0x3f<<4) | (0x15<<4)

20:40 2007-2-27
嵌入式，arm, s3c2410, 远峰开发板学习(续)
中断学习, S3C2410数据手册Page355.
1, S3C2410中断有SRCPND和INTPND两个pending寄存器, 当中断产生时对应SRCPND位置一, 经过仲裁器后, 同一时刻, 只有一个INTPND对应位会置一. 如果中断屏蔽寄存器INTMSK屏蔽了对应中断, 当中断产生时对应SRCPND位置一时, INTPND对应位不会置一. 清除pending寄存器置位的方法是对应位写入1, 如果写入0, INTPND寄存器对应位的结果不确定. 
If the FIQ mode interrupt occurs, the corresponding bit of INTPND will not be turned on as the INTPND register is available only for IRQ mode interrupt.
补充:
下面是S3C2410测试代码中的清除pending寄存器对应位的宏, 
#define ClearPending(bit) {\
                rSRCPND = bit;\
                rINTPND = bit;\
                rINTPND;\
                } 
//Wait until rINTPND is changed for the case that the ISR is very short.
根据注释, 第四行"rINTPND;\"的作用可能是为了延时, 以确保INTPND确实被修改. 不知是否正确. 待查***
2, SUB SOURCE PENDING (SUBSRCPND) REGISTER
对于AD, UART(3个)的中断会进一步判断到底哪个中断.
AD有INT_ADC和INT_TC(触摸屏)两个中断. 
UART有发送中断INT_TXDx, 接收中断INT_RXDx和错误中断(INT_ERRx, Generated when frame error, parity error, or break signal are detected.)
3, 需要补充仲裁器和中断优先级的内容. 
4, 中断服务程序还是不太理解. _ISR_STARTADDRESS和HandleEINT0之间好像对应不起来.
2410init.s中"IsrIRQ"部分, 好像是通过INTOFFSET和HandleEINT0查到直接中断向量的地址. HandleEINT0是第一个中断, 它的地址是起始地址.INTOFFSET的地址是0X4A000014. _ISR_STARTADDRESS的地址是0x33ffff00. 在2410测试程序中, 所有的中断地址都是以_ISR_STARTADDRESS为基址确定的.
5, (23:28 2007-2-28)
中断函数的编写参考2410测试代码中"Eint.c"中的Test_Eint, Eint0Int, Eint2Int和Eint11_19函数. 和下午预想的一致.
简单说有三步: (1), 对应中断使能; (2), 建立中断服务函数, 使用"__isq"关键字, 中断服务函数中一定要清除中断标志位(SRCPND和INTPND两个寄存器). (3), 最后, 对应中断函数的调用地址指针保存中断服务函数的地址. 例如, "pISR_EINT0=(U32)Eint0Int;"

23:22 2007-2-27
嵌入式，arm, s3c2410, 远峰开发板学习(续)
在阅读Record_Iis函数. 需要学习DMA的使用, 中断服务函数的编写. 查for(j=0;j<4;j++);所用的时间, 需要先会使用AXD. 并且完成"20:40 2007-2-27"没有完成的中断学习笔记.

9:57 2007-2-28
嵌入式，arm, s3c2410, 远峰开发板学习(续)
armcc用于编译arm32位程序. tcc用于编译thumb程序.

15:12 2007-2-28
嵌入式，arm, s3c2410, 远峰开发板学习(续)
AXD的设置.
今天下午使用CodeWarrior和AXD调试程序时, 单击CodeWarrior的Debug, 虽然打开了AXD, 但是AXD没有加载对应的映象。重装AXD后问题解决。对比前后的AXD，发现重装之前的AXD的Target部分没有ARM核。调试S3C2410程序时，Target应该是ARM920T。可以在AXD->Option->Choose Target中设置。现在使用的Target是Muiti-ICE

23:34 2007-2-28
自己建立的bamvor_test工程编译有问题, 决定暂时直接在2410test工程上加入自己的测试代码, 使用BAMVOR_TEST宏做为总的开关.

