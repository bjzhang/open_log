
11:14 2011-10-8
时间管理
0, 9:15

1, 本日

15:50 2011-10-13
时间管理
0, 

1, 本日
1), 和xingjie讨论VC0718dvs环境.  希望不影响已有的rvds4.0环境.
2), 和fengbeizhan沟通, beizhan希望我想一想在android里面研究些什么东西. 见"17:11 2011-10-13". 

15:53 2011-10-13
VC0718dvs, arm9, 软件环境
hi, xingjie

软件我放到了: \\10.0.2.36\sqmshare\share\zhangjian\software
rvds and softether\rvds service pack1 3.0是rvds3.0, 按照说明见rvds and softether\install and configure RVDS.txt
ESDE_V2-2_061128-Setup.exe是eclipse环境.

zhangjian

17:11 2011-10-13
1, 和fengbeizhan沟通, beizhan希望我想一想在android里面研究些什么东西.
2, 再看看android里面都有什么. 
1), framework: activity manager, windows manager, content provider, view system, package manager, telephony manager, resource manager, location manager, notification manager. 
这里面看起来phone, 和notification值得关注. 只是前者我也不熟悉. 后者是系统广播, 似乎也没必要深入看. 
2), libraries: surface manager, media framework, SQLite, openGL|ES, freetype, webkit, SGL, SSL, libc.
这里面看起来webkit值得研究, 但是东西有点多. 而且和882关系不是很大. 注: webkit资料: http://www.eoeandroid.com/thread-72790-1-2.html, D:\work\VC0882\Android\webkit.
另外SQLite也是. 虽然和content provider一起对于android数据管理很重要. 但是似乎和882关系不大. 
3, 需要看看android各版本都有哪些改动. 无进展
1), android 4.0见"18:14 2011-10-13". 
android4.0界面变化分析: http://bbs.gfan.com/android-2877099-1-1.html
4, 从882的硬件配置能否看出端倪? 无进展.
5, (14:21 2011-10-14)看看android开发者博客. 
6, 和dongliang讨论, dongliang觉得值得看的东西有zygote, dalvik, surface finger. 
也就说其实看android有两个角度, 一个是静态的某个部分, 一个是动态的流程(例如启动流程).
7, 看看其它android资源.
1), android文档收集: http://docs.huihoo.com/android/
2), android development tutorial: http://www.vogella.de/articles/Android/article.html

18:14 2011-10-13
android, 4.0, Ice Cream Sandwich, feature
1, android 4.0 feature
http://www.weiphone.com/gphone/news/2011-08-11/Android_4.0_13_points_you_need_to_know_239595.shtml
Android 4.0：你必须知道的13点
来自：驱动之家       点击：加载中...         投稿人：bqx911bqx
根据最新消息，代号为Ice Cream Sandwich(冰淇淋三明治)的下一代Google Android 4.0操作系统将会从第四季度提前到10月份发布，以便缩小安卓新机和苹果iPhone 5之间的上市时间间隔，那么Android 4.0究竟有哪些值得期待的地方呢？
1、单一系统
Android 4.0将只提供一个版本，同时支持智能手机、平板电脑、电视等设备。
2、 一流的新UI
下图是Android 3.1的用户界面 ，4.0将有不少改进。
3、开源
如果你是一个ROM的定制用户，那么你会对这条消息很开心，相信源码一旦发布，很快就能看到 CyanogenMod 8。
4、Hello 4.0
4.0的版本号就能告诉我们，这是一个大的升级版本。
5、基于Linux内核3.0
Linus刚刚发布Linux 3.0内核没多久，后来又更新到了3.0.1 。
6、通过Android Market购买音乐
看看下面文件夹中的图片，你或可知一二。 
7、多核处理器优化
现在各厂商都在推双核的智能手机，实际的效果如何我们不予评说，但Android 4.0将特别为使用双核乃至多核处理器的手机进行专门的优化。
8、运行速度比3.1提升达1.8倍
Google的人员只是这么一说，并没有提及这个性能具体体现在什么方面，因此我们不知道这是关于浏览器、GPU还是整体性能，只有等待。
9、集成Google电视和Chrome OS的智能停放
10、为OEM提供了官方的主题引擎
有了这个引擎，便可通过Google的升级程序更新到这些第三方的主题。
11、苹果游戏中心的一个真正的竞争者
12、支持现有的智能手机
据称现行所有运行Android 2.3的手机都有可能升级到4.0版本，这条消息是我喜闻乐见的，而Google官方的Nexus One和Nexus S将是第一批升级到4.0的手机。
13、新的摄影技巧以及虚拟摄像机
这将为开发者提供更丰富的摄像头控制API。

14:20 2011-10-14
时间管理
0, 14:00

1, 本日
1), beizhan希望我想一想在android里面研究些什么东西, 见"17:11 2011-10-13".

16:59 2011-10-14
公司, 行政, 运营管理, CFO, 吴培栋
1, 公司邮件:
吴培栋，加盟中星微电子运营管理部任CFO，直接向CEO邓中翰汇报工作。吴培栋先生毕业于美国宾夕法尼亚大学沃顿商学院金融与战略管理专业，获得硕士学位，加盟中星微前曾在美国洲际药业公司、广州康采恩医药集团、无锡侨联风电集团任职，他的Emai: wupeidong@vimicro.com
2, 自: http://tech.hebei.com.cn/430395/762637357735b.shtml
10月3日晚间消息，中星微电子(Nasdaq:VIMC)今天宣布，任命Wu Peidong为首席财务官，于2011年10月8日生效。

Wu Peidong拥有丰富的企业财务和管理经验，在科技和其他行业的中国和跨国公司中拥有20年的工作经验。在加入中星微电子之前，他曾担任管理咨询公司Dragon Bay Capital的中国董事总经理。此外他还曾担任过多家公司的首席财务官，包括西蓝天然气公司、China Medicine Corporation和AlliancePharm US LLC。此外，他还曾担任过摩托罗拉高级财务经理。Wu Peidong拥有宾州大学沃顿商学院MBA学位，以及印第安纳大学犯罪学硕士学位。

13:19 2011-10-17
VC0882, SV, sony游戏机
fengbeizhan转发邮件“转发: Sony's low cost AP Inquiry”
1, JunZhu邮件"Sony's low cost AP Inquiry"_20111010_1613
I had a F2F meeting Crusoe Mao in San Francisco during the past Oct. 1 holiday week. Beside the on-going PSI eye camera project exchanges. Crusoe showed me a joystick (similar to regular PSI II & III joystick), but this device is connected to TV component inputs (two for audio and one for video inputs) directly. The device has a TI Davinci processor (built around single core A8) and runs PSI I & II game simulator to play old time game titles on the TV directly. The device is powered by 4 AA batteries, so the low power is very important. Games are stored in a memory stick in the joystick. Crusoe told me Sony is looking for a cost effective solution of this prototype since the market demand to these ‘wonderful games’ is still strong if the price is right. 

I believe we have discussed this kind of potential with Sony early this year. Now, the opportunity could re-open again. TI chip quote to Sony is $6.4 in volume shipment. I have passed attached files (from Crusoe) to Liu Zixi for study. I think the 1st step is to verify whether 882 could meet Sony’s power consumption requirement, and 2nd to work out the price issue.

2, Liuzixi邮件_20111017_1125
Meeting Minutes:
target BGA: 604, 
OS : panda (Nucleus)
DDR: 单片 x16, LPDDR, 32MB, 166Mhz
power: discrete power elements
需要跑的module:
ARM (with Neon, 700Mhz), BUS(166Mhz), DDR (LPDDR, 166Mhz), 
DE,TVENC, VDAC, AUDIO CODEC,
SD (one),
不需要的module: --- clock gating
GPU, VIDEO CODEC, LCDIF,SIF,Nand,USB,other serial interface,EMI
test scenario:
Neon: JPEG encoder (480I), decoder is better
display:  几幅画面
aud : mp3
电源相关：固定电压
1)      ARM                   : 1.2v（up to 700Mz）
GPU/VIDEO      : off
CORE/PLL        : 1.2v
PMU                   : 1.2v
上面都接一个DCDC 
2) IO关联
3.3v LDO 连所有的digital IO power
3) audio codec
3.3v LDO
4) video DAC (连到digital IO power 3.3v LDO上)               
5) 其他analog(USB,SARADC,MIPI CSI)都接到上面LDO上
6) DDR
单独DCDC 1.8v
7) 开关机 --- 省电
8) strap pin: 不需要的电阻拿掉，尤其上拉
9) 暂时保留JTAG/UART,调试完成后拿掉
10)拿掉Nand 芯片,不用SD的上下拉电阻都拿掉
11)拿掉E2PROM               
schedule:
hardware ready: 本周3                                       
software ready: 
精简后的software          ---本周3
test software for sony        ---本周5

3, (14:33 2011-10-17)开会分配任务
1), 环境(新建环境, 删除不用的模块), clock(cpu 300/700MHz, 模块clock开关), jpeg decoder. 
zhangjian.
完成后发信, 请wenlei(display)和pingping(audio)接着做. 

4, (15:03 2011-10-17)
1), 建立了新工程. 删除无用模块的代码. 
问题: i2c是否需要?
2), 关闭clock, 在clkrst目录和VIM_PMU_Init().
编译通过后上传代码. 
3), 加入jpeg代码. 基本原则是不修改里面的文件.
(1), 原有的include文件如何保留? 
INCLUDES =	-I$(SRC) \
			-I$(SRC)/arm \
			-I$(SRC)/omxdl/demo \
			-I$(SRC)/omxdl/include \
			-I$(SRC)/omxdl/$(LIB_DIR)/api \
			-I$(SRC)/omxdl/$(LIB_DIR)/ic/api \
			-I$(SRC)/omxdl/$(LIB_DIR)/ic/jp/api

CCFLAGS += $(INCLUDES)
(2), 改写原有的main函数为aasp命令. 
4), 编译后出错
(1), 应该是变量赋值问题, 现在是到使用时才赋值: 到编译时
SRC := jpeg
INCLUDES =	-I$(SRC) \
			-I$(SRC)/arm \
			-I$(SRC)/omxdl/demo \
			-I$(SRC)/omxdl/include \
			-I$(SRC)/omxdl/$(LIB_DIR)/api \
			-I$(SRC)/omxdl/$(LIB_DIR)/ic/api \
			-I$(SRC)/omxdl/$(LIB_DIR)/ic/jp/api
CCFLAGS += $(INCLUDES)
中的"SRC"实际是, padc.
所以需要改为, 避免这个问题
SRC_DIR := jpeg
SRC := $(SRC_DIR)
INCLUDES =	-I$(SRC_DIR) \
			-I$(SRC_DIR)/arm \
			-I$(SRC_DIR)/omxdl/demo \
			-I$(SRC_DIR)/omxdl/include \
			-I$(SRC_DIR)/omxdl/$(LIB_DIR)/api \
			-I$(SRC_DIR)/omxdl/$(LIB_DIR)/ic/api \
			-I$(SRC_DIR)/omxdl/$(LIB_DIR)/ic/jp/api

CCFLAGS += $(INCLUDES)
(2), 这个是汇编里面没有加入include目录. 
armasm  --debug --keep --cpu=Cortex-A8 --predefine "SDRAM_FLAG SETL {TRUE}" --diag_style=ide   jpeg/omxdl/CortexA8/ic/jp/src/omxICJP_CopyExpand_U8_C3_s.s -o build/jpeg/omxdl/CortexA8/ic/jp/src/omxICJP_CopyExpand_U8_C3_s.o 
jpeg/omxdl/CortexA8/ic/jp/src/omxICJP_CopyExpand_U8_C3_s.s(17) : error A1023:  File "omxtypes_s.h" could not be opened: No such file or directory
jpeg/omxdl/CortexA8/ic/jp/src/omxICJP_CopyExpand_U8_C3_s.s(18) : error A1023:  File "armCOMM_s.h" could not be opened: No such file or directory
jpeg/omxdl/CortexA8/ic/jp/src/omxICJP_CopyExpand_U8_C3_s.s(21,9) : error A1163:  Unknown opcode M_VARIANTS , expecting opcode or Macro
jpeg/omxdl/CortexA8/ic/jp/src/omxICJP_CopyExpand_U8_C3_s.s(43,8) : error A1516:  Bad symbol 'CortexA8', not defined or external
armasm : 4 Errors, 0 Warnings

在jpeg\subdir.mk里面加入"ASFLAGS += $(INCLUDES)"即可. 

5), pingping给我提供的板子. 
D:\VC0882\panda_os\init_script\RVD_SV\Cpu_pll1_500_Bus_pll2_133_LPDDR_pll6_1Gb_1x32_dll_off_133.inc

6), 运行时出现undefined instruction. 原因是编译时没有加"-define=NEON=1".

7), bootloader打印不正确(乱码). aasp可以输入, 输出乱码. 怀疑板子问题. 请pingping帮我看看. 原因是2v8电源没有接. 
这次做这个东西又促进我要用qemu做软件开发调试. 

8), 为了jpeg支持panda_os malloc, 不能直接include driver.h, 在JPEGtype.h里面定义
#undef malloc
#undef free
#define malloc __JPEG_Malloc
#define free __JPEG_Free
extern void* __JPEG_Malloc(unsigned int size);
extern int __JPEG_Free(void *pBuf);
并单独建立VIM_JPEG_Driver.c, 定义__JPEG_Malloc和__JPEG_Free两个函数. 

9), 现在的问题:
(1), 输出buffer没有保留. 
(2), 给用户返回yuv的addr和size. 

18:33 2011-10-17
VC0882, 工作总结
参与sony项目：
1，	建立项目环境D:\VC0882\panda_os_sony). 删除无用模块的代码和时钟. 
2，	加入原有caijin jpeg decoder工程到panda_os_sony. 解码功能正确. 还确认一下api接口. 

10:10 2011-10-18
时间管理
0, 9:25

1, 本日
1), sony项目. 

10:33 2011-10-18
VC0882, SV, sony游戏机, 续
1, 今天修改了jpeg_dec_exit的参数. 并测试了sd卡读写. 发信.
hi, all

为sony项目单独建立了工程(D:\VC0882\panda_os_sony). 
1, 删除了无用模块的代码. 
2, 关闭无用模块的时钟. 
3, 加入jpeg_dec_main和jpeg_dec_exit两个arm neon jpeg解码api, 具体用法参见"D:\VC0882\panda_os_sony\jpeg\main.c".
4, 测试了sd卡读写. 
5, 由于工程编译选项有变化. 删除了所有的target. 请大家在"jpeg_sd_sv" target基础上建立自己的target. 

zhangjian

10:48 2011-10-18
arm, toolchain, YAGARTO, CodeSourcery Sourcery_G++_Lite

18:33 2011-10-19
时间管理
1, 本日
1), 编程练习: 加入了del和print函数. 下一步是实践最近新学习的gdb调试技巧. 

2, 次日
看看之前有什么需要做的事情, 如果没有, 计划把模拟器和编程练习交替做. 

10:28 2011-10-20
时间管理
0, 10:19

1, 本日
1), 听jiangbo AXI讲座. 

11:15 2011-10-20
IC training, jiangbo AXI讲座, 笔记
1, 为什么不能跨4k边界，因为axi里面每个slave都是最小4k地址。考虑总线是个通用的东西，不能是项目定制的。保证不跨边界，可以保证在任何系统任何情况下都不会在一次访问中访问两个slave。
2, read data interleaving: 不同id的read数据交织在一起。
3, 听完以后思考, 软件工程师为什么要学习总线知识：
1), 意识到系统中除了软件和ip还有总线，power等其他方面的因素，有问题找相关同事讨论。
2), 总线feature对于软件开发的影响。memory的乱序访问。

11:04 2011-10-21
时间管理
0, 10:00

1, 本日
1), 和wenlei一起看sony项目, 确认没有内存泄漏. 另一个mmu error未复现. 见"11:05 2011-10-21"
2), 看android4.0更新. 
3), 编程练习. 见"11:40 2011-10-21". 

2, 关注
1), wangwenlei发的sony项目, jpeg解码问题. 

11:05 2011-10-21
VC0882, SV, sony游戏机, 续2
1, wangwenlei今日邮件
内存泄露检测方法：在调用解码函数前后打印VIM_MMU_CacheGetAvailable(0), VIM_MMU_CacheGetAvailable(1)返回的可用内存
在jpeg_dec_main中会打印如下内容：
[MMU   ERROR]       VIM_MMU_Malloc status=-50,size=0x0002fd40,caller file = de/test/de_test_api.c,len=317
[MMU   ERROR]   [MMU   LOG]     VIM_MMU_POOL_LARGE  MAX available =17288
[MMU   LOG]     VIM_MMU_POOL_SMALL  MAX available =884632
can get max buffer is 0xd7f98
或者
[MMU   MSG]     warning: g_pMemDumping is null, no overflow check!
[MMU   MSG]     warning: g_pMemDumping is null, no overflow check!
[MMU   MSG]     warning: g_pMemDumping is null, no overflow check!
[MMU   MSG]     warning: g_pMemDumping is null, no overflow check!
[MMU   MSG]     warning: g_pMemDumping is null, no overflow check!
[MMU   MSG]     warning: g_pMemDumping is null, no overflow check!
[MMU   MSG]     warning: g_pMemDumping is null, no overflow check!
[MMU   MSG]     warning: g_pMemDumping is null, no overflow check!
[MMU   MSG]     warning: g_pMemDumping is null, no overflow check!
[MMU   MSG]     warning: g_pMemDumping is null, no overflow check!
[MMU   ERROR]   VIM_MMU_Free status=-15,pBuf=0x003aa440,caller = 0x0001c100
[MMU   ERROR]   VIM_MMU_Free status=-15,pBuf=0x003aa5d0,caller = 0x0001c10c
[MMU   ERROR]   VIM_MMU_Free status=-15,pBuf=0x003aa720,caller = 0x0001c118
[MMU   ERROR]   VIM_MMU_Free status=-15,pBuf=0x003aa930,caller = 0x0001c124
[MMU   ERROR]   VIM_MMU_Free status=-15,pBuf=0x003aab40,caller = 0x0001c130
[MMU   ERROR]   VIM_MMU_Free status=-15,pBuf=0x003cac10,caller = 0x0001c13c
[MMU   ERROR]   VIM_MMU_Free status=-15,pBuf=0x003eace0,caller = 0x0001c148
[MMU   ERROR]   VIM_MMU_Free status=-15,pBuf=0x0040adb0,caller = 0x0001c154
[MMU   ERROR]   VIM_MMU_Free status=-15,pBuf=0x002eeb30,caller = 0x0003ce7c
[MMU   ERROR]   VIM_MMU_Free status=-15,pBuf=0x002e0ce0,caller = 0x0003ce84

2, (11:07 2011-10-21)
和wenlei一起看sony项目, 确认没有内存泄漏. 另一个mmu error未复现.
(15:41 2011-10-21)下午又和wenlei一起看了一下. 
wenlei发现的问题是由于变量访问越界造成的, 用rvdebugger硬件断点很快定位了错误. 
之前的mmu error和内存泄漏问题都是由于aasp input string(Input path_input  = {toString, 256, NULL};) "size=256" 大于string g_jpeg_path(char g_jpeg_path[32]="/jpeg";)实际的size(32). 造成aasp把该string清零时写溢出, 正好g_pMemDumping在该string 128bytes范围内. 
调试时通过rvdebugger的hardware write断点(memory被写入时停止)很快定位了错误. 

18:26 2011-10-21
VC0882, 工作总结, 10月20日, 10月21日工作总结
1, 听jiangbo AXI讲座. 笔记:
1, 为什么不能跨4k边界，因为axi里面每个slave都是最小4k地址。考虑总线是个通用的东西，不能是项目定制的。保证不跨边界，可以保证在任何系统任何情况下都不会在一次访问中访问两个slave。
2, read data interleaving: 不同id的read数据交织在一起。
3, 听完以后思考, 软件工程师为什么要学习总线知识：
1), 意识到系统中除了软件和ip还有总线，power等其他方面的因素，有问题找相关同事讨论。
2), 总线feature对于软件开发的影响。memory的乱序访问。

2, 支持wenlei调试sony项目. 笔记: 
今天wenlei发现的问题是由于变量访问越界造成的, 用rvdebugger硬件断点很快定位了错误: 
之前的mmu error和内存泄漏问题都是由于aasp input string(Input path_input  = {toString, 256, NULL};) "size=256" 大于string g_jpeg_path(char g_jpeg_path[32]="/jpeg";)实际的size(32). 造成aasp把该string清零时写溢出, 正好g_pMemDumping在该string 128bytes范围内. 
调试时通过rvdebugger的hardware write断点(memory被写入时停止)很快定位了错误. 

3, 看Linux kernel的双向链表, 自己写代码实验. 

9:55 2011-10-24
VC0882, SV, sony游戏机, 续3
1, jpeg解码问题
wangwenlei邮件_20111020
附件中的jpeg文件解码时，停在omxICJP_DecodeHuf文件的M_ICJP_BD_VLD diffCategory, t1, t2, pDCHuffman,8, 4位置不动了
caijin邮件_20111021
请用cvsdir\VC0882\document\arm\neon\openmax\src\demo\JPEGdec.c替换sony版本中的JPEGdec.c
我在openmax sample code版本上测试通过，问题解决, neon版本没有试。

2, 项目总体进展
liuzixi邮件"答复: Sony's low cost AP Inquiry"_20111021_1910
到今天为止， 我们的整体demo环境取得了我们预期的进展：
1)       基于JPEG decoder (using ARM neon)+  TV + aud的软硬件平台已经正常工作
2)       获得了初步的power 数据，和竞争对手TI相比，目前基本是在同一水平线上。
数据如下：
CPU (Mhz)	TI power (mA)	Vimicro power (mA)
100	0.158	0.209
200	0.176	0.211
300	0.197	0.226
400	0.217	0.224
500	0.234	0.233
600	0.25	0.236
700	0.254	0.242
目前这个case里面neon的利用率还不是太清楚, 而且CPU 在单位时间里面loading是差不多的，所以 整体功耗随CPU频率变化不大。
下一步的计划：
1)   构建一个和sony比较相近的case （这个能否请sony提供现成的case给我们， Jun ？）
2)   硬件上进一步降低功耗 (包括DDR， 降压等等)
谢谢zou weiran, wang wenlei, liu xiaotao, Zhangjian, wu pingping等同事的大力支持！

10:20 2011-10-24
时间管理
0, 9:40

1, 本日
1), 看邮件. sony游戏机项目进展. 
2), 下载安装xmanager3.0 build0143, 解决代理上网中粘贴中文是乱码的问题. 
3), 实验linaro qemu, android成功启动(速度慢, 不能触摸屏和键盘无反应). 见"10:22 2011-10-24". 
4), lidongliang希望我有空看看android启动流程. 
5), 看linaro 11.11 plan. "15:49 2011-10-24"

2, 次日
1), linaro qemu试试直接在10.0.13.244服务器上运行, 估计就没问题了. 
2), 继续看linaro 11.10和11.09文档. 并整理已有linaro资料. 
3), 搜索android启动流程资料. 

10:22 2011-10-24
linaro, qemu, beagle, versatileep, 关注linaro在beagle和arm versatileep板子上的进展, 有对应的qemu模拟器可以运行, 续; 文档, 总结; mount sd image中的某一个分区, awk命令使用
1, 实验昨天下载的qemu和img
1), 编译linaro qemu
(1), ./configure --prefix=/opt/share/zhangjian/install/linaro/qemu_0.15.50_2011.10 --interp-prefix=/opt/share/zhangjian/install/linaro/gnemul_0.15.50_2011.10 --target-list="arm-softmmu arm-linux-user armeb-linux-user"
configure结不会显示creating Makefile, 开始还以为是没有configur成功, 其实没问题. 
(2), make, make install.
zhangjian@icp882-desktop:/opt/share/zhangjian/install/linaro/qemu_0.15.50_2011.10$ tree
.
├── bin
│   ├── qemu-arm
│   ├── qemu-armeb
│   ├── qemu-ga
│   ├── qemu-img
│   ├── qemu-io
│   ├── qemu-nbd
│   └── qemu-system-arm
2), 运行, 出错:
zhangjian@icp882-desktop:/opt/share/zhangjian/linaro/beagle$ ../../install/linaro/qemu_0.15.50_2011.10/bin/qemu-system-arm -M beaglexm -drive if=sd,cache=writeback,file=./beagle-ubuntu-desktop.img -clock unix -serial stdio -device usb-kbd -device usb-mouse -usb -device usb-net,netdev=mynet -netdev user,id=mynet
qemu: hardware error: no boot device found
CPU #0:
R00=00000000 R01=00000000 R02=00000000 R03=00000000
R04=00000000 R05=00000000 R06=00000000 R07=00000000
R08=00000000 R09=00000000 R10=00000000 R11=00000000
R12=00000000 R13=00000000 R14=00000000 R15=400140a4
PSR=400001d3 -Z-- A svc32
Aborted

3), 难道需要生成一下sdcards? 
参考: http://releases.linaro.org/images/linaro-n/alip/11.09/
# These values will change based on your system
$ SDCARD=/dev/sdb
$ IMGFILE=overo-nano.img
$ gunzip ${IMGFILE}.gz
$ dd bs=4k if=${IMGFILE} of=${SDCARD}

执行: 
dd bs=4k if=${IMGFILE} of=${SDCARD}
结果是一样的. 输出文件和源文件大小一样. 

4), (11:38 2011-10-24)
考虑用linaro-media-tool建立sd卡. 需要如下工具: 
To run linaro-media-create you'll need to make sure the following packages are
installed:
  - parted
  - dosfstools
  - u-boot-tools or uboot-mkimage
  - python-argparse
  - python-dbus
  - python-debian >= 0.1.16ubuntu1
  - python-parted
  - qemu-user-static >= 0.13.0 (only if you're running on x86)
  - btrfs-tools
  - command-not-found

根据提示安装了缺失的软件. 打包, 
zhangjian@icp882-desktop:/opt/share/zhangjian/linaro/tool/linaro-image-tools-2011.09$ ./linaro-android-media-create --image_file test.img --dev beagle --system ../../download/image/beagle_11.09/system.tar.bz2 --boot ../../download/image/beagle_11.09/boot.tar.bz2 --userdata ../../download/image/beagle_11.09/userdata.tar.bz2
文件下载地址"http://releases.linaro.org/platform/linaro-n/android/11.09/beaglexm/". 
(17:45 2011-11-15)image位置: /opt/share/zhangjian/linaro/beagle/beagle_11.09_create_by_lit.img"17:45 2011-11-15"

如果不是mmc设备就不能用"--mmc /dev/sdX"而是使用"--image_file test.img".
命令参考了(分别是beagle和VersatileEp的qemu文档)
https://wiki.linaro.org/Resources/HowTo/Qemu-beagleboard
https://wiki.linaro.org/PeterMaydell/QemuVersatileExpress

5), 速度很慢. 也许直接在Linux系统跑能快很多. 下载在244服务器直接实验. 

2, 在qemu SOC上运行android到底有没有意义? 
1), 相比google goldfish, 在真实板子上运行android可能可以做写针对真实板子的调试. 
2), 学习没有的硬件. 例如在qemu里面研究A9双核(通过vexpress-a9 ARM Versatile Express for Cortex-A9).

3, 结论:
android成功启动(速度慢, 不能触摸屏和键盘无反应)..
明天试试直接在10.0.13.244服务器上运行, 估计就没问题了. 

4, (15:52 2011-10-25)
在244服务器上直接实验(下面命令需要加sudo权限, 否则会提示没有SDL video device): 
zhangjian@icp882-desktop:/opt/share/zhangjian/linaro/beagle$ ../qemu/qemu-linaro-0.15.50-2011.10/arm-softmmu/qemu-system-arm -M beaglexm -drive if=sd,cache=writeback,file=./beagle_11.09.img -clock unix -serial stdio -device usb-kbd -device usb-mouse -usb -device usb-net,netdev=mynet -netdev user,id=mynet
速度比在远程运行快很多. 基本和在实际设备上运行差不多. (占用了244服务器100%的cpu).
发现也不能使用usb设备, 原因可能是usb controller本身不可用: 系统启动时提示: 
ERROR : Unsupport USB mode
Check that mini-B USB cable is attached to the device

完整log: 
U-Boot 2011.09-rc2 (Sep 26 2011 - 06:35:16)

OMAP36XX/37XX-GP ES1.1, CPU-OPP2, L3-165MHz, Max CPU Clock 1 Ghz
OMAP3 Beagle board + LPDDR/NAND
I2C:   ready
DRAM:  512 MiB
NAND:  256 MiB
MMC:   OMAP SD/MMC: 0
*** Warning - bad CRC, using default environment

ERROR : Unsupport USB mode
Check that mini-B USB cable is attached to the device
In:    serial
Out:   serial
Err:   serial
Beagle xM Rev A
No EEPROM on expansion board
Die ID #51454d5551454d555400000051454d55
Net:   Net Initialization Skipped
No ethernet found.
Hit any key to stop autoboot:  0 

看了要希望能在qemu里面调试android还需要有工作做. 

5, (14:57 2011-12-28)
mount sd image的某一个分区: 
自: https://wiki.linaro.org/PeterMaydell/QemuVersatileExpress
如下命令mount sd卡的system分区. 
(IMG=vexpress.img ; if [ -e "$IMG" ] ; then sudo mount -o loop,offset="$(file "$IMG" | awk 'BEGIN { RS=";"; } /partition 2/ { print $7*512; }')" -t auto "$IMG" /mnt/mnt; else echo "$IMG not found"; fi )
把2改为3是mount data分区. 
这句话的关键在于
$(file "$IMG" | awk 'BEGIN { RS=";"; } /partition 2/ { print $7*512; }'
awk语句的含义是找到符合"partition 2"这个字段的以";"分割的字符串. 打印第七个参数*512的结果. 也就是打印270336*512的结果. 
partition 2: ID=0x83, starthead 0, startsector 270336, 524288 sectors

15:49 2011-10-24
嵌入式, arm, linaro, 关注linaro 11.11 plan
0, 11.09 release
11.11 https://wiki.linaro.org/Cycles/1111/PublicPlanReview
看linaro的资料对于跟踪embedded技术还是很有帮助的.

1, Power Management
1), 11.09 release
Power Management
    * Sched_mc support for ARM has been accepted in mainline, it will be in the 3.2 kernel
    * The common Save/Restore for cpuidle code is working on Samsung Exynos platform.
    * Powertop is now available on Android.
bamvor: Sched_mc是为arm多核做的. 
2), 11.11 plan:
SMP
● High priority:
● sched_mc support for ARM
● cpuidle smp drivers
– Common heuristic for hotplug in the idle path
● Medium:
● idle code consolidation
– ARM releasing code in June; PMWG will help by converting
atleast one platform
● Low:
● Platform upstreaming (new TR)
– Misc. work that is blocking PMWG

Measurement and Tools: Energy measurement infrastructure

2, toolchain的重点在gcc, gdb和qemu
1), qemu工作
(1), linaro release要能在beagle和VersatileEp两个qemu simulator里面正确运行.
(2), 支持Cortex-A15. 
(3), 提高qemu效率:
a, from: https://blueprints.launchpad.net/qemu-linaro/+spec/arm-frontend-performance
This blueprint is for improvements to QEMU's speed, focusing on the ARM front end. This includes inlining helper functions and identifying places where we're generating suboptimal TCG op sequences. Say three weeks work including initial identifying and setting up to be able to run some plausible benchmarks to see how much we're improving.
2), Good backtracing 
Show the way forward on reliable backtracing by doing a libunwind based proof-of-concept
关注libunwind
http://www.nongnu.org/libunwind/


3, android
Linaro's Android
Goal:
A fully enabled tip Android build that runs on all boards
Kernel = tip + rebased android + LT's board patches
Android Platform = AOSP tip + board extensions + board binaries
1), We hope to release a full Android NDK with Linaro improvements.

AOSP: android open source project. 

4, graphics:
1), Embedded memory management
(1), Many DMA mapping services not well supported for ARM (x86-oriented guys found ARM hardware “weird”).

Blueprints
 Push Contiguous Memory Allocator (CMA) upstream
 Enhancements to dma-mapping API
 Define a buffer object sharing API
 KMS support for Linaro supported platforms

2), Compositing and OpenGL ES 2.0 benchmarking

3), GPU profiling
(1), 相关工具
glcompbench: A benchmark utility for OpenGL  and OpenGL ES 2.x based compositing operations.
glmark2: A benchmark utility for the OpenGL and OpenGL ES 2.x API.
compiz: A compositing window manager used by many distros, and the basis for the Unity desktop.
nux: An OpenGL toolkit used by the Unity plugin to compiz 
cairo-gles: OpenGL ES 2.0 backend for cairo library.
GLEW: OpenGL Extension Wrangler
GLProxy: A proxy library to enable runtime selection of OpenGL or OpenGL ES API.
(2), What we are carrying forward
skia: NEON detection work is done but stuck in upstream-review limbo.
GLEW: Initial OpenGL ES 2.0 support is done, but is still out for upstream review.
compiz/nux: Work was not completed during the 11.05 cycle.

5, kernel
11.11 Focus Areas
● Sub-arch Consolidation
● Storage Performance
● General Architecture Support
● Reliability and Serviceability (RAS)
● Android
● Release/QA Process
1), sub-arch consolidation
(1), Integrate board-level clock tree: 抽象arm通用的struct clk. 
2), Education/Documentation
Wiki page and updates of in-kernel documentation
● Driver best practices
● ARM SOC “porting guide”
● Device Tree documentation
3), Core ARM Architecture
(1), Research whether optimizations can be made to ARM's gettimeofday() code path to decrease context switches and accelerate performance.
(2), Memory Region Support
Allows for powerup/down of independent memory banks
看起来是和memory分配有关, 没太明白. \todo 继续关注. 

6, Office of CTO
Coordination
 Kernel maintainance (see Kernel WG plans)
 Memory Management (See Graphics WG plans)
 Boot architecture
 SMP

New Areas / Technology
 Server
 Hard float ABI
 LLVM
 Automotive

1), Boot architecture, 关注UEFI:
Unified Extensible Firmware Interface
http://www.uefi.org/home/
是希望做一个OS启动的通用机制. 

2), Server: 
Prepare the ground for a Server WG and
experiment with cloud-style and large scale
technologies

3), LLVM(Low Level Virtual Machine)
http://llvm.org/
LLVM(Low Level Virtual Machine), 想要为所有静态及动态语言创造出动态的编译技术.
自: Clang wiki
Clang (发音为 /klæŋ/ 类似英文单字 clang[2]) 是一个 C、C++ 和 Objective-C 编程语言的编译器前端。它采用了底层虚拟机（LLVM）作为其后端。它的目标是提供一个GNU编译器套装（GCC）的替代品。由苹果公司开发，而源代码授权是使用类 BSD 的开源授权。
自: LLVM 与 Clang 介绍, http://linuxtoy.org/archives/llvm-and-clang.html
除去 Clang 之外，LLVM 还被用在 Gallium3D 中进行 JIT 优化，Xorg 中的 pixman 也有考虑使用 LLVM 来优化执行速度，llvm-lua 使用 LLVM 来编译 Lua 代码，gpuocelot 使用 LLVM 可以令 CUDA 程序无需重新编译即可运行在多核 X86CPU、IBM Cell、支持 OpenCL 的设备之上... 我个人感觉 Apple 在开源界口碑较差（也许是我的错觉？），不过 Apple 也为开源界贡献了不少，Webkit，OpenCL（虽说只是个标准），Clang。我最为佩服的是虽然出身于命令行之上的 Unix 族系统，但有魄力写出自成体系的图形栈，其图形界面优美而人性化，可谓也为开源界贡献了自己的精神与思想。对于 Clang 这个很有潜力的项目，我希望其 C++ 支持（尤其是 template 支持）能够早日完善。因为 GCC 在 template 出错时的诊断信息如同小说一般...

An easily retargettable code generator, which currently supports X86, X86-64, PowerPC, PowerPC-64, ARM, Thumb, SPARC, Alpha, CellSPU, MIPS, MSP430, SystemZ, and XCore.

6, 缩写:
LEBs: Linaro Evaluation Builds

9:58 2011-10-25
时间管理
0, 9:45

1, 本日
1), 20' 看邮件. 关注viewsonic量产问题, 见"9:59 2011-10-25"
2), 1h 系统程序员修炼之道: 双向链表coding. 见"10:04 2011-10-25". 
3), 11:33-14:19 午饭, 休息. 
4), 20' 日记. 
5), 20' 午休. 
6), 20' 和xiaotao讨论SV板为什么愤怒的小鸟不能玩儿, 我感觉是使用分离器件电源板有问题. xiaotao会使用7882电源板. 
7), 40' qemu继续实验. "10:22 2011-10-24"4. 
8), 16:12-17:34 搜索android启动流程资料. 见"16:16 2011-10-25". 
9), 17:33-18:05 工作总结, 见"17:33 2011-10-25". 

2, 计划
1), 计划一天做coding一天学工具看资料. 目前计划是一天看"系统程序员修炼之道", 明天计划是要用xiaotao的笔记自己建立git, 然后继续看看linaro 11.10和11.09文档. 并整理已有linaro资料. 
2), qemu下正常运行android需要继续实验, 计划是能使用qemu调试kernel和module, 使用gdb调试library, 使用ddms和adb调试应用程序. 

9:59 2011-10-25
VC0882, SV, 量产, viewsonic(ChuangZhiCheng), BT music reboot, bt导致的dvfs不稳定
1, 之前发现蓝牙音乐播放时cpu 1GHz@1.4v不稳定(重启). 几个板子的实验发现1GHz@1.45v稳定. 大家讨论是按照这个结果给客户, 还是查为什么之前发掘1GHz@1.4v稳定, viewsonic却不行. "2"是zixi邮件, 认为应该查viewsonic不行的原因. 

2, liuzixi邮件_20111025_0948
这个升压超频本就是非正规做法，是foundry以及理论无法保证的（我们IC tapeout之
前的signoff 频率是625Mhz），只能依赖于具体的测试。超到1Ghz本身margin就很小，
现在这点margin在viewsonic这个板子上被系统吃掉了，难道这个不应该好好去思考和
分析一下吗？(之前发掘的板子上1.4v/1G用的很正常的啊)。 我们IC不可能针对每一个
板子都做大量的高低温测试。

3, huangchen邮件_20111025_1004
今天试着将arm供电的DCDC断开，用外部电源直接供电，系统不能启
动。后来改为外部电源和DCDC一起供电，1.4V，1GHz的时候就可以用
蓝牙耳机来听音乐，但同时进行其他操作的时候仍然会重启。
所以这个重启并不是蓝牙耳机的EMI影响7882引起的，应该是882在1.4V，
1GHz工作的时候比较临界，容易受外界干扰，电源有轻微的变化就有可
能导致重启。
同时也测了VDD_CORE, 和蓝牙芯片的电源，在重启的时候都没有发现
异常的情况。
以上是我们和AIC 的lile  测试的结果。外置电源给ARM 供电1.4V  1G也会出问题。
从这么多天的测试结果看，我没有看到不符合IC要求1.4V 电压而重启的现象。
发掘大批量出货的机器都是不带BT的。 而且发掘的机器也不带viewsonic的3d UI。系
统负担没有viewsonic的重。

4, liuzixi邮件_20111025_1009
同样是viewsonic的机器，BT的负载比不上WIFI的负载，但现在开WIFI的时候系统工作
正常，而开BT 音乐就有问题(但BT 传文件就没有问题)。 应该说我们还没有找到准确
的原因。

10:04 2011-10-25
编程练习, 系统程序员修炼之道, 续2, 双向链表coding
1, 上次通过valgrind找出的程序溢出问题.
开始看kernel链表操作函数. 今天希望是用kernel链表操作函数重写已有函数. 

2, 看kernel代码时看到"include/linux/poison.h", 似乎是给一些非法值, 保证非法访问时系统会出错. 

3, 用了一个小时修改完成. 引用了linux中list_add, list_del, list_for_each, list_for_each_safe. 
其中list_for_each_safe是用于迭代时可能删除当前节点的问题. 实际就是提前把当前pos->next取出来. 
/**
 * list_for_each_safe - iterate over a list safe against removal of list entry
 * @pos:        the &struct list_head to use as a loop cursor.
 * @n:          another &struct list_head to use as temporary storage
 * @head:       the head for your list.
 */
#define list_for_each_safe(pos, n, head) \
        for (pos = (head)->next, n = pos->next; pos != (head); \
                pos = n, n = pos->next)

16:16 2011-10-25
android, 启动流程
1, android总体启动流程: 
http://bootloader.wikidot.com/linux:boot:android
Android's boot up process is summarized below:
Stage 	Steps 	Comments
Boot-loader 	- 	Location: bootable\bootloader\legacy\usbloader
	init.S 	Initializes stacks, zeros the BSS segment, call _main() in main.c
	main.c 	Initializes hardware (clocks, board, keypad, console), creates Linux tags
		Displays "USB FastBoot". Boot from flash, or loops while usb_poll() awaits host PC connection
Linux kernel 	- 	Sets up the system, loads drivers, and starts running the first process init
The init process 	Setup file system 	Create and mount directories like /dev, /proc, /sys
	Execute init.rc 	This is the boot-up script, commands are using Android-specific syntax, see readme.txt
	Setup console 	
	Display "A N D R O I D" 	This is just a text msg written to /dev/tty0
	Zygote 	Zygot process in init.rc brings up Dalvik Java VM and starts the system server
	bootanimation 	Shows the animation during boot-up
Framework 	…. 	….

or http://www.androidenea.com/2009/06/android-boot-process-from-power-on.html

or http://hi.baidu.com/ghd_214/blog/item/f8deb577edd32417b151b946.html

2, 每部分详细功能 init
http://www.androidenea.com/2009/06/android-boot-process-from-power-on.html
*  A. The init process in Android will look for a file called init.rc. This is a script that describes the system services, file system and other parameters that need to be set up. The init.rc script is placed in system/core/rootdir in the Android open source project.
* B. The init process will parse the init script and launch the system service processes.

3, zygote and dalvik
The Zygote is launched by the init process and will basically just start executing and and initialize the Dalvik VM.

4, The system server
The system server is the first java component to run in the system. It will start all the Android services such as telephony manager and bluetooth. Start up of each service is currently written directly into the run method of the system server. The system server source can be found in the file frameworks/base/services/java/com/android/server/SystemServer.java in the open source project.

5, Boot completed
Added this part to the post on 20090831 since it is very useful and something I should not have left out from the beginning. Once the System Server is up and running and the system boot has completed there is a standard broadcast action called ACTION_BOOT_COMPLETED. To start your own service, register an alarm or otherwise make your application perform some action after boot you should register to receive this broadcast intent.

The separate boot steps and possible places to add your own functionality are covered in more detail in separate posts.

6, http://hi.baidu.com/ghd_214/blog/item/f8deb577edd32417b151b946.html
kernel
    * the kernel boots
          o core kernel initialization
                + memory and I/O areas are initialized
                + interrupts are started, and the process table is initialized
          o driver initialization
          o kernel daemons (threads) are started
          o root file system is mounted
          o the first user-space process is started
                + usually /init (note that other Linux systems usually start /sbin/init)
user space
    * the kernel runs /init
          o /init processes /init.rc and /init.<machine_name>.rc
          o activity manager is run (process name: servicemanager)
          o dalvik VM is started (zygote)
          o several daemons are started:
                + rild - radio interface link daemon
                + vold - volume daemon (media volumes, as in file systems - nothing to do with audio volume)
    * the activity manager starts core applications (which are themselves dalvik applications)
          o com.android.phone - phone application
          o android.process.acore - home (desktop) and a few core apps.
    * other processes are also started by /init, somewhere in there:
          o adb
          o mediaserver
          o dbus-daemon
          o akmd

7, 从资料看, android启动流程需要考虑kernel和userspace两部分. 
1), kernel里面需要考虑kernel deamon和android所需driver的启动. 
2), userspace是以init.rc和init.machine.rc为主线做的. 
userspace可以通过bootchart分析(http://elinux.org/Using_Bootchart_on_Android). 这个工具可以分析出andorid启动过程中启动了哪些进程, 这些进展有哪些IO访问, 运行了多长时间等等. 
bootchart官网: http://www.bootchart.org/
3), 还需要分析android启动时文件系统部分. boot.img, recovery.img等等. 
4), 此外还会涉及到: 
(1), android recovery mode. 
(2), 如何替换android boot animation
http://www.addictivetips.com/mobile/how-to-change-customize-create-android-boot-animation-guide/

8, 东西很多. 今天还是先看看init. init.rc
init.c在"system/core/init", init.rc由init parser并使用, 同目录的readme.txt说明了init.rc的语法, 可以看到init.rc包括四类语句: Actions, Commands, Services, and Options. 另外"README.BOOTCHART"也说明了如何使用bootchart. 

17:33 2011-10-25
VC0882, 工作总结, 10月24日, 10月25日工作总结
1, 10月24日, 10月25日工作总结
1), 看linaro 11.11(2011年11月) release plan. 
Linaro是arm联合TI, 三星等公司成立的非营利性公司. 目的是提供针对Cortex-A系列提供优化的嵌入式软件, 从中能看到很多新动向. 
linaro 11.11 plan分为android, toolchain, kernel, media, graphics, OCTO(office of CTO)几部分.

2), 在linaro qemu模拟器成功启动beagle(OMAP3) android2.3. 
在13.244服务器上, beagle模拟器启动速度比实际板子稍慢, 只是触摸屏和键盘没法使用. 
这个可能环境对于学习android应该会比较有用: 在beagle模拟器上运行android相比google goldfish会更为真实, 有可能做一些更底层的学习和研究. 相比实际的板子, 模拟器的一致性比较好, 而且编译调试.

3), 看android启动流程. 这里面会涉及到kernel, init(init.rc, init.vimicro.sh), zygote, system server等内容. 打算先从init开始. 

4), 看《系统程序员修炼之道》, 参考kernel代码写双向链表. 

13:12 2011-10-26
时间管理
0, 9:30

1, 本日
1), 9:40- aiguo, beizhan分配viewsonic任务. 
2), -12:00 和huangchen, bianrongguang, lijianping讨论viewsonic已有问题. 见"10:40 2011-10-27". 
3), -13:17 午饭. 
4), 取消: 总结viewsonic BT music reboot问题. 看lidongliang邮件.
5), 16:15-18:05 android启动流程. 
被6)打断. 
6), 16:20-16:29 17:30-17:49 bianyingfeng arm讨论, 见"17:49 2011-10-26". 
7), 工作总结, 见"18:05 2011-10-26". 

16:03 2011-10-26
VC0882, SV, Linux, dvfs, 修改cpufreq最高频率流程, viewsonic BT music reboot
zhangjian2lidongliang
#get wakelock
echo xxx > /sys/power/wake_lock
#set max freq 800MHz
echo 800000 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
#do some work
...
#set max freq 1GHz
echo 1000000 > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
#release wakelock
echo xxx > /sys/power/wake_unlock

16:17 2011-10-26
android, 启动流程, 续, init文件分析
1, 看网上资料. 
1), 百度baike
(1), android_init.doc: 从init开始分析了各个service的功能. 
(2), Android_init_启动过程分析.doc
(3), 用logwrapper调试init. 
(4), http://wenku.baidu.com/view/81dc25fc700abb68a982fbda.html
原文: 
blog.csdn.net/ruixj/archive/2010/05/26/5626816.aspx
Android init 启动过程分析1 
看p11的参考文档.
(5), 下面文章的框图不错. android booting分析
http://wenku.baidu.com/view/fcbc3422aaea998fcc220e65.html

2, 还是整理一下android启动流程的整体脉络.
init
	init works
	start service
		zygote
			dalvik
			start system server
				start ohter server
				lanuch home

还有init的property执行和最后的ACTION_BOOT_COMPLETED不知和上面的东西怎么个流程. 

17:49 2011-10-26
VC0882, VC0718, arm, Cortex-A8, 和bianrongguang讨论arm; 查Cortex-A8 L1, L2支持哪些属性: 是否支持write allocate
1, normal, out-of-order, 882 uhost ddr memory. 
2, 查Cortex-A8 L1, L2支持哪些属性: 是否支持write allocate
Cortex-A8 TRM, p153, Table 3-42 Encodings of the Cache Size Identification Register

18:02 2011-10-26
VC0882, 工作总结
1, 10月26日工作总结
1), 和AE讨论viewsonic BT music reboot问题. 详见lidongliang邮件. 
2), 继续看android启动流程, 从百度文库找了几篇文章看, 大体理解了android启动流程, 明天开始看code. 
android启动是分层次逐步启动的. 
init
	init works
	start service
		zygote
			dalvik
			start system server
				start ohter server
				lanuch home

10:10 2011-10-27
时间管理
0, 10:00

1, 本日
1), 30' 和xiaotao讨论为什么SV上小鸟跑不起来. peged. \todo 关注. 
2), 10:43-11:00 看邮件. 
3), 11:00-11:25 20' 整理callgraph资料, 见"11:22 2011-10-27". 
4), 11:25-11:50 15:16-15:30 bianyingfeng arm. 见"11:42 2011-10-27".
5), -14:05 午饭, 陶笛. 
6), 15:06-14:26 15:40-16:09 看mentor embedded资料. 下载nucleus readystart, 主要是想看里面的qemu. 见"11:05 2011-10-27". 
7), 14:34-14:44 16:16-16:56 android启动流程. 实际分析init.c, 见"14:35 2011-10-27". 
8), 14:45-15:11 休息. 
9), 16:57-17:52 youhai performance monitor讨论; youhai最近在做游戏优化, 看cpu, gpu上有没有低效率的地方(oprofile).
10), 工作总结. 见"18:24 2011-10-27". 

10:40 2011-10-27
VC0882, SV, 量产, viewsonic(ChuangZhiCheng), BT music reboot, 续
Lidongliang邮件_20111026
早上我和zhangjian，分别跟huangchen，bianrongguang和你 沟通了这个问题
关于创智成项目蓝牙耳机播放音乐，系统死机/重启问题
我们了解到的情况如下：
1. 蓝牙耳机播放音乐,在882 板子上面走sdio 通路,外接387芯片(wifi + fm + Bluetooth) 2. 现象:蓝牙耳机连接上以后,如果不播放音乐,则不会死机.播放音乐,就会出现死机/重启现象。但只要不用蓝牙播放音乐功能，其它场景很少死机。
3. wifi 上网, Bluetooth传输文件无该问题
4. 之前huangchen他们的实验发现：死机以后，arm供电大多处于1.4V，因此怀疑arm 切频是造成该问题的原因
5. 对此做了一系列实验
	- 不做arm切频，固定800MHz，1.25V. 无该问题
	- 不做arm 切频，固定1G，1.45V。无该问题
	- 不做arm 切频，固定1G，1.4V， 该问题出现概率有所降低，但问题仍然存在

我们的分析如下
1. 现象2说明，系统仅在蓝牙播放音乐场景死机，有可能蓝牙模块播放音乐（硬件或者驱动）本身有问题。了解到蓝牙的驱动以前也经过多次改动。问题矛头指向：蓝牙模块
2. 固定频率为1G，1.4V 不行，1.45V 可以。原因好像在于cpu 频率的margin。
3. 结合现象5， cpu 的切频有可能会是产生该问题的原因之一，根源原因并不在此。因为固定到1G，1.4V 通过会有此问题。
4. 结合上面几点，我们认为：
	切频不是根本原因
	蓝牙播放音乐时产生了一定干扰，该干扰导致cpu工作超出其margin，因此出现不稳定状况。
	- 注：我们不了解蓝牙，仅仅是推论。

可以尝试的软件上绕的方案
	在蓝牙耳机连接上以后，修改cpu动态切频最高频率为800MHz。从实验看来，此种情况基本稳定。 这样系统仍会切频，但最高就切频到800MHz，不会到1G，避免不稳定状态出现。
	在蓝牙耳机断开后，修改cpu 动态切频最高频率为1G。因为1G @ 1.4V 其它场景并没有出现不稳定。

对于系统的影响在连接着蓝牙耳机的情况下，系统性能有一定损失1G 到800Mhz。

具体代码修改：
AudioPolicyManagerBase.cpp 中函数
status_t AudioPolicyManagerBase::setDeviceConnectionState(AudioSystem::audio_devices device, AudioSystem::device_connection_state state, const char *device_address)中
1. 在handleA2dpConnection(device, device_address); 之前加上
	write_int("/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq", 800000); 2. 在handleA2dpDisconnection(device, device_address); 之后加上
	write_int("/sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq", 1000000);

其中write_int() 函数参考：
Vimicro\hal\liblights\lights.c 中
static int write_int(char const *path, int value)

有什么问题，可以找我或者zhangjian

11:05 2011-10-27
mentor, nucleus, ReadyStart; qemu, 可以学习里面的qemu参数和eclipse配置
1, ReadyStart for Nucleus - Evaluation Software
1. An activation code is required by the software for installation. When prompted, please copy the following key into the ”Installation Key” dialog box: 16871A96D4B4-21455813

 2. For additional information regarding this evaluation, open QuickStart in the ReadyStart IDE (EDGE) or the readystart_eval_quickstart.pdf document.

Support
If you have questions about this evaluation or would like to request additional product information, please email nu-eval@mentor.com.

2, mentor的工具使用eclipse3.6建立, 里面有一个arm926ej-s的qemu模拟器. 注意到里面使用了tcp/ip的串口, 这个可能很实用. 
命令: 
cmd /C C:\mgc\embedded\rseval-qemu\edge\eclipse\\..\..\nucleus\tools\scripts\uloader\uloader.bat serial COM1:115200:8:None:1 app C:\mgc\embedded\rseval-qemu\workspace\.metadata\.plugins\com.mentor.embedded.debug\temp\data.bin s 0x10064 l 0x10000 --proxy localhost 2159 TCP
c:\mgc\embedded\rseval-qemu>C:\mgc\embedded\rseval-qemu\nucleus\tools\scripts\uloader\..\..\..\..\tools\python2.7\python.exe C:\mgc\embedded\rseval-qemu\nucleus\tools\scripts\uloader\uloader.py serial COM1:115200:8:None:1 app C:\mgc\embedded\rseval-qemu\workspace\.metadata\.plugins\com.mentor.embedded.debug\temp\data.bin s 0x10064 l 0x10000 --proxy localhost 2159 TCP --fwds 1234,2345,2159 
C:\mgc\embedded\rseval-qemu\nucleus\tools\scripts\uloader\..\..\..\..\tools\qemu\qemu-system-arm.exe -net nic -net user -redir tcp:1234:10.0.2.15:1234 -redir tcp:2345:10.0.2.15:2345 -redir tcp:2159:10.0.2.15:2159 -M realview-eb -serial tcp:127.0.0.1:2155,server,nowait -m 256 -kernel C:\mgc\embedded\rseval-qemu\workspace\.metadata\.plugins\com.mentor.embedded.debug\temp\data.bin

11:21 2011-10-27
软件技巧, 工具, callgraph, 函数调用关系, 文档, 总结
1, 利用graphviz和cscope, 画出指定函数间的调用关系
http://www.openfoundry.org/tw/tech-column/8352-callgraphviz-cscopegraphviz-xdot-call-graph-visualizer

2, 静态调用关系分析工具一年前整理过, 见"36 Share\Linux\host\tools\call_graph". 当初的方法是egypt+codeviz+graphviz:
1), egypt利用gcc3的rtl文件分析出函数和函数调用. 我用的是gcc4, egypt也能用. 其实gcc4的编辑机制已经变了, 如果利用gcc4的机制可能效果更好. 
2), 用脚本把egypt脚本转为codeviz格式. 
3), codeviz: 本来是修改编译器的, 我只用了codeviz的脚本把egypt生成的完整调用关系(网状)转为单一函数起始的调用关系(树状). 
4), 最后用graphviz画图. 
5), bamvor目录 do_sdio_write.png和VC0830_bootloader\Usb_Boot.png等等都是这样生成的. 

3, 另外doxygen也可以做静态调用关系分析.

4, source insight菜单: view -> relation window. 可以查看函数调用关系, 数据结构关系, 类的继承关系等等. 由于是静态分析, 函数调用有时不准确(例如函数指针).

5, 动态调用工具: 
1), ftrace, 
2), gprof(没用过):
(1),http://oss.lzu.edu.cn/modules/newbb/viewtopic.php?viewmode=thread&topic_id=884&forum=13&type=, 使用Gnu gprof进行Linux平台下的程序分析
(2), http://os.51cto.com/art/200703/41426_1.htm, 使用gprof和graphviz分析函数调用关系.
3), kprof, 同gprof类似. 二者都可以做profiling.
4), oprofile似乎也可以. 

6, 基本工具介绍
1), graphviz: 矢量图工具, 功能和visio类似, 只是前者一般通过写code方式画图, 类似LaTex. 有Linux和windows版本. 
2), cscope: Linux下代码分析工具, 可以配合vim和emacs使用. 类似windows下的source insight.
3), ZGRViewer: java编写的graphviz文件浏览工具. 
http://zvtm.sourceforge.net/zgrviewer.html

7, 参考, 我没用过:
绘图工具MetaPost:
自: http://icl.pku.edu.cn/yujs/BSDFiles/html/MetaPost.html

11:42 2011-10-27
VC0882, VC0718, arm, Cortex-A8, 和bianrongguang讨论arm, Cortex-A8 L2结构; L2 debug tool; 意识到TLB
1, translation table是一类特殊的数据, 这类数据是给arm mmu使用的. 它也会进入cache. 在L1称为TLB(translation look aside buffer), L2只是作为普通数据看待. 
由于在L1里面instruction和TLB都有自己的maintanance操作. 所以memory一致性问题要考虑data, instruction和TLB三方面. 尤其是TLB, 这个容易被大家所忽略. 在kernel driver里面通常是考虑data maintanance, 有些情况下也会考虑到instruction, TLB有时会遗漏. 从882调试经验看, 考虑instruction时也要考虑TLB. 例如系统sleep时ddr进入self-refresh后, 要考虑所需translation table是否进入了L2 cache或tlb. 
2, 看yangxing cache debug tool, yangxing文档需要完善. \todo

14:35 2011-10-27
android, 启动流程, 续, init文件分析, 续
1, init代码"system/core/init". 
1), 先看readme.txt
(1), The Android Init Language consists of four broad classes of statements, which are Actions, Commands, Services, and Options.
(2), 如果希望debug, 可以用logwrapper或注释open null那句话.
logwrapper可以把log输出到logcat:
service akmd /system/bin/logwrapper /sbin/akmd
2, (16:18 2011-10-27)
andoird和传统Linux发行版一个重要区别就是从init开始, 就不同. 所以整个文件系统没有按照Linux文件系统规范做. 这也是GNU/Linux对android不满的地方. 
3, 参考"11:11 2011-4-30"建立ctags和cscope. 
4, 浏览init.c
1), service_start: fork.
回忆一下fork, return 0表示在child process; return n(n>0)表示在父进程, n表示child process pid; return n(n<0)表示在父进程, fork child process出错. 
2), ANDROID_SOCKET_DIR ("/dev/socket")
3), 查一下重启service的资料, 好像记得是小于4分钟不会重启多于四次?! \todo
4), import_kernel_cmdline()->import_kernel_nv(), 从"/proc/cmdline"读到kernel command line. 
如果在实际硬件上: qemu, androidboot.console, androidboot.mode, androidboot.serialno, androidboot.baseband, androidboot.carrier, androidboot.bootloader, androidboot.hardware

5), coding练习. 
get_first_command, get_next_command和is_last_command三个函数要看懂. 

18:24 2011-10-27
VC0882, 10月27日工作总结
1, 10月27日工作总结
1), 整理分析函数调用关系的资料.
2), 和bianyingfeng讨论arm debug tool. 
3), 试用mentor提供的nucleus开发环境(eclipse3.6). 只是个demo, 看不到nuclcues的完整source code. 
4), 继续看android启动流程, 开始实际分析init.c. 
5), 支持Ae youhai使用performance monitor. 
