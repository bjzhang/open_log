目录
1	概述(\todo整理重写)	3
1.1	我参与的882项目	3
2	建议，收获，心得	4
2.1	建议	4
2.2	收获	4
2.2.1	技术收获	4
2.2.2	工作方法的改进	4
2.3	心得	5
2.4	项目思考	5
2.4.1	资源问题	5
2.4.2	其他	5
2.5	存在的问题	6
2.6	个人发展的想法	6
3	mas review	6
3.1	Mas review方法	7
3.2	Timer	7
3.3	Interrupt Controller	7
3.4	其他	7
4	882的cpu子系统学习	8
4.1	Arm开发板的选型和早期学习	8
4.2	Arm调试架构的学习	8
4.3	Arm调试器调查	9
4.4	Cortex-A8体系结构的学习	9
4.4.1	架构变化	9
4.4.2	模拟器	10
5	开发环境的准备	10
5.1	开发环境的准备	11
5.1.1	升级开发环境到rvds4.0	11
5.1.2	改进了aasp	11
5.1.3	移植nucleus	12
5.1.4	为VC0882和VC0598改进sd代码	12
6	VC0882 test plan review	12
7	FPGA验证	12
7.1	Clkrst模块的验证(\todo 补充)	12
7.2	cpu subsystem验证	12
7.2.1	遇到的问题	13
7.2.2	Trace的调试	13
8	FPGA调试和环境支持	13
9	Linux porting	13
9.1	ICP Linux porting	13
9.2	882 Linux kernel upgrade	14
9.3	移植分析增进了对于kernel的了解	14
10	Linux training	14
11	Linux加压测试.	15
12	Linux其他学习	15
12.1	Linux kgdb机制研究	15
12.2	gdb, kernel模块调试"	16
12.3	Linux进程切换分析	16
13	bootloader	17
14	中断性能评估:	17
14.1	Nucleus部分:	17
14.2	Linux部分	18
15	其他需要关注的	18
16	文档	19
16.1	环境文档	19
16.2	FPGA稳定性	19
16.3	Cortex-A8学习文档	19
16.4	882调试器调查	19
16.5	Linux相关文档	19
16.6	Driver spec	19
16.7	搜集的文档	20
17	Issue和bug	20
17.1	Report bug	20
17.2	软件bug	21
17.2.1	FPGA阶段遇到的cache问题	21
18	备用材料	24

 

1	概述(\todo整理重写)
VC0882项目是一个手机和mid ap芯片，基于Cortex-A8处理器，支持ddr3，gpu，usb等。
882项目2009-09 kick off. 2010-12 tape out. 原计划2010-7 tapeout。
882项目是我完整参与的一个项目，这里我按时间顺序列出882项目我做的工作; 逐项工作描述工作大致内容, 收获, 心得。
在882项目中，我总结了13篇文档(\todo)和笔记。详见“文档”。
882中遇到的issue和bug。见“Issue和bug”。
这里只是指882 tapeout之前我参与的882项目部分, 简称为882项目. 
1.1	我参与的882项目
882项目分月份工作说明，后面会分任务详细介绍。这里面也列出了非882项目的事情。
阶段: 
	7月8月9月：主要工作在830， 816。882逐步开始预研工作。9月底882 kickoff后，逐渐以882为主。
	10月：我一方面做882 mas review和882环境准备, 一方面和zhiheng继续做830 Linux的移植工作, 这部分移植工作为后来882 Linux工作打下了基础, 如果能在830 Linux移植后立刻完成Linux移植文档会更好, 这样保证工作的连续性. 
听了linchuan的总结。邮件是：YangZuoXing邮件"转发: 830 & 816 memory review"20091029_1000。这个总结对于后面项目有帮助。
	11月：基本都在882上工作了。还是mas review和882环境准备的事情。本月实验了TI OMAP3530 beagle board android从源代码编译到运行。这段进行时间管理的实践, 虽然记录了每天做的事情, 但是缺乏整理的规划。
	12月：继续11月的工作，另外开始882 test plan review。由于zhicheng负荷太重，aiguo把816量产工作分配给我，本月有1/2--2/3时间在816量产上。通过816量产我熟悉了arm汇编和arm cache lockdown两部分内容为882环境打了基础。
	2010年1月：816/830量产事情逐步收尾。882 ICP开始coding。我集中精力学习arm，逐步阅读arm的文档，在OMAP3530上实验aasp。本月机器挂了一次，丢失了一些工作资料，提醒我一定要随时注意备份。
	2010年2月：这个月开始上FPGA，FPGA稳定性是大问题。本月继续上月工作：移植aasp到OMAP3530，Cortex-A8学习等。
	2010年3月：FPGA稳定性问题有了改善。移植nucleus到VC0882。
	2010年4月5月：FPGA环境支持。Cortex-A8和Coresight验证。
	2010年6月7月：6月份之前的工作已经收尾，开始882 bootloader工作。718中断性能评估。
	2010年8月9月10月11月：继续bootloader，bootloader主要是支持和修bug。Linux training。882项目和882 bootloader 模块review。
2	建议，收获，心得
2.1	建议
之前830项目就说要绩效面谈，后来没有消息了。这次我希望能有机会做绩效面谈，对于我2011年的工作，我也希望又更清楚的了解。例如2011下半年有什么安排。
现在Cortex-A9已经越来越多了，要想不落后，我认为vimicro也应该继续做基于Cortex-A9，A15的SOC。
2.2	收获
2.2.1	技术收获
在arm，clkrst，882开发环境（armcc工具和库，rvds4.0工具，nucleus移植）有很大收获。对于一个新的模块(Cortex-A8 subsystem)的深入学习, 感觉每个项目有一个模块深入学习很有意义. 之前830/816是对sd和clkrst的学习。
	经过882项目，arm和汇编都比原来熟悉很多。882项目之前我虽然对arm感兴趣，但一直了解不多，不论arm的mmu,cache还是汇编等都是在882项目周期中（包括816量产）学习的，至少可以说我在arm方面试入了门的，出了问题有了解决的思路。详见“882的cpu子系统学习”。
	对于芯片总体的了解。之前虽然使用过一些SOC，参与了830, 816等项目，对于芯片总体还是没有把握。882项目中我负责arm，clkrst等比较基础的模块，又最早参与了PFGA调试。这样对于882芯片的架构就清楚很多，我认识到要了解一个芯片和系统，需要了解和区分模块间物理连接关系（模块和总线，模块和外部含pad），时钟关系和power关系（这三部分也是模块初始化要做的）。例如说storage和peripheral两部分，在物理上是分别挂载在系统main AXI总线的。但是时钟方案上peripheral在storage下级。再比如对于一个模块，通常来说分为aclk，mclk，pclk三个时钟域，mclk是模块的主体。mas中会写明不同时钟域都有哪些逻辑，寄存器一般mclk域，如果没有mclk，只有pclk也是没法配置寄存器的。这些也有助于理解IC的software guideline。
2.2.2	工作方法的改进
882项目使我更加重视文档。我记录工作日志和搜集资料的习惯已经有5年了。在882项目中，我的工作日志更有调理，同时我使用重写的perl脚本可以快速搜索到需要的工作日志。882项目中由于遇到的问题多，时间紧，促使我更好的利用文档和工作日志。经过浏览/阅读相关文档，更容易在需要时找到文档。
	改进工作日志记录方式。
每段工作日志都有关键字，包括项目名称，模块等若干个关键字。例如“VC0882, Linux, traning, porting总结; 文档; 计划”
同类工作日志使用开始移植的关键字。例如830做Linux移植分析时都使用“Linux学习, 移植, 代码阅读”作为开始。
	改进工作日志工具。在editplus中加入macro和搜索脚本更快查找资料。
加入的macro包括向前向后搜索到新的section或新的时间管理section。
通过重写logAssistant脚本(bash -> perl)，可以很容易找到所需信息，提高工作效率。例如
查找本月某项工作的情况，例如12月882 bootloader我做了哪些事情。
查找某个技术问题，尤其是搜索资料很多时。
搜索我所有和某个问题相关的文档并输出。例如找出日志中与Linux cpio or ramdsik相关的内容。
	更加重视与其他同事或公司（例如arm）沟通。我本来性格比较内向，加上喜欢钻研，原来有问题更喜欢自己思考和解决。对于一些问题这样可以，最多是效率受到影响；另一些问题可能远超出了我的能力或超出了软件范畴，如果不能及时和其他组的同事沟通，或者和arm等vendor沟通，可能很难解决。
	工作方法的改进，882是我在中星微完成参与的一个大项目：
1, 项目中多和leader沟通。例如” 17:58 2009-12-24”.
2, 有问题及时报issue，882 Cortex-A8和coresight的bug当时都报了issue。
	利用上下班时间调整工作状态. 
我上下班时间比较长，其中有半个小时地铁时间，15分钟走路时间。我根据情况尽量充分利用了这个时间：
项目紧张且状态较好：路上看一些项目相关文档，例如Cortex-A8文档，Linxu kernel documentation等。
项目紧张且状态不好：看视频听音乐。
项目不紧张：考虑看一些对于自己长远有帮助的东西，例如时间管理，perl脚本等等。
2.3	心得
	充分利用脚本。Perl和正则表达式功能很强，有些重复性工作可以用perl或正则表达式去做。DRY(Do not Repeat Yourself”
使用perl处理reglist为自己需要的格式（D:\VC0882\document\tools\regdef_format）
使用perl从ddr init script生成Emi boot所需的ddr参数。（D:\VC0882\document\tools\ create_ddrc_inc_v2.pl）
使用rvdebugger脚本：D:\VC0882\document\tools\ rvds_scipt_example.inc, rvds_scipt_read_sp_relative_region.inc。
	要协调时间：用四象限方法区分紧急，重要等情况。时间管理，通过时间管理的方式安排工作；缩小时间黑洞（例如发现有很多时候每天有记录的时间不到6小时）。
	这次验证cpu部分, 一个是ICD, ICV, ICP三个组每天都讨论; 一个是有问题及时和arm讨论. 这些都加速了验证过程. 
	882的cpu子系统还是开始的有点晚, 如果能再提前一些, 应该对于882的进度会有帮助. 有些东西也许就不是限制了: 例如ddr不稳定, 例如ICE不够用其实都可以花时间想办法. 
2.4	项目其他思考
2.4.1	 资源问题
	资料不够或者是资源协调问题感觉很关键。
2010年4月1日的想法(“20:10 2010-4-1”)：
从882项目开始到现在, 几次因为资源问题影响项目进度. 
比如开始FPGA台子不稳定, 后来稳定了台子不够用, 在后来是台子够用了发现ddr颗粒居然
就买了10个: ICD要出1M sram版本和ddr版本多牵扯精力, ICP要协调使用. 
再比如PB-A8开始说借, 后来是买. 估计拿到手可能5月了. 网表freeze前用的时间不多了. 
精打细算没有错, 问题是项目schedule很紧的时候, 资源应该更充分.
	要注意工作的连续性, 如果要转移到其他工作, 一定要有阶段性的文档. 否则后面再后来会不连续. 
2.4.2	文档中的其它思考
	Mas review方法。
	Openocd调试工具，开源的调试工具，未来会对Cortex-A有很好的支持。参见“Arm调试器调查”。
	
2.4.3	其他
2.4.3.1	在每个人都有模块的基础上, 鼓励大家对于嵌入式和本领域的东西做长期跟踪. 这个对于team的长远发展和个人的长远发展都很重要. 
2.4.3.2	感觉现在team的事情还是很多, 当然是比原来一个一个项目好一些. 希望以后能有更多的考虑, 例如提高项目质量, 内部技术培训(例如李先静的<系统程序员成长计划>).
2.4.3.3	在882项目中, aiguo一直建议我改进已经的东西, 这种工作氛围我喜欢. 每个项目即使继承原来的东西，也应该力图改进，不能满足于能work。
2.4.3.4	882的奖金制度希望能延续下去，我个人感觉，3个月之内能拿到奖金效果会比较好，自己能真切感受到回报，如果周期过长就没什么感觉了。这样对于项目的下一个阶段也有促进作用。
2.4.3.5	定期和工程师交流。如果时间关系没法集中沟通，也可以考虑平均每人至多一年能沟通一次。感觉这样比较好。我刚来公司的时候，aiguo时常过来和我交流，多的时候每天都会交流，这样对于我融入team，清楚做什么事都很有帮助。
2.4.3.6	后面有时间多做一些内训. 882太紧了, 很多新东西都没有机会了解. 
2.4.3.7	没有进入598, 718项目，这样我能有大量时间做882前期准备工作。
2.4.3.8	882前期使用模拟器很有意义，应该重视模拟器。
2.5	存在的问题
882项目里面写c语言机会很少. 感觉自己c语言有退步. 
882 sd驱动本来计划是安排我整理代码, 移植Linux sd协议栈, 但是由于816量产(cache lockdown)和自己时间安排问题, 没有完成. 很遗憾. 
882项目开始比较注意写周报和记录每日工作, 后来周报没有坚持下去. 
2.6	个人发展的想法
除了现有工作, 在自己有时间的时候, 希望能继续分析kernel porting, 并且做882 qemu模拟器(目标是可以正确运行aasp和Linux kernel). 
3	mas review
我参与了clkrst, timer, interrupt, axi master DMA template，ddrc模块的review，前四个我是reviewer。timer和interrupt模块是和Liaozhicheng一起review的。
3.1	Mas review方法
Mas review是芯片设计中很重要的阶段，将来芯片功能能否满足要求，软件是否好用，FPGA验证有无局限，软件出错后如何定位问题等很多都需要提前考虑。在mas review阶段我和同事一起提出7条建议，最终接受4条。
从mas review这个阶段开始, 在882项目中我尽量与其它芯片尤其是定位类似或成熟设计对比. 看一看别人是怎么做的, 对于做好自己的芯片很有帮助. 
我当时总结的mas review步骤: "14:12 2009-10-16"（VC01600, VC0882, mas review, dmac, review步骤, review经验）
	回忆或请教相关同事该模块原来有无问题。例如基础模块与liaozhicheng讨论.
	阅读mas，一定要对该模块有了解，否则review很容易流于形式。
	看竞争对手的模块: 第一轮review时如果没发现问题, 这步是必选的. 比如今天看freescale i.MX35时 memory-to-memory方式提到可以支持rom, ram等memory, 才想到VC0882中没有指出memory是否包括rom. VC0830中不包括, 只支持sdrc下的memory做dma. 
	CVS check in并回复邮件. mas review完成. 
3.2	Timer
我们根据830 Linux porting的经验, 要求增加64bit timer和continues mode. 
64bit保证timer不会溢出，简化了软件处理。
Continues mode是指timer到时后继续计数，不归零不停止，下一次timer target=current+interval。这模式更符合Linux通用timer架构的优势，可以把clock_event_device和clock_source用一个timer实现。Continues mode这个功能其实mrd里面有要求，但是designer开始的mas把这个模式和periodic mode等同。
疑问（\todo）: 不过对于Linux timer移植，suxin与我和zhicheng理解不同。suxin的移植仍然是分开用的两个timer，后面有时间需要进一步研究。
3.3	Interrupt Controller
在interrupt review时我和zhicheng一起对比了其它SOC芯片包括TI OMAP3530, 三星S3C6410. 提出加入一些feature：包括auto-idle power-saving mode（不使用interrupt时自动gate本模块），VIC（Vector Interrupt Controller：简化软件中断处理，只是arm11和armv7虽然支持但是Cortex-A8不支持，所以确定是Cortex-A8后不再支持VIC），中断嵌套。
这些建议最后都没有采用，但是多关注竞争对手SOC这个思路我一直坚持做。
3.4	其他
axi master DMA template：这个模块是882多数模块访问memory的渠道，软件没法直接访问，对这个模块的review有利于对882系统的了解。后来882 FPGA调试中有几次的问题都和DMA template有关，包括sd卡读写0地址但也得到完成中断等。\todo：总结。
Ddrc：dashan是reviewer。在830我发现由于shadow寄存器不全造成clkswitch流程复杂，所以在882 review时我专门和CuiYunFei，JinWenJie讨论过这个问题。
Uart：我没有参与, 后来发现Linux porting时不是很好用: 一个是没法软件触发发送中断; 一个是寄存器定义不标准, 不利于利用kernel已有code. 如果当时协调一下时间，还是有可能提出一些改进建议的。
Sdio：在sd review之前我曾经给Designer DuanLianhua发邮件提出改进：VC0830项目中write single block等blk finish中断, write multi等dma finish中断, 容易给用户造成困扰, 希望能统一. 例如TI中用统一的TC(transfer complete表示)。
4	882的cpu子系统学习
882使用的Cortex-a8和Coresight调试环境与之前的830/816/598差异很大，公司内部也没有同事了解。所以我用的大量精力学习新内容, 包括参与arm的各次introduction和training,并和arm工程师多次当面和邮件交流。经过学习，感觉自己对于Cortex-A8和Coresight有了大致的了解，自己的知识扩展很大。这些积累对于后面的验证有很大帮助。
882 CPU子系统的提前学习，对我参与讨论IC design和882 feature都有帮助。
4.1	Arm开发板的选型和早期学习
882初期没有定arm11和Cortex-A8时，和zhicheng一起关注了arm11和Cortex-A8的开发板. 当时aiguo的思路是了解一下别人的arm11/A8芯片，并在这个芯片上移植aasp，实验882的编译环境。这个工作是在TI OMAP3530 SOC的BeagleBoard clone board上面做的. TI的OMAP3系列是推出最早的Cortex-A8 SOC 之一。当时已经有智能手机产品出现，而且也有成熟开源社区(beagle)支持，所以使用OMAP3530学习很有意义。
4.2	Arm调试架构的学习
Arm的调试架构有两类，一类是Cortex之前的基于jtag的调试方式；另一类是Cortex系列的基于Coresight的调试结构。二者的调试方式有很大差异，不过arm内部的debug寄存器是有继承的。
根据之前882的项目安排，开始是LiaoZhicheng，ShouJianNeng和Zhangjian一起做arm11最小子系统的实验。当时我对于arm jtag调试的方式完全不了解。通过一些资料（\todo 加入参考资料）和arm11 debug文档学习。当时由于有很多事情，为了提高效率我把相当一部分文档阅读工作放在了上下班的路上。通过学习我理解了基于jtag协议的arm调试方式，自己认为已经理解到可以根据arm11文档通过控制jtag扫描链读写arm寄存器，进而控制整个系统。
另外我也同时认识到调试SOC时，其实只是停了arm，SOC的其它模块还在正常运行。后来这一点对于882甚至718的环境支持都有帮助。
到后来，也知道882基本确定是使用A8，所以就开始看Cortex-A8的Coresight调试架构，由于我提前有准备，后来在Coresight设计中也提了要求，例如要求加入ITM。

4.3	Arm调试器调查
如前所述Cortex-A8调试架构有很大变化，原来调试器没法支持，我和zhicheng一起经过调查找到Realview ICE，openocd，华恒CodeHammerA等调试器。后面两个价格比较低，经过实验都可以在OMAP3530上使用。当时调查情况见882调试器调查。Openocd我做了一些工作，实验了Linux和Windows下编译openocd并调试OMAP3530的bootloader。
	Openocd学习
个人比较看好Openocd这种形式，因为调试器硬件简单，上层使用的gdb也很成熟。目前Linaro里面有人正在对openocd做改进，相信稍候就会对Cortex-A8有更好的支持（目前没法支持打开mmu时的调试）。
Openocd简述(自” 12:30 2010-1-26”)：
从arm linux kgdb分析可以知道, 支持gdb调试是个分层架构. 上层是对gdb调试协议的接口, 下层是根据gdb调试协议的请求控制具体硬件进行相应动作. 对于openocd这类支持多种architecture和多种server的硬件调试器.
上层除了接gdb还可以接tcl等. 
下层则支持不同architechture. 可以细分:
------cortex-a8-----
       |
--------adi v5------
       |
---jtag interface---
       |
------openocd-------
	Openocd的应用
有一次需要知道A8 L2 ECC和奇偶校验的配置，当时还没有realviewICE，使用openocd读出。
4.4	Cortex-A8体系结构的学习
4.4.1	架构变化
Cortex-A8相对于我了解的arm9来说是一个巨大的飞跃，所以这阶段的学习我投入了很大精力，每一次与arm工程师的交流我都很重视。
简单说Cortex-A8是全新一代cpu，以其为核心的生态系统（硬件IP，软件方案）逐步形成，我个人一直是把Cortex-A8和Intel Pentium类比。这里引用我“VC0882环境和Cortex-a8介绍.ppt”p14：
 
可以看出Cortex-A8的革新很大。结合SOC和芯片应用更能看出这一点：在android，ubuntu上Cortex-A的优化充分发挥了性能；arm在今年还联合了几个嵌入式公司做Linaro：专门为Cortex-A的各类软件做优化。现在一个包含Cortex-A，GPU，usb，wifi，3G等的系统几乎成了“最小配置”。
结合最近的Cortex-A15的发布，64bit arm处理器的传闻，我对这点更加确定。
需要和arm, oms(google android联盟), linaro有进一步的合作。

4.4.2	模拟器
882早期和ZhiCheng讨论时认为使用模拟器提前做些研究，尤其是Linux，u-boot的研究会有帮助。所以调查了能支持Cortex-A8模拟器，找到qemu和arm RTSM两种。后者不是开源的，rvds4.0里面自带的RTSM没法配置，如果希望跑Linux有困难。前者有一个OMAP3530的分支可以运行网上下载的Linux，后来Linux training时我尽可能利用了这个模拟器。
通过这些积累，发现要想实现代码的调试，硬件条件是需要能控制cpu，另外调试端有符号表会便于使用。不论openocd，还是qemu的gdbserver都是这个原理，我想android的ddms也是如此。
5	882开发环境
882开发环境的准备是我在882实际完成第一个开发工作。这部分工作很多，多数已经整理了文档，这里只是简单描述一下。详细情况见后面的文档。
5.1	开发环境的准备
环境准备包括升级开发环境，移植和改进aasp，移植nucleus等等。
当时aiguo给我分配的任务是：
Aiguo邮件"882 coding kick off"20100103_1001
zhangjian尽快熟悉A8，下个礼拜TI的转接板回来了，我们要开始尝试搭建环境，编写A8初始化汇编代码，建立A8的最小环境（bootloader），beizhan帮忙在882项目下面建立一个panda的目录，这个是882第一步调试环境，不考虑os，只需要有aasp就可以了，因此zhangjian需要熟悉一下598的环境；
5.1.1	升级开发环境到rvds4.0
arm有完整的文档说明如何一步一步做，相关代码我都上传到了CVS(D:\VC0882\mini_env\mini_c_env_base)中。
这里分析了rvds4.0库的初始化流程，arm runtime memory model等内容。这部分可以参考arm	文档。
882使用arm rvds4.0环境，之前使用rvds3.0, 二者有些差异, 所以有些工作放在了环境的升级。升级中发现原有rvds3.0系统初始化流程并不完全符合arm推荐的方式, 为了更好rvds4.0和将来的升级, 修改内容如下, 见"9:52 2010-2-21"-4-1):
涉及到函数和文件如下:
A, AppsEntry\init_src\asm\VC0598_Init.s, AppsEntry\init_src\Appstart.c
不再直接调用重载的"__rt_entry", 而是调用重载的"__main", 调用顺序如下:
"__main"->系统"__rt_entry"->系统"__rt_lib_init"
                          ->main->INC_Iniialize()
B, AppsEntry\init_src\io_custom.c: 
__rt_exit()不应该重载, main函数return时(实际我们的代码不会reture)调用顺序如下:
exit->__rt_shutdown->_sys_exit
C, Makefile
rvds4.0不在支持"--apcs /adsabi"这个参数. 删除.
5.1.2	改进了aasp
Aasp从830开始经过816, 598项目一直有改进，我在882环境准备中由于会阅读aasp移植层的代码，发现有些不利于移植，或不利于维护，做了一些修改，（引自我的工作日志"10:20 2010-2-1"(\todo 修改内容补充完整)）：
A, aasp fgetssubT也是单独实现的. 而且依赖与修改后的fgetc行为. 这个问题我认为很严重: 我们要么使用库(库下面只有桩脚函数), 要么不使用库(像我们的f_open虽然不方便, 但没有可移植性问题). 经过修改，目前882的aasp也可以运行在semihost情况下，万一将来没有uart硬件，也可以使用aasp。
B, 加入aasp子命令模式: 
C, 命令行模式下退格有问题. 
D, 修正命令补齐问题。
E, 支持putty等标准终端下的命令历史查找。

5.1.3	移植nucleus
Nucleus移植需要check mmu，cache代码有无变化；修改memory分配。
经过检查mmu不需要修改就可以使用。Cache代码需要修改。
后来为了解决cache line对齐问题，加入了可以根据cache size设置malloc对齐的功能。这样不论软件、硬件使用就都不需要考虑使用同一个cache line引入的问题。详见VC0882 panda_os\cache\VIM_CACHE_Driver.h，只要定义正确的VIM_CACHE_LINE_POWER，就可以保证malloc buffer是cache line对齐的。
5.1.4	为VC0882和VC0598改进sd代码
这个工作没有完成，后来882的sd代码是beizhan整理的。
这个任务本意是aiguo希望我在ICP 882正式开始验证前改进原有项目中sd代码，之前的sd代码经过xietao，beizhan，dongliang的编写和维护，能正常工作，同时有很大改进的余地。我自己之前也提出过希望改进sd驱动。当时计划2-3周完成。我的想法是直接利用Linux里面sd的协议栈，先在830 Linux下支持sd卡，然后把整个协议栈都移植出来。这样好处是将来不论使用什么sd/mmc设备都容易支持。
后来由于我自己移植830 Linux sd进展有些慢，加上816量产需要通过cache lockdown筛片子，这个事情就停下来了。自己感觉很遗憾，最近也很难再有机会做这个事情了。
6	VC0882 test plan review
Testplan里面arm，sd等模块我是ICP review。这项工作时间不长。
7	FPGA验证
7.1	Clkrst模块的验证(\todo 补充)
882 FPGA上clkrst模块和ASIC有差异。在mas review阶段我提出希望能尽量验证。后来实际验证了bus，ddrc switch等功能。后期有些事情是yangxing帮我做的。
7.2	cpu subsystem验证
cpu subsystem包括Cortex-A8和Coresight两部分. Testplan见”D:\VC0882\document\testplan\arm\ vc0882_a8_coresight_testplan.xls”
1), Cortex-A8已经有部分笔记(D:\VC0882\document\arm\笔记)和VC0882环境和Cortex-a8介绍.ppt作为总结和心得. 详细技术问题就不再详细描述. 
Coresigght部分主要包括debug和trace两部分, 这两部分都还没有总结文档. \todo. 
其实对于这两部分, 个人觉得做为目前主流SOC的代表架构(armv7-A), 有必要继续深入研究. 对于Cortex-A8的深入研究, 对于882的应用和将来做其它Cortex-A cpu或其它架构的cpu都很有帮助. 简单说就是Cortex-A8的ecosystem概念. \todo: 详细. 
这次验证cpu部分, 一个是ICD, ICV, ICP三个组每天都讨论; 一个是有问题及时和arm讨论. 这些都加速了验证过程. 
心得: 882的cpu子系统还是开始的有点晚, 如果能再提前一些, 应该对于882的进度会有帮助. 有些东西也许就不是限制了: 例如ddr不稳定, 例如ICE不够用其实都可以花时间想办法. 
7.2.1	遇到的问题
	ICD对于Coresight调试没有充足的准备，所以开始困难很大，coresight debug通路调试通过后huangwei做了总结：\todo加入总结。
	L2 cache由于ram integration问题出错。我验证时自己代码malloc也有问题。
7.2.2	Trace的调试
Trace调试脚本位置：D:\VC0882\panda_os\init_script\RVD\trace。
未完成内容: trace有很强大的功能(ETM和ITM), 需要单独用时间研究, 如果我没有时间, 希望也有其他同事做, 这个对于882调试尤其是将来android调试会有很大帮助.

8	FPGA调试和环境支持
882项目前期, 我有两个月左右把大量时间放在环境支持上. 感觉效果还不错. 如果能更及时的准备好文档, 可能会更好一些. FPGA环境支持包括RVI调试器，rvds4.0 eclipse工具的支持，帮助同事建立小环境（例如for ddr training等等），FPGA稳定性的支持，查看子板是否够用等等。
882 FPGA环境支持的难点是ICD对于virtex5的FPGA也不熟悉, FPGA不稳定需要SV和ICD team支持, 问题也比较复杂. 另外, 882和718这种层叠的方式, 自己感觉很不踏实, 这部分消耗的时间不太划算. 
另外也感觉很多同事不重视文档, rvdebugger和ICE的问题我多次发提醒大家看文档, 还是有很多同事直接过来找我, 为了赶项目进度我直接支持没问题, 只是千万别养成不重视文档的习惯. 当然, 像这次给大家整理文档的时间就挺好。
我在FPGA稳定性的文档见”FPGA稳定性”，其中列出了影响FPGA稳定性的7类问题。
9	Linux porting
9.1	ICP Linux porting
882的Linux porting原本是计划咱们team自己也会移植一个版本, 后来由于时间关系没有完成. 当时我和zhicheng各自独立的做过一些实验, 代码是完成了, 但是没有调通. 虽然830 Linux是完全zhicheng和我完整做过一篇, 但是882没有来得及移植, 说明还是有东西不了解.
9.2	882 Linux kernel upgrade
882 Linux是拿的zhaoyuan team的移植的Linux2.6.29. 后来和zhicheng, xiaotao一起做过分析, 并整理了代码和Linux porting文档. 整理后移植到了2.6.32和35, 不过整理后的kernel(2.6.32和2.6.35)长时间运行或加压时会出错, 怀疑是代码改进引入的问题. 
最终移植的总结文档: "\\10.0.2.36\sqmshare\Document\Linux\kernel\porting\VC0718&VC0882移植最小环境.doc".
9.3	移植分析增进了对于kernel的了解
(1), 对于Linux时间管理, 尤其是动态tick有了进一步的了解(仅仅是我的理解): Linux的动态tick机制和winCE的机制类似. 设置当前高精度timer下一次事件时, 如果发现cpu处于cpu_idle状态, tick时间会直接设置到下一次系统软timer到时的时间. 相当于本次tick变长了. (\todo 附录加入总结文档)。
(2), 后来的中断性能分析中看到suxin的irq处理, 每次irq异常到来时会把所有irq都处理完, 才会退出当前异常. 这个和我之前理解的不太一样. 
\todo: 指明xiaotao文档位置. 
(3), 运行Linux时, 如果打开了rvdebugger的semihost会很慢. 启动到用户空间时, 由于文件系统引起的缺页会导致用户空间和内核空间的切换, 每次到了内核空间rvdebugger都会检查是否是semihost, 这样速度会慢很多. 具体说明见Zhangpu邮件"Re: 答复: Questions about linux on Cortex-A8 FPGA (463020)"20100429_1629.
10	Linux training
组织和参与882, 718 Linux training, "\\10.0.2.36\sqmshare\Document\Linux\training", training内容详细说明见该目录的readme.txt. training包括如下内容:
(1), 1_Linux_env_and_driver_introducton1: 
A, Linux开发环境包括svn使用方法, arm模拟器使用等内容. trainer: zhangjian.
B, driver初步: 介绍Linux设备驱动的最基本概念. trainer: liuxiaotao.
(2), 2_advance_char_driver
A, 继续第一次的字符设备驱动介绍. 包括同步, 阻塞非阻塞等机制. 见"linux drv.doc". trainer: liuxiaotao.
B, memory管理介绍和platform bus介绍. trainer: zhangjian. 
(3), 3_framebuffer_driver
Linux设备驱动之framebuffer training. trainer: zhangpu. 注: 目前framebuffer由shuyu支持. 
(4), 4_linux_porting_introduction
Linux porting分为三个层次, 这里是使Linux kernel支持VC0882这个SOC的SOC级porting. trainer: liaozhicheng
(5), 5_Linux_device_model__GUI_remote_debug
Linux设备驱动模型介绍, trainer: mengfandong. 
(6), 6_Linux_mmc_subsytem_analysis
Linux mmc/sd sbusystem和VC0882 mmc驱动分析. trainer: lidongliang.
(7), 7_Linux_vdec_Driver
On2 vdec驱动分析, 重点是vdec驱动与Linux kernel相关部分: 异步通知和mmap. trainer: yangmin.
(8), 8_Linux_video_Driver
介绍Linux v4l2(video for Linux two)架构, 主要是为了讨论718 video架构. trainer: yinxingjie
718 Media Architecture design in linux.doc
Linux training过程中，有些东西自己也不清楚，这样可能会影响training的效果。
11	Linux加压测试. 
压力测试是很重要的830在这方面吃过亏，例如花三个月时间修正lcdc带宽bug(“11:15 2010-1-9”)；830 sd压力会出错。dma也有问题。
(1), 压力测试是考虑到有些case在panda_os下难以测试(例如四个sd卡同时工作), 而且882 Linux也做了大量工作, 所以希望把cpu, dmac, sd, de, gpu, vdec, uhost, uotg; 做加压测试, 后来由于遇到一些问题而且时间关系, gpu和vdec没有做压力测试. 实际只做了如下三个case: 
A, "cpu : jpeg编解码并比较正确; dmac: copy+cmp; de  : 刷四层屏; sd  : 4个sd之间互相copy和cmp"; 
B, "cpu : jpeg编解码并比较正确; dmac: copy+cmp; sd  : 1个sd之间互相copy和cmp; uhost: 接移动硬盘复制大文件"
C, "cpu : jpeg编解码并比较正确; dmac: copy+cmp; sd  : 1个sd copy和cmp; uotg: 做为PC优盘，在PC上copy文件"
(2), 压力测试中还是发现一些问题, 也改进了driver. 
A, shuyu和yangmin为了提高vdec的显示速度, 改写framebuffer驱动, fb直接使用vdec传入的指针, 这样提高了效率. 另外fb增加了yuv格式的ioctl. 
B, 压力测试发现本组自己修改的2.6.32和35kernel长时间运行或尤其是加压后, tty设备(串口和telnet都是)会出错: 先是没法输入, 后来也不能输出了. xiaotao初步debug了, 认为是调度的问题. \todo：后面xiaotao有时间会继续debug. 
12	Linux其他学习
12.1	Linux kgdb机制研究
对openocd有了解也同时对gdb有了了解，所以同时看了看Linux kernel中kgdb调试机制，感觉不太复杂，在Linux kernel中使用kgdb也其他环境的差异就是使用undefined instructin而不是使用svc指令进入调试状态，因为这样会丢失内核数据。
文档见“Linux相关文档”。
12.2	gdb, kernel模块调试"
12.3	 Linux进程切换分析
以下内容自zhangjian工作日志"17:00 2010-1-3"VC1600, VC0882, arm architecture, armv7, cortex-a8, Linux, 进程切换
1, 进程切换参考"http://blog.chinaunix.net/u1/38994/showart_342896.html":
在调用__switch_to之前,linux会先调用switch_mm()进行进程页表切换,当然如果next->mm==0,即next为内核线程切换,那不会调用switch_mm()函数,而是直接使用prev的进程地址空间,next->mm！=0,即next为普通进程切换,使用switch_mm()函数将prev的进程空间换出,换入next进程空间;
/include/asm-arm/Mmu_context.h->switch_mm()->/include/asm-arm/Cpu-single.h->cpu_switch_mm(pgd,tsk)将pgd设置生效
具体操作参见《linux2.4.19下__ioremap函数中remap_area_pages虚拟地址映射建立函数的代码分析》.
2, cpu_switch_mm()分析: 
proc-fns.h:226:
#define cpu_switch_mm(pgd,mm) cpu_do_switch_mm(virt_to_phys(pgd),mm)

cpu-single.h:
#define cpu_do_switch_mm                __cpu_fn(CPU_NAME,_switch_mm)
宏"__cpu_fn"把CPU_NAME和_switch_mm链接到一起. 
CPU_NAME同样定义在"proc-fns.h": 
CPU_NAME cpu_arm926
CPU_NAME cpu_v7

对于arm926来说, cpu_arm926_switch_mm(pgd)(arch/arm/mm/proc-arm926.S)表明是直接把pgd中描述的page table pointer写入到translation table base. 
armv7也是cpu_arm7_switch_mm()(arch/arm/mm/proc-arm6_7.S). 只是比arm926代码少了清cache, tlb的工作. 
但, 我同时还找到"cpu_v7_switch_mm()(proc-v7.S)", 里面使用了CONTEXT ID:
ENTRY(cpu_v7_switch_mm)
#ifdef CONFIG_MMU
        mov     r2, #0
        ldr     r1, [r1, #MM_CONTEXT_ID]        @ get mm->context.id
        orr     r0, r0, #TTB_FLAGS
        mcr     p15, 0, r2, c13, c0, 1          @ set reserved context ID
        isb
1:      mcr     p15, 0, r0, c2, c0, 0           @ set TTB 0
        isb
        mcr     p15, 0, r1, c13, c0, 1          @ set context ID
        isb
#endif
我的android编译的是"proc-v7.S". 说明Linux中armv7的进程切换是VMSA推荐的方式. 这个需要详细看.
13	bootloader
1), bootloader是我882项目中对自己最不满意的部分. 
我在bootloader中承担clkrst, uart, padc, cache和mmu, 汇编几部分. clkrst部分由于代码设计和FPGA没法验证, 感觉考虑的不够. 
这可能也是882项目后期的情况, 感觉自己的精力不够集中. 事情做的不够深入和扎实. 
2), bootloader中work around部分感觉有点多了, 造成bootloader过于复杂. 
14	中断性能评估:
评估了nucleus和Linux中断性能, 后者主要是xiaotao做, 我有参与. 
14.1	 Nucleus部分:
自: "14:12 2010-6-21"9.
测试结果如下, 代码已上传(修改说明附后). 
结果和aiguo邮件数据接近. 只是比较奇怪为什么进入hisr后时间长很多, 简单单步跟踪代码, 没有看到明显耗时的代码, 感觉是memory访问时间造成的. 
vc0882_20100617_2130_fpgaNoFd_a8_20100617_L1_32_L2_128_Neon_48M_2fpga_noFd.ace
cpu aclk=24, bus aclk=24.576, pclk=24Mhz. ddrc mclk=24MHz. 
起点统一在进入irq模式后. 如果没有特殊说明都是在mmu, L1, L2打开情况测试的. 
	含第一次执行	不含第一次执行
TCT_schedule结束	1213.86 	1159.02 
进入dmac hisr	4018.40 	3841.67 
dmac hisr read queue完成	4440.90 	4258.56 
dmac 事件等待返回	5920.90 	5451.00 
"dmac hisr read queue完成
(mmu on; L1, L2 off)"	22721.50 	-

注: 
A, 有无hisr时TCT_schedule流程有差异. 
B, 起点具体位置:
    import VIM_ARM_PmuCCNTEn
    EXPORT  INT_IRQ
INT_IRQ
;ref vc0830OSadsinit.S(VC0830\bootloader)
; /* Begin Board Specific Code... */
    
; /* Save registers used in this handler */
    STMDB   sp!,{a1-a4}                     ; Save a1-a4 on temporary IRQ stack
    SUB     a4,lr,#4                        ; Save IRQ lr (return address), TCT_Interrupt_Context_Save需要
    bl      VIM_ARM_PmuCCNTEn
    bl      TCT_Interrupt_Context_Save      ; Call context save routine
C, TCT_schedule case终点(VIM_ARM_PmuCCNTDis): 
TCT_Interrupt_Resume
        LDR     a1,[sp], #4                 ; Pop off the CPSR
        LDR     a2,Int_Level                ; Pickup address of interrupt 
                                            ; lockout
        BIC     a1,a1,#LOCKOUT             ; Clear lockout mask
        LDR     a3,[a2, #0]                 ; Pickup interrupt lockout mask
        ORR     a1,a1,a3                    ; Build new interrupt lockout mask
        MSR     SPSR_cxsf,a1                ; Place it into the SPSR 
        BL      VIM_ARM_PmuCCNTDis          ; disable Cortex-A8 performance monitgor
        LDMIA   sp,{a1-pc}^                 ; Recover all registers and resume
                                            ; at point of interrupt
D, 代码修改说明:
arm\VIM_Arm_Driver.c/h加入performance monitor操作函数. 
另外注释了panda_init.s文件INT_IRQ中"VIM_ARM_PmuCCNTEn()", 否则没有编译arm时会出错. 

14.2	 Linux部分
xiaotao已经总结了详细的文档:
"\\10.0.2.36\sqmshare\Document\Linux\kernel\中断处理过程中的时间统计.doc". 
这里面包括目前中断性能评估的实验结果和Linux中断处理流程两部分. 
从中断发生到中断报给一个线程, 大约需要12000-16000cycles.
中断性能评估时xiaotao和dongliang对于Linux中断处理又有深入的分析, 解释了一些在830 Linux移植和看882suxin移植的一些疑问, 例如get_irqnr_and_base加入了返回irqstat的作用, 实际是希望在本次irq异常中循环处理晚所有的中断. 
15	其他需要关注的
android 开发环境DS-5, arm Linux优化的方案: Linaro.
Linaro: 这个非常值得关注, 例如说linaro里面有针对armv7-A的kernel和application优化; 有人在做OMAP3530 qemu模拟器的改进; 有人在改进openocd Cortex-A8调试器. 这些对于882这颗Cortex-A8 SOC来说很重要. 建议有人长期关注.
关注openocd，linaro正在改进。相信不久就能对Cortex-A8有很好的支持。
16	文档
如无特殊说明作者都是本人。
16.1	环境文档
1，	"D:\VC0882\document\VC0882 environment freshman guide.doc"; 
2，	"D:\VC0882\document\VC0882环境和Cortex-a8介绍.ppt".
3，	\\10.0.2.36\sqmshare\Document\SOC\现有arm1176和cortex-a8开发板调查及售价.txt
16.2	FPGA稳定性
4，	D:\VC0882\document\fpga\VC0882 FPGA环境稳定性总结.txt
5，	D:\VC0882\document\fpga\VC0882 FPGA环境稳定性测试简要报告.xls：by 测试组。
16.3	Cortex-A8学习文档
6，	"D:\VC0882\document\fpga\VC0882_FPGA注意事项.txt".
7，	"D:\VC0882\document\VC0882环境和Cortex-a8介绍.ppt".
8，	"D:\VC0882\document\arm\笔记".
9，	"D:\VC0882\document\arm\debug": 描述了rvdebugger和ICE的使用和常见问题, 在882项目中后期节省了我很多现场支持的时间.
16.4	882调试器调查
10，	\\10.0.2.36\sqmshare\Document\Jtag_Debugger\支持Cortex-A的调试器调查.txt
11，	\\10.0.2.36\sqmshare\Document\Jtag_Debugger\cortex-a8仿真器比较.xls
16.5	Linux相关文档
12，	\\10.0.2.36\sqmshare\Document\Linux\kernel\debug\ Linux kgdb机制初步分析.txt
16.6	Driver spec
13，	D:\VC0882\document\DriverSpec\arm，irq
16.7	搜集的文档
1，	kernel human readable changelog
http://kernelnewbies.org有很多资料, 例如"http://kernelnewbies.org/LinuxChanges"是最新kernel changelog, "http://kernelnewbies.org/Linux_2_6_28"是2.6.28的changelog.
2，	Arm文档收集：\\10.0.2.36\sqmshare\Document\ARM\arm体系结构
3，	Linux文档：\\10.0.2.36\sqmshare\Document\Linux，\\10.0.13.101\share\linux。两个目录里面有部分资料是我收集的。
4，	开发板资料：\\10.0.2.36\sqmshare\Document\SOC 的6410, OMAP3530, i.MX51中部分资料是我收集的。其中“TI OMAP3530”的资料比较全，包括开源的beagle，android移植代码和资料等等。
17	Issue和bug
17.1	Report bug
882项目中我已经报了25个issue，均已解决：
   P 编号 #   分类 报告人 严重性 状态 最后更新 摘要   
 紧急 0009228 3  [882]
ARM zhangjian 功能未实现 已关闭 (zhangjian) 2010-07-23 csat中通过APB-AP访问寄存器/sram失败 
 特急 0009227 17  [882]
PAD/PADC zhangjian 易用性不佳 已关闭 (wangzhengwei) 2010-08-09 strap pin接高电平造成rvdebugger难以连接 
 高 0009084 4  [882]
clkrst zhangjian 功能未实现 已关闭 (zhangjian) 2010-06-11 clkrst ddrc switch fail 
 高 0009083 2    [882]
clkrst zhangjian 功能未实现 已关闭 (zhangjian) 2010-06-12 clkrst bus change clock source switch fail 
 高 0009050 3  [882]
ARM zhangjian 易用性不佳 已关闭 (zhangjian) 2010-06-15 VC0882 L2 cache测试fail 
 中 0008973 5    [882]
EMI zhangjian 易用性不佳 已关闭 (zhangjian) 2010-06-03 emi boot fail 
 中 0008853 2    [882]
ARM zhangjian 系统崩溃 已关闭 (zhangjian) 2010-06-03 csat通过AHB-AP访问ddr fail 
 中 0008845 1  [882]
ARM zhangjian 程序出错 已关闭 (kongyingqi) 2010-06-03 运行arm validation出错, imdct和fdct都是跳到data abort 
 紧急 0008782 3  [882]
ARM zhangjian 系统崩溃 已关闭 (zhangjian) 2010-06-03 4月21日和4月22日的A8开MMU或CACHE后有问题 
 特急 0008712 2    [882]
ARM zhangjian 系统崩溃 已关闭 (zhangjian) 2010-04-21 开dcache后程序运行出错 
 高 0008640 5    [882]
2FPGA zhangjian 功能未实现 已关闭 (fanzhijun) 2010-04-09 2FPGA strap pin无法通过外部配置 
 特急 0008485 2    [882]
2FPGA zhangjian 系统崩溃 已关闭 (zhangjian) 2010-03-24 VC0882 FPGA ddr不稳定(2010年3月20日 FPGA新时钟方案) 
 紧急 0008469 1    [882]
ARM zhangjian 系统崩溃 已关闭 (huangwei) 2010-04-07 FPGA11插Video子板时难以连接arm 
 特急 0008461 4    [882]
clkrst zhangjian 系统崩溃 已关闭 (zouweiran) 2010-04-08 2FPGA连接多个子板时RVI连接arm失败(arm无法停止), 造成测试同事无法测试. 
 紧急 0008460 5    [882]
PAD/PADC zhangjian 功能未实现 已关闭 (zhangjian) 2010-04-08 从norflash启动时, strappin寄存器是0 
 紧急 0008459 2    [882]
clkrst zhangjian 系统崩溃 已关闭 (zhangjian) 2010-03-22 2010年3月20日 2FPGA两个版本都无法使用 
 紧急 0008329 2    [882]
 zhangjian 系统崩溃 已关闭 (guohaifeng) 2010-03-13 串口连续读写导致data abort或undefined instruction 
 高 0008320 4    [882]
coresight zhangjian 功能未实现 已关闭 (huangwei) 2010-04-21 rvdebugger无法清irq source pend寄存器 
 特急 0008252 5  [882]
 zhangjian 系统崩溃 已关闭 (fanzhijun) 2010-03-13 FPGA不稳定影响ICP最小环境正常运行 
 高 0008177 7  [882]
 zhangjian 系统崩溃 已关闭 (zhangjian) 2010-04-07 cortex-a8停在一条正确语句无法继续运行, 且系统未报错 
 中 0008148 7  [882]
coresight zhangjian 易用性不佳 已关闭 (zhangjian) 2010-04-07 使用Rvdebugger单步调试中DSCR无法访问 
 高 0008115 4    [882]
2D/3D zhangjian 功能未实现 已关闭 (huangwei) 2010-04-08 csat访问dap fail 
 中 0008114 2  [882]
 zhangjian 易用性不佳 已关闭 (huangwei) 2010-03-13 rvdebugger有时连不上Cortex-a8 
 紧急 0008113 5    [882]
 zhangjian 系统崩溃 已关闭 (zhangjian) 2010-03-15 rvdebugger写入memory(sram)失败 
 高 0008112 2  [882]
 zhangjian 系统崩溃 已关闭 (zhangjian) 2010-03-29 rvdebugger访问bus上非法地址出错后, 无法再访问合法地址 
17.2	软件bug
17.2.1	FPGA阶段遇到的cache问题
	Shuyu cache问题
这里直接引用我的工作日志“21:12 2010-7-1”
VC0882, arm, cortex-A8, cache, cif, fat, buffer没有做cache操作造成一致性错误;uart, buffer和size没对齐造成数据错误; venc: 纯硬件buffer没有做cache操作
1, Shuyu邮件"答复: 882 cif cache 问题"20100630_1737
今天和zhangjian在debug的过程中，发现ipp在调用fat_write的时候，ipp传入的是8开头的地址，这个地址是从IPP的寄存器里面get出来的。我们尝试把这个地址改为0开头的地址，抓图ok。
2, Shuyu邮件"答复: 882 cif cache 问题"20100701_1804
Cif 的问题现在可以肯定是8地址和0地址的数据不一致造成的。如果传入8地址，在fat里面做memcopy的时候，查看fat里面的mem，发现mem里面的数据已经不对了。
3, Aiguo邮件"答复: 882 cif cache 问题"20100701_1841
谢谢shuyu执着，debug到这步，问题基本搞清楚了，如果CIF用的0x800xxxx的地址给fat，那么第一次用0x800xxxx的地址，数据没有cache进来，因此就没有问题，但第二次用这个地址，因为已经cache进来了，因此copy给的数据是上次的数据（当然如果0x8000xxxx没有替换），如果幸运的是，替换出去了，那也没有问题，但实际很难。
这也解释了我们，第一次没有错，第二次一定错。 
另外，也能解释我们用窗口查看memory时没有问题，我记得当时调试的时候，发现一般仔细check memory就没有问题，实际上应该是，我们仔细check的时，memory的窗口很大，可能会引起0x8000xxxx的替换，这样再用就没有问题。
这两个问题都应该得到解释，我也希望把这个没有debug过这个问题人，一起share一下，作为一个典型，shuyu你准备一下素材，给大家分享一下，你来定个时间吧！另外，shuyu，如果你有时间，我想再和你一起看看，把一些表现的奇怪的问题，最后统统证明是合理的！
4, (11:18 2010-7-2)修改: 
今天又和shuyu讨论了一下. 我现在也基本理解了. 同意aiguo的说法. 
简单说: arm同时访问0, 8两个ddr地址, 造成数据一致性问题.
每次fat从buffer copy数据时, 由于cif每次malloc buffer的地址是相同的(cif每次会free memory, 而且连续两次cif测试中没有其它模块malloc过数据), 所以fat第一次从0x8xxxxxxx地址搬移时数据进入cache, 第二次测试时fat从同样地址复制数据由于之前地址的数据已经进cache, 所以fat就不会再从memory读取, 只是从cache读取. 这样就出错了. 而且shuyu用纯色做了实验, 出错的横线就是上一次的纯色. 
正常使用时, 每次给硬件之写memory之前都会做clean and invalidate. 这样就保证下次fat读数据时必定从memory取数. 但是这里的0x8xxxxxxx并没有做cache操作, 所以有错. 因此才计划以后把0x80000000地址改为软件不可访问的地址. 
补充: 
据shuyu说, 每次写256k数据时, 基本只在0x40000, 0x80000, 0xc0000, 0x100000出错. 这个区域正好是小于L2 cache的大小. 超过这个大小后, 再到同样的256k地址的数据, 数据可能已经被换出了. 所以没有问题.
另外今天试了一下, 发现只开L1,关闭L2没看到错误, 原来是有错的. 应该是由于L1比较小(dcache只有16k). 而nucleus就有几百可k, 所以cache数据容易被换出因而不是必现错误. 
5, (11:10 2010-7-2)uart, buffer和size没对齐造成数据错误(FanXiaoFan)
uart中是循环buffer, 正常情况下每次到水位(50%)会来中断, 但每次具体从buffer搬移多少是从uart寄存器得到, 一般是超过50%的. 这样可能造成buffer或size没有cache line对齐, 因此造成个别byte错误. 昨天xiaofan先按照固定50%搬移, 没有错误. 今天会继续修改把offset做cache line对齐. 
6, (16:07 2010-7-5)venc: 纯硬件buffer没有做cache操作
venc出错直接原因(猜测,未验证)：每次ref frame buffer start address, size不同，可能本次ref frame与上次input或output重合。

	Linux启动地址错误导致的问题。
引自zhangjian邮件"答复: 882 Linux L2 cache的问题//修改后启动正常, 原因需要进一步分析"20100811_2155
hi, all

目前已经可以开L2情况下正确启动: 
1), 把kernel启动时pc值从0x8000改为0x80008000后可以正确启动到文件系统. 
kernel的启动都是一般来说都是设置为"memory物理地址+0x8000". 所以0x80008000更为合理. 
设为0x8000启动时, 从感觉是arm在开mmu和cache时, 在0地址运行. 但是从页表可以看到内核空间(0xc0000000)是从0x80000000映射的, 这样可能会造成0x0地址和0x80000000分别进入cache, 造成数据一致性问题. 

2), 之前的邮件中提到的在"v7_flush_kern_cache_all()"函数绕的方法实际也是解决了一致性问题. 另外, 8月10日时调试中, 也发现了新的现象证明是一致性的问题: 
debug发现local_flush_tlb_all()函数执行中, 操作data tlb invalidate前后, sp(0xc0381e50)附近数据会有变化, 做了如下实验: 
(1), data tlb invalidate前设断点, 单步执行并在rvdebugger窗口中查看sp(0xc0381e50)附近数据, 发现该指令执行后0xc0381e80开始的11个words等数据会变化. kernel启动正常(未启动文件系统)
(2), 设断点不查看, 在dataabort异常后跑飞(在指令是0的区域执行).
(3), 设断点跳过该命令. kernel启动正常(未启动文件系统)
有一个困惑就是data tlb invalidate和memory有一致性问题有什么联系? kernel启动过程中, 按1M的section映射, 这个过程中用到的section不多, 可能不会引起tlb替换(Cortex-A8 instruction和data tlb各有32个entry). data tlb invalidate后, 后面访问memory会从memory查页表. 难道是从memory页表读过程中, 也没进入L2, 导致L2数据发生替换, 所以导致一致性问题?

也在panda_os memcpy测试下实验: memcpy和memcmp之前做data tlb invalidate, 没有发现问题, 这样不能证明data tlb invalidate指令或tlb有问题. 

注: data tlb invalidate指令
mov r0, #0
p15, 0, r0, c8, c6, 0

3), 查找kernel code, 如果是arm linux, local_flush_tlb_all()只有如下文件会调用, 分析代码可以看出这个函数只在kernel启动中调用了一次, 所以kernel执行这个函数后开L2也不会有问题.
Io.c (arch\arm\mach-davinci):	local_flush_tlb_all();
Io.c (arch\arm\mach-omap1):	local_flush_tlb_all();
Io.c (arch\arm\mach-omap2):	local_flush_tlb_all();
Mmu.c (arch\arm\mm):	local_flush_tlb_all();
Sram.c (arch\arm\plat-omap):	local_flush_tlb_all();

4), 提供给VC0882_ICV team仿真的Linux kernel. 
\\10.0.2.36\sqmshare\Projects\Mobile BU\VC0882\fpga\bin\20100811_Linux_L2_cache_debug_zhangjian2kongyingqi:
Linux-2.6.29_ICP是代码包括编译的中间文件. vmlinux是kernel的elf文件, Image是bin文件. 脚本是init_lpddr_micron_128M_linux.inc, 包括clock配置, kernel启动要求的arm寄存器配置和ddrc配置. 编译kernel的工具链是arm-2010q1-202-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.gz(在codesourcery网站可以下载到Linux版本). 
看看仿真能不能证明1)的分析.

5), 后面cache工具ok后, 也会比较cache和memory的一致性问题, 证明1)的推断.
18	备用材料
2), 如何提高工作效率: 例如basefunc, 应该用软件自动生成, 手写费时且易错. 
3), 项目文档: 感觉还是需要类似wiki的东西. 
5), \todo 搜索"VC0882 总结|文档|经验|心得|思考". 

