
9:11 2010-11-1
时间管理
0, 9:40

1,本日
1), 1h: 和zhicheng, zhangyunxia调试rvdebugger软件断点问题. 见"20:43 2010-8-9"4. 
2), 为2PFGA加压测试准备. <? 应该就是下面加压测试的事情>
3), 为AE提供audio子板, beizhan后来问我有没有给, 我是现问的zhouming测试是否正确, beizhan提醒我应该确认是否已经给了楼下. 
4), 10' 给大家转发, http://www.realview.com.cn/Activity-list.asp?id=332
5), VC0882 Linux加压测试支持. 见"16:09 2010-11-1"1.
6), 板子已经给zhicheng, 会先实验板子已有资料, 确认板子是否完好. 同时上传板子光盘等资料到36. 然后再实验android.
7), 分析Linux dataabort时, backtrace打印. 可以考虑把这个移植到panda_os, 作为本周编程练习. 
8), 给aiguo, beizhan发上周加压测试进展. 见"10:09 2010-10-26"6.
9), 总结, 本来希望wenlei实验gpu加压测试. 从今天情况看. arm+sd+dmac+de会有问题. 所以wenlei可以暂时不实验. 今天我自己用了6小时在加压测试上, 明天下午可能还需要一半时间和xiaotao一起调试以加速加压测试进展. 

16:09 2010-11-1
VC0882, Linux, 进展, 2010年11月1日--2010年11月7日; 周工作总结
1, 2010年11月1日
1), liuxiaotao, 串口DMA方式基本可用: 
(1), Liuxiaotao邮件"答复: 882 linux 串口，目前直接更新最新版本就可以使用"20101001_1608
串口，目前已经改成dma方式接收数据。这种方式解决了，normal方式下串口会丢数据的问题。
默认方式是dma方式，如果还打算继续使用以前老的normal方式，要在 make menuconfig 里把 CONFIG_VIMC_UART_NORMAL 选上
欢迎大家使用最新的串口驱动，发现串口异常的情况，马上联系我。（尤其是一段时间后，输入字符，没反应的现象）
liuxiaotao"答复: 882 linux 串口，目前直接更新最新版本就可以使用"20101101_1626
使用方法： 1. 更新driver/serial 目录下面的文件
2. make menuconfig 
     Device drivers ->  character devices -> serial derivers->
               SERIAL_VIMC_DMA OR NORMAL
                         选择 DMA

(2), 之前uart两个问题. 
DMA timeout太短, 从1个frame改为4个frame. 因为uart内部收到的数据其实不是直接给DMA FIFO, 是先给uart内部寄存器, 凑成4个byte或timeout后给DMA FIFO.
之前不输入2-3分钟就没法再输入的问题是因为去掉了uart里面的发送timer. 
2), SD进展见"10:10 2010-10-26"3.
3), de进展:
shuyu的framebuffer里面set_par会调用set_fix, 这样有问题. 正在修改. 
另外shuyu在补充framebuffer test中的关闭刷屏的语句. 完善framebuffer test readme.txt, 填写加压测试用法. 
2, 11月2日
1), liuxiaotao: uart改为low_latency=1后, 稳定性有提高, 等于是绕过了work queue的方式. 后来加压测试仍然有错. 
2), SBC8100除了DPS和GPS都正确. liaozhicheng邮件"天漠SBC8100"20101102_2100
天漠SBC8100板子已到，大家需要玩下的到我这里拿。
光盘资料放在：\\10.0.2.36\sqmshare\Document\SOC\TI OMAP3530\SBC8100_天漠\cdrom
今天对各个模块进行测试，除了GPS没有反应之外，其他的都没什么问题。
天漠做得非常好，很容易上手，光盘资料不多，但是写得很清晰明了。板子提供的镜像内带各个模块的测试程序，《SBC8100用户手册》有详细说明。
至于DVSDK，今天没跑出来，最后找出问题规律：
SD卡在caijin模拟器上格式化后，就不能再运行x-loader了。就是再用windows把整个SD卡重新合并格式化也不能用于x-loader的启动了。具体原因不清楚。
明天再在其他机器上格式化另一张SD卡，来跑DVSDK试试。
3, 11月3日
1), liaozhicheng邮件"答复: 天漠SBC8100"20101103_1843
DVSDK跑起来，caijin的虚拟机可能是有问题，会直接弄坏SD卡，今天我把自己的虚拟机弄好后试试，可以运行。
他自带有3D和DSP解码DEMO，DSP的DEMO是在/demo/dvsdk_demo
他自带的DVSDK比较旧，应该是3.0的，kernel内核还是2.6.22
明天试自己编译新的dvsdk试试。
2), liuxiaotao, 串口, 发现29上面没有问题. 
4, 11月4日
1), USB2FPGA和4FPGA都实验telnet方式登录测试, 发现即使串口完全没有打印, 长时间测试还是会死. 而且造成telnet也没法输入. 感觉是tty有问题? 
5, 11月5日
1), 根据昨天实验结果, xiaotao升级到2.6.35.8, 实验, 目前稳定. 如果可以2FPGA和4FPGA都会测试. 
2), wenlei会实验, gpu加压测试.
6, (20:57 2010-11-8)周工作总结:
上周试图提交加压测试case, 但是都在串口/telnet出错. Debug暂时没有进展. 本周会在2.6.29kernel上实验. 
1), 串口改为DMA方式, 提高了串口稳定性. 进一步debug串口问题, 为了避免串口问题, 使用telnet登录, 但是也有问题. 因此认为是tty子系统问题. 目前还没有找到根本原因. 
2), framebuffer驱动改进. set_par实现不符合fb要求导致出错. 
3), zhicheng实验新买的开发板SBC8100, 板子基本没问题.
4), 实验vdec加压测试, 测试一段时间后telnet和串口都无法输入. 测试中未发现其它错误.
5), wenlei gpu代码上传到了Linux CVS. 可以出图, 颜色不对, 应该是fb使用问题.
6), xiaotao长时间测试时, dma曾经出错, 后面测试时会注意. 

17:15 2010-11-1
VC0882, Linux, 加压测试, usb, sd, dma, de; data abort异常处理分析, backtrace
CF: vc0882_rev0_01102702_02080900_USB2FPGA_UHOST_noCifGpuEncDec_tag20101026_1500.ace
1, 实验bootloader版本, 发现第二个sd probe时, 写寄存器时出错. 发现usb版本, 要么有de+1sd, 或者noDE+4SD. 
压力测试case可能要修改. 
PC is at vimc_sdio_probe+0x1a4/0x284
Backtrace:
[<c10201b8>] (vimc_sdio_probe+0x0/0x284) from [<c0fc29a8>] (platform_drv_probe+0x24/0x28)
abort时DFSR是: 0x00001406, DFAR: 0xC1020354.
DFSR:
[12], 1 = AXI Slave error caused the abort.
[11], 0 = read access caused the abort, reset value
再考虑[12], [10], [3:0] = b110110: bx10110 imprecise external abort
结合一起就是, AXI Slave error导致了imprecise external abort.

异常处理过程:
dabort异常(0xffff0010)->__dabt_svc->do_DataAbort()->arm_notify_die().
arm_notify_die()会判断是用户空间还是内核空间进入的异常. 如果是用户空间会发信号(\todo), 如果是内核空间如下: 
die()->__die()->sysfs_printk_last_file()
                print_modules()
                __show_regs()
                dump_mem()
                dump_backtrace()
                dump_instr()

__show_regs(): 
print_symbol()->__print_symbol()->sprint_symbol()->kallsyms_lookup()->get_symbol_pos()
get_symbol_pos()使用二分法查找kallsyms_addresses中地址所在的符号所属的符号和及其结束地址. 从这里也可以看出, 前面的: 
PC is at vimc_sdio_probe+0x1a4/0x284
1a4表示出错位置是vimc_sdio_probe(0xc10201b8)+1a4=C102035C, 这是一条dsb指令, 保证之前写的寄存器会写入, 就是这里引起了data abort异常. 
0x284表示vimc_sdio_probe()的大小是0x284bytes. 

2, 设置Linux中de pixel clk是21.6MHz. 
dma的log级别似乎比较高? 调试信息还是用debug比较好。 
加uhost时, 串口比较容易死. 没有uhost时好一些. 明天需要着急大家debug. 
可以先请xiaotao debug一下. 

22:14 2010-11-1
时间管理, 项目, 工作计划, 11月1日--11月7日计划
1, 11月1日: 加压测试. 新板子应该到了, 给zhichi实验. 关注zhicheng和dongliang android编译和运行进展(一个是goldfish, 一个是OMAP3530). 
准备周二上午的review. 
11月2日: 上午: bootloader clkrst review
下午: 2h: VC0882 android arm和ddrc功耗文档, 还需要准备ddrc主要feature(这个需要请教同事). 穿插和xiaotao一起解决VC0882 Linux 串口稳定性问题, 如果能解决就实验2FPGA和4FPGA的全部压力测试(即使sd有问题也要试一下). check大家的文档. 为明后天提交测试做准备. 
11月3日: 加压测试case逐步提交测试, 了解各位同事加压测试进展. 重点看sd, uart和de. 关注zhicheng进展. 考虑加班时间看OMAP时钟管理架构和830我自己写的Linux时钟架构为明天讨论做准备. 
11月4日: 上午: VC0882 android power management讨论. 下午压力测试. 
11月5日: 本周还要关注zhicheng实验OMAP3530结果, 希望本周能跑起来第一版. 11月5日不安排太多的事情, 是前四天的机动时间. 需要完成阅读和编程练习计划. 

PS: 需要关注AE Android本组schedule, 如果有困难要及时和beizhan讨论. 关注AE进展. 

2, 阅读和编程练习计划
1), 阅读: arm架构. 总结上周arm SMP资料.
2), 编程联系素材: "9:11 2010-11-1"-1-7).

22:30 2010-11-1
VC0882, AE, android, review
1, zhaoyuan邮件"部分Schedule"20101027_1901
经过两周做了部分模块的Review，请参与的人员看一下。
Review记录 \\10.0.12.140\Project\VC0882\sw_design\design_review
Schedule \\10.0.12.140\Project\VC0882\sw_design\arch\vc0882_android_pad_schedule.xlsx
下面要进行的模块:我领发信通知。
Clk&Rst
PM
Input Device
Sensors(g-m-sensors,ligth-sensors,ranger-sensors)
FM
GPS
2, (20:13 2011-1-5)\\10.0.12.140: 用户名: <zhangjian>, 密码: <vimicro>.

15:51 2010-11-2
时间管理
0, 9:45-18:50

1, 本日
1), 上午bootloader clkrst review.
2), 下午: 忙了一些事情, 就已经到四点了. 之前应该整理的上午会议meeting minutes也还没有整理.
3), 30' 整理上午bootloader clkrst review meeting minutes. 见"15:53 2010-11-2". 
4), 帮AE找emi和dm9000子板. 见"18:20 2010-11-2"1
5), 总结, 开会应该带着笔记本, meeting minutes完全可以当时记录好, 最后可以给大家过一遍. 这样节约时间, 提高效率. 

15:53 2010-11-2
VC0882, bootloader, clkrst review
1, meeting minutes
今天上午review了bootloader clkrst testplan, meeting mintes如下: 
如果没有特殊说明, owner都是zhaoyan. 
1), strappin clock switch
(1), 添加sd, nfc时钟测试, 需要覆盖到strappin中的各种组合. 
(2), 添加strap pin[16]=1测试(当clkswitch失败时继续运行). 
2), 512info clock switch
(1), 添加: ddrc切频到pll2的测试. 这个系统默认的用法. 此时应该bypass bus pll配置, bus和ddrc使用ddrc pll配置. 测试三种ddr(lpddr, ddr2, ddr3), 包括ddrc运行在异步模式时频率=bus和!=bus两个case, 还包括ddrc运行在同步模式的一个case. 
(2), 测试storperi clock source不变时, 修改除了usb_mclk, usb phy clk以外的所有模块的divider. 确认usb模块可以正常工作, 其它模块目标频率正确.
(3), 测试sram和rom pll和切频. pll需要测试pll2(使用bus/ddrc的pll配置)或其它pll两个情况. 
(4), 测试usb时钟调整. 包括512info bypass bit的17,18,19三个bit. 
(5), 确认: nfc时钟调整后, nfc所有的时钟是否上升沿对齐. 
(6), peri和uart bcr两个测试项补充到testplan(已经测试通过). 
(7), 添加clkConfDelay两个测试case, index=0, index=其它. 
(8), sd测试中, sd mclk和sd internal divider需要搭配测试, 请yanglei说明目前是如何测试的. [yanglei]
(9), 添加总切频开发的测试(512info bypass[31]). 
(11), nfc测试时测试了哪几组时钟. [meiping]
3), zhaoyan参考strappin切频方式, 列出512info clkswitch和pmu fast wakeup clkswitch每组测试case对应的每个模块的频率. 便于大家check测试项. 

18:20 2010-11-2
VC0882, Linux, emi, ethernet
1, 今天下午帮Zhangjing找emi网卡. 遇到问题就是emi子板不好用. 其中一个问题就是在"RPC: Registered tcp transport module."后面停住, 相关log如下: 
vc088x_uart.0: ttyS0 at MMIO 0x60043000 (irq = 35) is a VC088X UART
brd: module loaded
loop: module loaded
dm9000 Ethernet Driver, V1.31
eth0 (dm9000): not using net_device_ops yet
eth0: dm9000a at e6008000,e600c008 IRQ 16 MAC: 00:14:22:33:44:55 (platform data)
Driver 'sd' needs updating - please use bus_type methods
mice: PS/2 mouse device common for all mice
logger: created 64K log 'log_main'
logger: created 256K log 'log_events'
logger: created 64K log 'log_radio'
TCP cubic registered
NET: Registered protocol family 17
NET: Registered protocol family 15
RPC: Registered udp transport module.
RPC: Registered tcp transport module.
eth0: link down

后来请xiaotao帮忙看, 说可能是中断没有来, 我自己检查发现是中断线查错了, 应该是第八根(A15), 我看成了9.

2, emi代码分析.
与dm9000相关代码有三处:
1), dm9000a_pin_init()(arch\arm\mach-vc088x\gpio.c): dm9000的gpio初始化, dm9000多数pin需要设为normal function, 由emi模块管理. 
2), vimc_init_emi0()(arch\arm\mach-vc088x\emi.c): emi模块初始化. 
3), vc0882_fpga_init()(arch\arm\mach-vc088x\board-fpga.c): 
里面会设置vc0882_fpga_devices的dm9000a_platdev, 包括cmd, data, irq等内容. 
4), dm9000.c()(driver/net): dm9000核心代码, 这里的代码, 我们应该不需要修改. 

10:03 2010-11-3
时间管理
0, 9:50

1, 本日
1), 上午: android文档. 见"10:40 2010-11-3". 和yangxing讨论了ddr, 看来下午还需要2h整理.
2), 下午推进加压测试进度. 
4FPGA考虑用telnet远程操作, 避免串口问题. 

10:40 2010-11-3
(15:17 2010-11-8)
(14:39 2010-11-12)
VC0882, android, arm, ddrc
1, 模块概述
1), Clock and power domain. 
(1), 可以关闭NEON和ETM降低功耗. 关闭NEON后, 软件执行NEON指令会引起undefined instruction, 在异常中打开NEON. 
NEON or ETM unit level gating In addition to the architectural gating mechanism, the processor supports gating of major components within the processor such as the NEON unit, VFP coprocessor, and ETM unit.
The cp10 and cp11 fields in the CP15 c1 Coprocessor Access Control Register control access to the NEON and VFP coprocessor. See c1, Coprocessor Access Control Register on page 3-67. Reset clears the cp10 and cp11 fields and disables the NEON and VFP clocks.
The ETM Control Register enables the ETM. See the Embedded Trace Macrocell Architecture Specification for more information. The global enable bit in the CTI Control Register enables the ETM clocks, excluding the ATB clock, ATCLK, which can only be gated external to the processor. See CTI Control Register, CTICONTROL on page 15-13.
(2), 上面提到的不包括atb clk, atb clk在882里面可以在clkrst里面关闭(CPU_CLK_CTRL[0] CKD_ATB_EN). 但是关闭了atb clk同时也关闭了pclkdbg, 也就是没法连接ICE了. 
(3), 另外, c1, Auxiliary Control Register有强制打开ETM, NEON, main的时钟. 可以用于调试. 
(4), max power测试: 0.76(1.26mW@1Mhz)
dhrystone测试(NEON没有打开): 0.534(0.89mW@1Mhz)
while: 0.416(0.69mW@1Mhz)

2), 与pmu四种状态的关系. 
Normal: arm clock on. 
Idle: at least arm clock gate
Halt: Pso clock gate. 
Sleep: Pso off. 
如果halt功耗也很低, 不如直接用halt, 不用sleep.
836 sleep: 3-5mA@1.4V.

3), performance monitor. 
system performance monitor功能? 各模块的总线的利用率. \todo. 

4), IC support: 
之前是jiangbo负责, 现在是xueke. 等xueke数据. 
JiangBo	13522024641	7087
XueKe	13581568176	7316

2, ddrc
1), power
2), 
(1), BL=4(?), BL=8.
(2), Auto Refresh Mode: Single Refresh, Burst Refresh.
7.8us只是平均时间. 有没有最大时间? 这两个时间都是配置到哪个寄存器. 
(3), AL
AL=0, 行, , 列, , 数据. 
AL=1: 行,列, , , 数据. 
AL=1换行会有损失? 为什么? 
(4), training
DDRC training: 在DRAM一个数据区域, 但是软件访问不到. 
DDRC training with MPR" 在DRAM reg区域. 
(5), AXI Data BusWidth
这个为什么灰掉, ASIC是否支持? 
(6), Address Map
Based on Bank, Based on Row(default). 默认是哪个, 哪个会提高效率. 
默认: bank, row, colume.
(7), reorder
见mas"5.4.2	Reorder rules description".
(8), Half Data Path Valid Mode
ddr3没有, lpddr. 只用低16bit数据. 原因? 
(9), 两个CS. 
串+并. 
(10), dll
(11), 电流测试:
power down
self-refresh
deep power down(only lpddr)
三个的作用? 从lpddr测试结果看, power down比self-refresh电流大, 不理解. 

12:51 2010-11-3
VC0882, debugger
1, 华恒, 如何支持源码级调试? 
相关工程师不在. 会和我联系. 

15:58 2010-11-3
VC0882, jtag, codehammer-a for Cortex-A8, 返修
1, hi, duanxiaohui

原来买的codehammer-a for Cortex-A8现在已经无法使用(认不到usb设备), 经过和华恒售后技术支持讨论, 需要返厂维修. 

地址是: 
合肥市高新区梦园路9号研发中心综合楼3层 华恒科技 郭宇森收. 
0551-5325652转郭宇森

谢谢. 
zhangjian

2, 
codehammer-a for Cortex-A8插在PC上认不到usb设备

北京市海淀区学院路35号世宁大厦15层
北京中星微电子有限公司
8610-68948888-7254, 13810498791 张健
有技术问题, 请相关工程师给我回电话. 

3, 后来xiaoduan建议看看能不能自己修. 那边下班了, 明天问一下. 

18:47 2010-11-3
VC0882, android, ddr问题
1, 
2), 
(1), BL=4(?), BL=8.(有bl4，JED标准上有) [ZJ: 确认是DDR3支持BL=4吧]
(2), Auto Refresh Mode: Single Refresh, Burst Refresh.（设置成1，表示隔2个7.8微秒才发出两个刷新，这个数字JDE上标准有）
7.8us只是平均时间. 有没有最大时间? 这两个时间都是配置到哪个寄存器. 
(3), AL
AL=0, 行, , 列, , 数据. （不断读写同一行会导致效率低下）
AL=1: 行,列, , , 数据. 
AL=1换行会有损失? 为什么? 
(4), training
DDRC training: 在DRAM一个数据区域, 但是软件访问不到. （软件开辟的一块空间，供training）
DDRC training with MPR" 在DRAM reg区域. 
(5), AXI Data BusWidth（一般不调）[ZJ: 一般不调是什么意思, 太模糊了. 首先是能不能支持128bit, 如果能支持, 为什么不用? ]
这个为什么灰掉, ASIC是否支持? 
(6), Address Map
Based on Bank, Based on Row(default). 默认是哪个, 哪个会提高效率. 
默认: bank, row, colume.（默认row，bank，colume效率高）
(7), reorder
见mas"5.4.2    Reorder rules description".
(8), Half Data Path Valid Mode
ddr3没有, lpddr. 只用低16bit数据. 原因? （由PHY决定）[ZJ: 我理解咱们是一个phy接不同的ddr(ddr3, ddr2, lpddr), 不理解为什么是由phy决定]
(9), 两个CS. 
串+并. 
(10), dll
(11), 电流测试:
power down（DLL没有关掉，I/OBUFFER也没有关掉，同时需要DDRC发出AUTO REFRESH命令，但是返回正常运行时间迅速）
self-refresh（DLL关，不需要clk，但是返回速度慢）
deep power down(only lpddr)（没啥用）[ZJ: 需要知道具体作用, 而且能和前两个区分开]
三个的作用? 从lpddr测试结果看, power down比self-refresh电流大, 不理解.
[ZJ: 需要知道每个模块进入和恢复的时间], 分不同的ddr类型, 和典型的频率. ]
2, 
(2), Auto Refresh Mode: Single Refresh, Burst Refresh.（设置成1，表示隔2个7.8微秒才发出两个刷新，这个数字JDE上标准有）
7.8us只是平均时间. 有没有最大时间? 这两个时间都是配置到哪个寄存器. （最大时间是8个7.8us，即该寄存器设为7，没有设置这个时间的地方）
(3), AL
AL=0, 行, , 列, , 数据. （不断读写同一行会导致效率低下）
AL=1: 行,列, , , 数据. 
AL=1换行会有损失? 为什么? （不是换行有损失，是不换行有损失，早上解释的有问题，亲自给你解释吧）
 (5), AXI Data BusWidth（一般不调）[ZJ: 一般不调是什么意思, 太模糊了. 首先是能不能支持128bit, 如果能支持, 为什么不用? ]
这个为什么灰掉, ASIC是否支持? （ASIC支持，一般不调，FPGA能不能测试还需要问）
(6), Address Map
Based on Bank, Based on Row(default). 默认是哪个, 哪个会提高效率. 
默认: bank, row, colume.（默认row，bank，colume效率高，即该寄存器设置成为0）

3, (9:50 2010-11-4)ddr feature概要
1, training: 频率调整后training, 温漂training(自动).
\todo training时间. 
2, 修改row, rank, col顺序和时序.
1), AL: 修改row, rank, col时序
2), Address Map: 修改row, rank, col顺序
3, reorder
4, Auto Refresh Mode
5, 电源管理:
降低功耗方法: 降低频率, 关闭dll(含200Mhz这个特殊频率关闭phy dll), 关闭odt, 进入self-refresh. 
1), powerdown, self-refresh, deep power down(only lpddr), 
2), 频率
ddrc: worse case 333MHz, typical 400MHz, best case 500MHz. 
ddr phy: dll on: >100Mhz. 此外phy dll支持100Mhz, 200Mhz两个dll关闭的频率. 关闭dll降低功耗
lpddr: 0-200, 无dll
ddr2:  0-533, pll on: >125MHz. 
ddr3:  0-1033. dll on: >125MHz. 这里有个问题. 0-125MHz是dll off, 300-333是ddr3要求的频率. 125-300能否工作? 
3), odt
阻抗匹配, phy和dram里面都有. 通常266MHz以下不需要, 以上需要. 与PCB板级设计有关. 
882 FPGA测试: off 50mA, on 300mA @ 24MHz. 频率越高差异越大. 
4), self-refresh. 进入self-refresh时功耗大约6uA. 
退出self-refresh需要200-300cyle for ddr2, 500cycle for ddr3.

12:00 2010-11-4
时间管理
0, 9:35

1, 本日
1), 10' 上午和yangxing讨论ddr问题.
2), 40' 和xiaotao讨论压力测试case. 和jiajihua确认, uhost和uotg+1sd+de+lcdif+emi+dma版本是有的. 可以用这个版本做压力测试. 串口问题暂缓.
3), 20' 支持yangmin调试VC0882 vdec bug. 
4), 发邮件. 
(1), 30' arm support是否延期. 见"15:30 2010-11-4"
(2), 30' 华恒codehammerA for Cortex-A8 support电话和邮件. 邮件见"14:47 2010-11-4"
(3), 60' jtag调查, 回信yinong邮件. 见"17:11 2010-11-4"

14:47 2010-11-4
VC0882, jtag, codehammer-a for Cortex-A8, 
1, codehammer-a for Cortex-A8使用问题
sdk-support@hhcn.com; market@hhcn.com
cc: yinong; wanshuiming; ai guo; fengbeizhan; zhangjian

hi, 贾小姐, 郭工

你好, 我是北京中星微电子有限公司张健, 刚才咱们电话沟通过. 之前买过贵公司的codehammerA for Cortex-A8, 现在有一些问题, 麻烦能解答一下. 
1, 文档中提到可以源码级调试, 请问针对Cortex-A8是如何实现的. 因为codehammerA支持的仿真器都没法编译Cortex-A8的代码. 
2, 上次邮件中提示可以调试elf文件, 这个我们没有实验成功, AXD似乎没法支持elf文件. 麻烦给出具体的使用步骤, 谢谢. 

这些问题希望能尽快回复, 如果能满足需要, 我们可能会再采购一些满足项目需要. 
上次咨询的联系人: 华恒科技市场部 方成俊 5325173

原文见"12:42 2010-1-7"

15:30 2010-11-4
VC0882, arm, Cortex-A8, 中星微arm license, support是否需要延续
1, Tess Perkins(也是arm公司的)邮件"Vimicro Corporation S&M Expiring Q4"20101102_0010
Hello Felix,
I am just following up my previous email regarding the Support and Maintenance will be expiring this Q :-
  Company:-Vimicro Corporation.
Products:- Mali-200 Windows CE OpenGL ES DDK pkg/ 
Mali-200 Windows CE OpenVG DDK package
  Contract:- LTR-14266
  Expires:- 8th December 2010
  Renewal fee:- $30,000
  Company:- Vimicro Corporation.
  Products:- ARM926EJ-S - Per Use
 Contract- ANX-02037
 Expires:- 8th December 2010-10-21 
 Renewal fee:- Set out in ANX-02036
 Company:- Vimicro Corporation.
 Products:- CoreSight Design Kit-Cortex-A8 -Per Use
Contract- ANX-02038
  Expires:- 8th December 2010-10-21 
 Renewal fee:- Set out in ANX-02036
 Company:- Vimicro Corporation.
 Products:- Cortex-A8 Synthesizable - Per Use
 Contract- ANX-02036
 Expires:- 8th December 2010-10-21 
 Renewal fee:- $80,000
Please let me know if this is a valid opportunity for this quarter?
Kind regards,
Tessa Perkins
Temp Licensing Co-ordinator
ARM LTD
110 Fulbourn Road,
Cambridge
CB1 9NJ
Tel: 01223 406091
Fax: 01223 400869
E mail - Tess.Perkins@arm.com

2, Felix Liu [mailto:Felix.Liu@arm.com]邮件"转发: Vimicro Corporation S&M Expiring Q4"20101102_0924
Hi Yinong, 
According to the contracts and the mail below, the following S&Ms had been expired on 2010-10-21. The question is does  Vimicro want to renew all and portion of S&Ms? If yes, please let me know.
thanks and looking forward to your feedback.
best
Felix Liu

3, YiNong邮件"转发: Vimicro Corporation S&M Expiring Q4"20101102_1043
我们关于A8一年的support 期限就要满了。 各位看我们需要从ARM续吗？ 总的来说，续support会很贵。希望大家有什么问题能尽早提出来。

4, 上面邮件aiguo转发给我, 需要会回复:
Zhangjian邮件"答复: Vimicro Corporation S&M Expiring Q4"20101104_1528
这边在882上问arm的问题是基本arm, ICE, TRACE使用上的问题. 和Cortex-A8 Synthesizable, CoreSight Design Kit-Cortex-A8这两个license有关系么? 
arm, ICE, TRACE使用上的问题目前有几个遗留问题, 后面尤其芯片回来后也会有问题, 例如trace的一些高级应用, profiling, arm参数的配置和arm的debug选项等等. 这些问题没有arm支持进展会比较困难. 

15:49 2010-11-4
同事信息, 5171, HR: fengyajuan
9:00-11:30. 13:30-16:30
四季青桥 地税. 
40号出口. 左转. 出辅路. 右转. 右转. 右手边. 

16:18 2010-11-4
openocd下载速度, 7.6kbyte/s, "19:14 2010-1-25"-2-3)
1M下载时间: 2'14".

17:11 2010-11-4
(12:15 2010-11-5)
VC1600, VC0882, VC0718, arm SOC, board, cortex-a8, jtag
0, 发信后, yinong质疑说codehammer不支持armv7还有什么意义. 我做了说明, 并补充了表格. 
对yinong的回复: 
嗯, 之前可能不太准确. 
能否调试看是否支持Cortex-A8的debug architecture v7, 表格中的三个都支持. 
这里的Armv7是侠义的armv7, 指Instruction set architecture, 关系到能不能正确反汇编, 这个要看调试软件是否支持. 
1, 目前市场上能支持Cortex-A8的调试器已经有很多. 价格比较有竞争力的有国内华恒codehammerA for Cortex-A8还有开源的openocd, 二者和RVI的比较见下表: 
自: "\\10.0.2.36\sqmshare\Document\Jtag_Debugger\cortex-a8仿真器比较.xls"

	软件	下载速度	下载时间	Cortex-A8 debug	开MMU后能否debug	是否支持armv7	是否支持NEON	是否支持elf	价格
RVI	rvdebugger	67	15 	支持	是	是	是	是	
openocd	eclipse+gdb	8	128 	支持	否	是	是	是	130RMB
codehammer	ads	33	31 	支持	未实验	否	否	否	3000RMB

注:
0), openocd和codehammer支持Cortex-A8基于对OMAP3530的实验结果, 没有在VC0882上实验. Openocd采用灵活的配置脚本, 理论上支持任何A8芯片. Codehammer是写死的, 厂家不保证支持其它A8芯片. 
1), 下载速度单位是: kbyte/s;								
2), 下载时间指下载1Mbyte需要多少秒;								
3), codehammer由于没有源码级调试, 只实验过下载bin文件, 因此没有实验开mmu的单步调试 								
4), openocd的详细情况
(1), 之前简单看过openocd资料, openocd不支持开mmu, cache的调试可能是因为走了ahb-ap这条通路不通过arm直接访问memory, arm的RVI其实走的是apb-ap通过arm访问memory. 如果能修改一下openocd的代码, 可能就可以支持mmu和cache. 
(2), openocd的下载速度收到其usb2jtag芯片(FTDI2232)速度的限制, 很难再提高.

2, 此外, 像BDI3000, Trace-32, code viser, JTAGjet这些调试器也都Cortex-A8, 支持gdb协议, 就是价格较高(大约2-3万).
之前使用的multiICE, jlink这些调试器都不支持Cortex-A8. 

3, 这次还调查了TI的调试器, 有300RMB, 4800RMB等几种, 但是TI调试软件已经写死用TI的哪个芯片, 考虑到不同的Cortex-A8扫描链可能不同, 估计882没法使用TI的调试器. 

4, 局限: arm的开发环境和jtag较多, 目前只是调查了最流行的一些jtag. 

5, 其余信息(未发邮件). 
1), jtagjet
http://www.superinst.com.cn/product.asp?pid=53&display=False
010-51288181-805, pan 小姐
debugger fo A8 3300$, 加上关税, 大约27000RMB. 
trace for A8, 7600$.
2), zhicheng之前搜集的jtag资料"17:19 2009-9-10"
3),  TI OMAP3530 调试器, 可能也可以用于其它A8. 价格也不贵. 不清楚能否调试axf或elf. XDS100v2 380RMB, XDS560 9800RMB, TDS560 Plus 4800RMB. 这些软件需要使用CCS, 不清楚对于普通arm axf支持如何? 
http://focus.ti.com/docs/toolsw/folders/print/ccstudio.html
经过实验发现TI的软件没法支持TI以外的芯片, 考虑到不同SOC的Cortex-A8的扫描链可能不同, 估计没法用于882. 

17:43 2010-11-4
FengBeiZhan邮件"VC0882 icp 软件模块负责人（或者历史负责人）进行模块自查"20100928_1304
882这个项目大家的performance 非常好，也比较辛苦，在此感谢大家的努力和付出。
最近2周，882 陆续发现了一些ic的bug和软件的issue，简单总结如下：
Ic bug：
1）   de ：发现height 大于960的图放大时有个竖条，是718 icv发现的；
2）   ddrc：发现 r、w group reorder 有bug；
3）   ddrc：发现进入refresh 后马上访问时会出错；
4）   ddrc：发现auto refresh 和 zq ms 同时起作用时有corner bug；
5）   tpi：发现sar 在采集电压时精度不够，必须降低clock到400k才可以保证精度；
software issue：
1）   gpu 发现在de 4层加压时有时图片上有很宽的竖条纹；
2）   host 发现register 的属性是Strong order，应该是device；
3）   host发现 qt 挂载方式有问题；
4）   padc 发现用的pin list不是ic 最新的；
5）   ddrc 发现我们的脚本reorder 并没有全部打开；
bootloader bug：
1）   发现nfc 的clk gate有问题；
2）   发现sdio  clk 的reconfig时没有配置timing；
3）   还有部分笔误或疏忽；
cf code 不稳定：
1）   gpu 发现有个版本写bit会错误；
2）   部分cf code audio不能用
3）   部分cf code tpi 有问题；
4）   部分cf code fd 不能用；
5）   ……
未解决问题：
1）   host加压时软件检测标志有问题；
2）   host 去掉Strong order有问题；
3）   ddrc dpd mode是否运行程序结果不一致；
诚然，上面的问题部分不是我们的问题，但是部分确实是我们的问题，只要我们多思考，是可以考虑到的。
前一段时间我们也做过882的查漏补缺和总结，从上面的情况来看，我非常自信的de 模块都出了问题，看来我们的验证还是存在一定的缺陷。
在882临近尾声时，希望大家抽上1天时间，再仔细check一下自己所负责的模块（或者这个模块以前是自己负责的），还有那些漏掉的或者要加强的地方。希望所有bug尽量现在发现，如果芯片回来还有我们应该可以发现，但是没有发现的bug，对项目、对team、对自己都没有好处。 当然，如果谁对自己负责的模块非常自信，是不用自查的。^_^
另外：有的模块我们可能不是很了解，例如ddr，我们要花时间很好的补充自己，使自己尽可能对这个模块非常熟悉；
有的模块可能形成思维定式了，例如de测试大图的问题，这个属于我的失误，降低clock用debug通路是可以测试，但是我们却没有测试；再次提醒大家要发散的想问题。
如果谁查过了，请发信告诉我一声，希望国庆前能把自查的事情做完。
如果还有什么问题，可以随时找我或aiguo，也可以随时开会讨论。
如果还有什么遗漏，请aiguo、xuelian补充。

19:57 2010-11-4
VC0882, Linux, 加压测试, vdec, telnet
1, yangmin, telnet连接时还是会死. 
后来发现只要不用串口, 也不读取/proc/kmsg. 就没事.
难道问题在于不能打印? 

10:32 2010-11-5
VC0882, power分析
xueke邮件"答复: the simulation result for 882 power"20101105_0958
1. 表的第二页每个case不一定会包含所有的core/IP/IO。不同的case包含的模块会有不同，表的第一页有对每个case的详细说明，每个case包含了哪些module，每个module的状态(正常工作状态或者power down或者gating)等。
另外power group列表示的是这个case分析的是从哪一层次开始的。Vc0882表示的就是从顶层开始，会包含所有的该case对应的core/IP及所有IO。比如ODT ON/OFF case，power group是ddr_sstl表示只对DDR的IO进行了分析。
[Yinong]  我是讲所有在这个scenario下相关的core/IP/IO.  比如放1080P时， audio,  nand, arm等都得工作。
[xueke]是这样的，表中的功耗值就是把这个scenario相关的core/IP/IO都考虑进去的统计。
2. 第二个问题我不太明白，是说把case中的read/write ratio统计出来？
[Yinong] g根据read/write, 确定ODT什么时候要开关，然后把具体的ODT在那个scenario下的功耗数字算出来。  用paper& pencil 计算加上去也行。但我们一定要make sure我们可以看见一个scenario下功耗的总值。
[xueke] ODT只有在高频，比如200Mhz以上需要打开。而目前几个典型的scenario，1080p/720p/video conference等，设定的各个模块，总线的频率都是满足这个scenario的应用需求的最低频率。
这几个典型应用上，总线频率125Mhz已经满足需求，而在这个频率下，是不需要打开ODT的。
3. ODT off的状态下，DDR3的数据比LPDDR好，从工具的结果上看是这样的。我再分析下数据。
[xueke] 以1080P的case为例分析：
DDR3与LPDDR差别主要在ddr_sstl即ddr IO上。由于LPDDR IO为1.8V，DDR3 IO为1.5V，所以LPDDR的switching power 和internal power比DDR3要大。
1080P这个case下DDR3与LPDDR差的20多mW中，主要就是由于在DDR IO上，LPDDR就要比DDR3 power大了接近20mW导致的。
下面是在1080P这个case在LPDDR/DDR2/DDR3上DDR IO部分的功耗统计。可以看到在不同DDR上功耗的差别基本都是由于DDR IO部分功耗的差别导致的。
Switch    internal           leakage       total
Power     power            power        power
DDR3       9.68e-02 3.73e-03        2.88e-02     0.129
LPDDR     0.121      2.15e-02         2.43e-03     0.145
DDR2       0.156      8.03e-03         7.93e-02     0.243
4. 3D Gamming的case当时仿真的时候中间出错，停掉了，目前还没有新的仿真波形给出，所以暂时没有这个case的数据。
[Yinong] Okay, please provide once the issues are fixed.

10:45 2010-11-5
时间管理
0, 9:58

1, 本日
1), 20' 和xiaotao和wenlei讨论加压测试. 
2), 20' 和VC0718同事讨论clock和wdt reset. 
3), 30' 和zhicheng讨论VC0882环境.
4), 20' 回复yinong邮件. 见"17:11 2010-11-4"
5), 14:00-16:30 向VC0380项目组介绍VC0882等项目的验证经验. 见"16:35 2010-11-5"
6), 加压测试. 
7), 总结: 感觉自己表达能力超差, 发个邮件要写半天.

16:35 2010-11-5
VC0882, VC0380, 向VC0380项目组介绍VC0882等项目的验证经验
1, fengbeizhan转发邮件
HuQingQing邮件"Re: 答复: ask for Aiguo to introduce the basic work flow and evaluate the work load of VC0380 vefiication"20101103_1809
aiguo，beizhan：
谢谢！现在还没有什么特别的需求，其实主要我也不知道什么算是特别要求。
是否可以结合882做个overview?
针对VC0380相关的主要是：
--1: CPU and Key peripherals：ARM core/Clock/CACHE/memory/DDR controller/interrupt controller etc.
--2: general peripherals: UART,USB,SDIO/SPI, I2C,Ethernet.
--3: video pipe. VC0380 支持1080P 60FPS的H.264 main profile encoder, JPEG encoder。
--4：audio processing.
--5: how to boot?
--6: Any embedded OS?
--7： dragon tools on PC. 我们这边只有赵盖兼职负责dragon工具，希望能在你
们这里拿点现成的东西。
石红，小明 看看有什么补充？
thanx
--Qingqing(胡庆庆)
Vimicro Beijing
10-68948888-8214
13601207437
于 2010-11-3 17:44, Feng Bei Zhan 写道:
> Aiguo明天就回来了。
> 经验谈不上，只是说大家可以一起交流交流。
> 你细化一下要求，我们这边安排一下看都需要谁参加，都需要准备什么东西； 等把东西准备好后，就大家一起讨论讨论。
>
> 时间可以定在周五下午，这样给准备资料留点时间；
> 如果有特殊的模块需要展开讲，提前告知一声。
>
> Thanks.
>
>
> ********************************
> Best Regards.
> fengbeizhan
> Tel: 8610-68948888-8255
> Fax: 8610-68944075
> mobile:13810890945
> E_Mail: fengbeizhan@vimicro.com
> ********************************
>
> -----邮件原件-----
> 发件人: Tu Jian 
> 发送时间: 2010年11月3日 17:35
> 收件人: Feng Bei Zhan
> 抄送: Hu Qing Qing; Shi Hong; Huang xiaoming; Zhao Gai; jacobzhang; Ydcao; John Fan; Larry L Xie; Huo Xiao Fang
> 主题: 答复: ask for Aiguo to introduce the basic work flow and evaluate the work load of VC0380 vefiication
>
> Hi Feizhan,
> AiGuo好像还在休假。明天和后天不知道你什么时间有空？
> 因为380的验证需要PCC自己做，需要向你们请教一下SOC芯片的验证经验。
> 能不能安排主要的相关工程师给我们介绍一下8系列芯片上验证的工作流程和方式，以及大概的资源投入情况？
> 看你们什么时间方便，我来定会议室，多谢啦！
>
> TuJian
> Vimicro Corp. 010-68948888-8204
> Mobile 13910607719
> -----邮件原件-----
> 发件人: Hu Qing Qing 
> 发送时间: 2010年11月3日 16:34
> 收件人: Tu Jian
> 抄送: Hu Qing Qing; Shi Hong; Huang xiaoming; Zhao Gai; jacobzhang; Ydcao; John Fan; Larry L Xie; Huo Xiao Fang
> 主题: ask for Aiguo to introduce the basic work flow and evaluate the work load of VC0380 vefiication
>
> 涂坚:
> 麻烦帮忙安排一下，请aiguo介绍在8系列芯片上验证的工作流程和方式，以及大概
> 的资源投入情况。
> 我们这方面没什么经验,作为VC0380的开发参考!
>
> PCC这边：石红，曹玉弟，黄小明，赵盖，涂坚和我参加。
>
> 谢谢

2, 资料位置: 
\\10.0.13.101\share\380讲解

3, 介绍过程和体会.
1), 发现介绍项目经验与对项目理解深度和广度都有关系. 
beizhan希望zhicheng和我主讲. 实际我也就是对arm这块比较熟悉. 其它内容就少一些. 验证注意事项的几个基本点我是想到了, 只是没有beizhan描述的清楚. 
2), 380考虑正在评估用什么样的cpu, 使用Tensilica的xtensa或arm. 
3), 我向大家介绍了arm部分:
mmu, cache; 指令集, 编译器feature和bug; cpu与bus的关系; in order与out of order; debug接口; debug寄存器. 
4), beizhan介绍882流程管理
模块进度, 系统进度.
系统进度包括datapath, performance, compatibility.
5), 882 performance测试, 先做理论计算, 再做寄存器统计, 同时和ICV对比数据是否一致.
6), beizhan介绍中提到VC0718使用xml整理参数. \todo了解. 

12:55 2010-11-8
时间管理
0, 9:35

1, 本日
1), 9:45-16:15 android clkrst doc review; 见"14:11 2010-11-8", "10:40 2010-11-3", "18:47 2010-11-3".
中午休息2小时. 
2), 问华恒codehammer, 什么时候寄回来. <明天会收到, 问题的邮件已帮我转发>.
3), 整理白天会议内容, 发给aiguo和beizhan. 见"14:11 2010-11-8"
发上周Linux测试进展. <DONE>
4), Linux上周工作总结. 见"16:09 2010-11-1".
5), 整理自己的工作任务, 给aiguo, beizhan发邮件. 见"17:59 2010-11-8".

14:11 2010-11-8
VC0882, android, power, arm, clk, ddr, meeting, 我的任务
1, \todo 查 clockdomain, powerdomain.
是每个模块一个锁, 还是一个tree一个锁? 

2, 882会先回来445封装. 2/15--4/15是系统稳定期. 2011年4月1日希望能给客户样机.
如果12月能拿到android3.0, 会迁移到3.0, 预计主要是多媒体部分受影响. 
rockchip情况: 45nm GP工艺. 没有pmu. 希望能在power上胜过rockchip.
3, 我的任务, arm, ddrc, performance monitor, load predictor. 由于芯片回来到5月1日时间很短, 希望BianRongGuang和我的power工作都能在芯片回来之前准备完成. 
1), cpu loading监测, bus loading监测. 
大约11月22日(review)->12月1日(doc完成)->12月15日(coding完成). 
2), arm ddr
(1), 12月15日之前确定arm, ddr工作内容. 例如: 
A, ddr boot参数.
B, ddr sleep流程处理. 
C, arm L2 cache. 
D, 完成clock和power中arm, ddrc相关结构体和函数(架子和共用函数由bianrongguang完成, 大家是各自去填自己的模块).
(2), 12月15日--1月15日, 完成arm, ddr所有工作.
4, 芯片回来后, 和bianrongguang, suxin一起把系统跑起来. 后面是优化系统性能. 

16:48 2010-11-8
VC0882, Linux, 压力测试, 每周工作进展, 11月8日--11月14日
1, 11月8日
1), xiaotao: 提交测试, 给测试演示时出问题, 正在调试.
xiaotao本来想实验看看35的kernel在OMAP3530上是否文档, 在VC0882上只使用top也有问题. 和xiaotao讨论, 再回去实验29是否稳定. 经过实验, 29稳定, 决定移到29上实验. 
bamvor: 其实早就应该使用OMAP3530对比实验.
xiaotao发现了上传kernel代码技巧: 用两个线程上传arch和include, 单独上传其它文件. 
Liuxiaotao邮件""20101108_2030
目前发现，linux 2.6.35内核不太稳定，linux2.6.29比较稳定。（原因正在查找）
需要大家把驱动移植到linux2.6.29上去。
代码已经传到cvs服务器上去了， 目录为 Linux\kernel\linux-2.6.29
大家在 Linux\kernel 目录下面cvs update –d就可以取得代码
2), yangmin发现fat有问题. cluster error.
YangMin邮件"FAT: Filesystem error"20101108_1501
Hi,dongliang
压力测试时发现如下错误，帮忙看下
FAT: Filesystem error (dev mmcblk0p1)
fat_get_cluster: invalid cluster chain (i_pos 54041738)
File system has been set read-only
FAT: Filesystem error (dev mmcblk0p1)
fat_get_cluster: invalid cluster chain (i_pos 54041738)
FAT: Filesystem error (dev mmcblk0p1)
fat_get_cluster: invalid cluster chain (i_pos 54041738)
FAT: Filesystem error (dev mmcblk0p1)
fat_get_cluster: invalid cluster chain (i_pos 54041738)
3), 我为了明确加压测试的事情, 发了如下邮件, 其实应该早点发或者开个会. 
ZhangJian邮件"请大家尽快在kernel2.6.29上提交加压测试case"20101108_2044
加压的事情请大家回复到这个邮件. 
882快要tapeout了, 需要这周把加压测试事情都完成, 测试目的是测试bus压力大时, 882硬件有无问题. 
目前一共11个case,  Testplan位置: “D:\Linux\doc\testplan\VC0882_Linux_压力测试.xls”, 请大家及时提交测试. 
2, 11月9日
1), xiaotao: 修改了uart DMA到2.6.29. 198服务器上加入了压力测试case. 
现在压力测试case xiaotao不仅考虑了自己的dmac, 也考虑了其它使用是否方便, 做的挺好的. 
3, 11月11日
1), 2FPGA压力测试uhost pass.
2), 4FPGA vdec压力测试有错. 

17:59 2010-11-8
VC0882, Linux, 我的工作任务
1, 给aiguo, beizhan发信. 
今天上午和下午和zhaoyuan, suxin, bianrongguang revive了android power相关内容, 我的任务情况见后. 
加压测试2FPGA和4FPGA都测试出一些问题, xiaotao, dongliang和yangmin在查. 我稍候会整理上周加压测试的进展发给你们. 
我觉得最近我自己的事情总是理不太清, 想整理一下自己的事情(会单独发邮件). 希望你们能指导指导. 
有时间的时候会和dongliang一起把android在OMAP3530跑起来, 便于大家学习. 后面我自己希望以Linux kernel里面的clock和power为主, 穿插看一些android的power相关内容. 

附, 我在AE的工作内容, 感觉事情不少, ddr部分希望yangxing能帮忙: 

bamvor: 工作内容见"14:11 2010-11-8"2

2, 我的工作任务:
hi, aiguo, beizhan

我自己整理的工作情况如下, 加压测试后, 自己希望以kernel中的clk和power为主, 觉得android学习的事情有点力不从心. 
觉得自己时间用的不少, 效果不明显, 而且有些关键的东西也没有关注到位, 例如说大家调试加压测试中遇到的问题, 我只是说是能理解, 没有深入看. 
1), Linux加压测试: 一是大家沟通进展, 二是加压测试串口不稳定, 每天都会和xiaotao讨论一下. 
现在基本每天都和大家沟通一下, 看看进展, 这样比较清楚大家的进展, 便于及时沟通. 就是用的时间多一些. 
目前2.6.29正常, 2.6.32和2.6.35kernel有问题. 32和35的kernel porting和driver都相同. 目前认为是移植的问题, 希望后面和xiaotao一起查一下32/35 kernel具体为什么有问题.
2), bootloader. 基本没事了, 需要follow一下clkrst仿真进展. 
3), android. 暂时没有开始. 和dongliang一起把OMAP3530 android跑起来, 然后花时间了解clk, power相关部分. 
4), zhaoyuan: arm和ddr的事情. 可能加压测试之后这个事情会占到60%的工作量. 
5), 开发中遇到的问题. 
(1), panda_os调试时, 出错情况下有时需要分析函数调用关系, 如果能把kernel的backtrace移植过来会比较方便.
(2), 调试工具: 我自己感觉openocd或kgdb方式更好一些. 华恒的东西太局限了. 
改进openocd或移植kgdb到panda_os未必需要很长的时间. 

3, Fengbeizhan邮件"答复: 张健自己的目前的工作内容和后面工作的想法"20101109_1117
我的建议：
优先级最高：先把调试工具搞定，这个关系很多人的效率，这个时间要求比较短。
优先级第二：加压的尽量收尾，这个事情以其他人做为主线，主要进行辅助；
优先级第三：bootloader的跟踪；这个应该花的时间不多；
等以上事情差不多时，在逐步开展其他事情。 

19:55 2010-11-8
VC0882, Linux, sd, dongliang sd改进
1, dongliang sd改进
1), Linux中会自动进入sd高速模式, 但是FPGA下sd高速模式有问题. 
FPGA sd高速模式有问题的原因是FPGA上为了普通卡可以用, 修改了采数方式. 
2), 上升沿采数改为下降沿采数;
3), 改进锁的使用. 
4), 全局变量: dma_current是全局变量, 使用四个sd卡时, 会有问题.
2, dongliang调试sd卡时, beizhan曾经发信要求仿真, 我自己为什么没有想到需要仿真?

9:11 2010-11-9
时间管理
0, 8:30-18:50

1, 本日
1), 20' 加压测试. 
2), 2h(上午+中午13:15-13:45) Micron memory芯片介绍. 
3), 实验codehammer仿真器. 见"17:18 2010-11-9".
4), xuxiang Linux 进程线程区别. 见"17:55 2010-11-9".

17:18 2010-11-9
VC1600, VC0882, VC0718, arm SOC, board, cortex-a8, jtag
1, 
1), 只支持OMAP3530. 
2), 源代码调试和elf事情需要进一步确认. <已发邮件>
2, 回复邮件. 

17:55 2010-11-9
VC0718, Linux, Linux进程线程区别
见\\10.0.2.36\sqmshare\Document\Linux\kernel\LINUX内核设计与实现, 3.3节. 线程之间共享比进程多了共享地址工具, 打开的文件, 文件系统信息. 

9:49 2010-11-10
时间管理
0, 9:42

1, 本日
1), 50' 看邮件. VC0882准备12.3 tapeout, 见"10:04 2010-11-10".
2), 10' 和yangxing讨论VC0718 EMI boot. 希望yangxing以后有文字的东西和我一起讨论. 注意总结. 
3), 10' autoconf文档还没有完成. 已经拖了几天了, 再不写就忘了. <DONE>: 其实已经完成了, 见"14:42 2010-10-26"-6".
4), 40' 讨论VC0882 panda_os下uotg/sd加压问题. 见"11:34 2010-11-10".
5), 30' 和xiaotao, yangmin, wenlei讨论加压测试case. 
6), 30' 和yangxing讨论cache debug tool和Linux问题的解决.
7), 60' 看VC0882 bootloader usb clock问题. 见"17:56 2010-11-10"
8), 总结: 感觉每天时间过的真快, 稍微一回神, 感觉就快下班了. 

10:04 2010-11-10
VC0882, schedule, tapeout
1, YangZuoXing邮件"about the adjusted vc0882 tapeout schedule"20101109_2255
考虑到目前的实际情况，我们将TAPE OUT 的时间调整到12月3日。
具体安排请参见附件。
请根据这个安排相应调整工作。
有问题的，请与我联系。
Hi, wright,
根据这个安排，我们将在11月16日和25日分别给你两版网表。
2, 邮件中的文档保存在"D:\work\VC0882\Documentation\vc0882_tapeout_schedule.xls".
从表格中可以看到分为: top, gpu, vcodec, a8, ddr phy五部分. 每部分都包括若干子项, 例如top里面包括: tapeout, tapeout review, drc, lvs, dummy metal insertion, bounding check, netlist release, ir drop analysis, lvt cell replacement, timing closure for 120 scenarios, timing closure for 8 scenarios. 
除了里面的"timing closure", 其余都能理解. "timing closure"估计是看不同场景下timing有无问题. 
列出schedule的同时分为critcial path, high risk path, non critical path三种情况. 
例如critial path包括: 
<top>final drc, <top> final lvs, <top> timing closure for 120 scenarios, tapeout, <gpu> timing closure等, 从这里也可以看出882的流程和后端难点在什么地方. 

11:34 2010-11-10
VC0882, storage, nucleus, uotg, sd, 讨论VC0882 panda_os下uotg/sd加压问题
VC0882 uotg/sd加压问题讨论和对策
send: Qiao wei; Han zhimin; Jia jihua; Fan zhijun; Meng fandong; Feng Bei Zhan; Zhang jian; Wang zhengwei
cc: VC0882_ICP; VC0882_ICD; Yi Nong; Yang Zuo Xing; Ai Guo; Feng Bei Zhan; Li Xue Lian; Wang Xin; Gao Yong; Yang Lei
1, 场景, 做压力测试, 如下模块同时工作: 
1), memory: ddr3/lpddr
2), uotg/sd: copy大文件. copy 135M文件 20-30次会出错. 
3), de动态加压(最多刷四层图). 
4), DMAC搬运. 

2, 现象和分析
1), 出错时屏变黑(和系统上电时的情况一致), 此时ICE无法连接. 
偶尔是LCD花屏(ICE可以连接), shuyu检查de寄存器正常, 是de buffer数据出错. 
ICE无法连接可能的原因是arm访问总线无法完成造成ICE无法通过debug APB访问arm, 或者是时钟有问题. 
如果是arm访问总线出错, 再加上黑屏, 怀疑是总线/ddr出错. 根据这个思路确定了下面的实验
2), 目前normal 2FPGA和4FPGA无问题. 

3, 实验
1)-4)每个实验都是独立实验. 实验5)优先级低且担心对系统压力有影响, 最后做. 
1), 排除ddr问题: 接EMI 64M sram实验.
2), 降低压力: 去掉de或dmac. 
3), 关闭ddr一些feature: disable reorder. 
4), 添加uotg/sd循环copy命令. owner: mengfandong. 
5), 打印DMAC, OTG访问的地址, 最好软件能检查地址是否正确. 便于确认系统是否出错. 

4, 出错时debug方法:
1), 看clock: ddr, de_pixel_clk
2), 看相关寄存器是否正常. 

14:55 2010-11-10
VC0882, bootloader, testplan, clkrst, pmu: fast wakeup
1, testplan位置: "D:\VC1600WCVS\doc\verification\plan\bootloader".

17:56 2010-11-10
VC0882, bootloader, clkrst, clk, storage, usb clock问题
1, 问题: 
ChangYuBao邮件"答复: Release 882 bootloader Ver13 给仿真"20101110_1731
Hi dongliang
         Ver12 跑完了，发现了一个问题。
         在uotg初始化的时候有段代码负责MCLK enable，如下：
                   static VOID _VIM_CLKRST_EnUsbMclk(VOID)  
{
    __CLKRST_StorPeriMclkDisBit(STOR_PERI_MCLK_UOTGC_MCLK_GT);                     //先取消gate uotg_mclk
    __CLKRST_StorPeriAclkDisBit(STOR_PERI_UOTGC_ACLK_GT);
    __CLKRST_StorPeriMclkEnBit(STOR_PERI_MCLK_CKD_USB_EN);                              //再使能MCLK_DIV
}
但Clk rst RTL代码如下
always @(posedge usb_mclk  or negedge usb_mrst_n)
begin
if(~usb_mrst_n)
stor_peri_mclk_ctrl_local3 <= `STOR_PERI_MCLK_CTRL_INIT;
else if(stor_peri_mclk_ctrl_write_pulse3)
stor_peri_mclk_ctrl_local3 <= stor_peri_mclk_ctrl;
end
wire [31:0] stor_peri_mclk_ctrl_mux = {2'b0,
   stor_peri_mclk_ctrl_local2[`CKD_OUT2_EN:`CKD_UART0_EN] & {(`CKD_OUT2_EN-`CKD_UART0_EN+1){~l2_gate_force}},
   stor_peri_mclk_ctrl_local1[`CKD_PERI_EN] & ~l1_gate_force,
   stor_peri_mclk_ctrl_local1[`CKD_SPI2_EN:`CKD_SPI0_EN] & {(`CKD_SPI2_EN-`CKD_SPI0_EN+1){~l2_gate_force}},
   2'b0, 
   stor_peri_mclk_ctrl_local1[`CKD_PADC_EN:`CKD_SDIO0_EN] & {(`CKD_PADC_EN-`CKD_SDIO0_EN+1){~l2_gate_force}},
   1'b0,
   stor_peri_mclk_ctrl_local3[`UHOSTEOC_MCLK_GT:`UOTGC_MCLK_GT],
   stor_peri_mclk_ctrl_local1[`CKD_USB_EN] & ~l2_gate_force
   };
从RTL代码中可以看出：只有先使能了MCLK_DIV，才可能取消UOTG_MCLK的gate
上面软件中最后一行代码必须放在最前面。
之前的bootloader是可以跑过了，不知道最近是bootloader的代码有了改动，还是clkrst部分RTL代码有了改动。
我看了一下clkrst寄存器文档，里面没有描述到寄存器的配置有先后顺序的要求，不知道clkrst中是否还有相同的地方，毕竟clkrst模块在FPGA上不能被充分验证到，需要我们更加小心。

2, 确认并回信: 
1), 看了一下huangwei的文档并和huangwei确认, 的确有这个顺序要求, 代码已做相应修改:
For UOTGC or UHOSTEOC*, software first writes 1 to CKD_USB_EN bit in memory mapped register STOR_PERI_MCLK_CTRL to enable the CKD_USB. And then Write 0 to UOTGC_MCLK_GT or UHOSTEOC*_MCLK_GT to disable the corresponding clock gating. 
代码修改:
static VOID _VIM_CLKRST_EnUsbMclk(VOID)  
{
    __CLKRST_StorPeriMclkEnBit(STOR_PERI_MCLK_CKD_USB_EN);
    __CLKRST_StorPeriMclkDisBit(STOR_PERI_MCLK_UOTGC_MCLK_GT);
    __CLKRST_StorPeriAclkDisBit(STOR_PERI_UOTGC_ACLK_GT);
}
2), 另外, bootloader里面还注意了下面两个顺序, 满足mas要求: 
(1), peri和peri下面的device也有顺序, 需要先看peri再开peri下面的device. 
(2), NFC要求上升沿对齐, 

麻烦huangwei帮忙确认还有没有其它需要注意的clock配置顺序. 


配置divider有没有glich? 

wire是连线不会有register. input一般是wire, output一般是reg. 所以stor_peri_xxx这个不会有寄存器. 

18:25 2010-11-10
VC0882, Linux, android, clkswitch, ddrc
1, ddrc的switch流程比较复杂, 直接在clk里面实现还是单独做, 只是调用set_rate这个函数.
2, cpu, bus, ddrc switch里面实际set_parent和set_rate可以同时做, 目前是分为两个函数, 对效率有影响. 有没有必要加入set_parent_rate函数? 这样就和Linux标准接口不同了, 好在这三个模块, 都算自己用, 应该也没什么影响.
3, 系统启动后可以默认关闭一些clock. 例如SPIBOOT.
4, 下面这些clock是否也要加入? 除了arm, bus, ddrc, 还有atb, pclkdbg, fabric clock. 
AXI Fabric IP’s clock is active upon power reset. By writing proper value into memory mapped register FABRIC_ACLK_CTRL, Software can gate off the following AXI fabric IPs’ AXI clock to save power: MARB, video sarb, storage sarb and peripheral sarb. 
5, (10:27 2010-11-18)882 lock count: 每个模块需要lock自己时钟需要增加模块到clksrc的lock count. 不需要lock时减少引用计数. 我之前理解的不对, 以为需要lock只是module到clksrc的lock都设为1, 此时, 如果模块模块或本模块需要unlock或需要set parent rate, 就没法确定能否解锁.

10:38 2010-11-11
发现自动处理未必能节省多少时间. 而且保存发件人需要区分是否是vimicro. 目前还很难自动做, 考虑到自己做未必会浪费很多时间. 暂时不做. 
查找: 
^发件人:\ (.*).*\n发送时间: ([0-9][0-9][0-9][0-9]).*([0-9][0-9]).*([0-9][0-9]).*([0-9][0-9]):([0-9][0-9])\n.*\n.*\n主题:\ (.*)\n.*\n(后续标志:)?.*\n(标记状态)?.*
替换: 
\1邮件"\7"\2\3\4_\5\6

10:44 2010-11-11
VC0882, storage, nucleus, uotg, sd, 讨论VC0882 panda_os下uotg/sd加压问题, 续, 初步判断是电源问题, \todo总结查找思路; FPGA供电不足或过流保护可能导致FPGA内容丢失; 总结, 文档
1, mengfandong [mailto:mengfandong@vimicro.com] 邮件"答复: VC0882 uotg/sd加压问题讨论和对策"20101110_1336
Hanzhimin,
循环拷贝已经加上了，已上传。
Fat---〉loopcp  
参数：原文件名  目标文件名   拷贝次数
说明：拷贝完成后，自动删除，然后继续拷贝、删除…………
测一下吧，有问题随时叫我。

2, 2-5邮件中经过实验发现会出现FPGA指示灯灭的情况, MickChen认为可能是负载电流过大，电压不够3.3V，导致FPGA内容丢失。根据这个情况实验, 今天beizhan着急大家讨论: 分析是因为测试这个otg的电源以前做了6A的限流，在2个fpga使用负载大时，总电流超过了6A导致的问题. 这个会确认. \todo 跟踪进展
1), Fanzhijun邮件"答复: VC0882 uotg/sd加压问题讨论和对策"20101110_1957
下午Hanzhimin复现出了崩溃现象，FPGA板的下载指示灯都灭了。
咨询MickChen，认为可能是负载电流过大，电压不够3.3V，导致FPGA内容丢失。
17点之前的实验情况是：
一套NORMAL 版本，加DMA+DE，在SD里做拷贝操作，重复30次，正常；
两套UOTG版本，一套DMA不带DE，崩溃；一套DE，不带DMA，崩溃；即减压情况下，拷贝20次以内还是发生崩溃。
发现出现系统崩溃的两套UOTG FPGA板是接到一台电源上的。
17点左右做了调整，把NORMAL 和一套UOTG做了交换（FPGA带子板一起），
一套UOTG单独用一台电源，满负荷DMA+DE+UOTG拷贝；
另一套UOTG和NORMAL合用一台电源，合用的UOTG做满负荷的DMA+DE+UOTG拷贝； NORMAL也是满负荷的DMA+DE+SD拷贝；
现在三套系统都拷贝了30次以上，还在继续。
今天晚上会让三套系统在满负荷情况下各拷贝400次，看是否仍正常。
如都正常，则可推断崩溃原因是板级系统，再进一步排查崩溃的条件(比如调整之前有块UOTG接了EMI子板，带来0.3A的电流负载)。
2), , Hanzhimin邮件"答复: VC0882 uotg/sd加压问题讨论和对策"20101111_0954
Hanzhimin邮件"答复: VC0882 uotg/sd加压问题讨论和对策"20101110_2051
1、  B 动态de+dmac直接更换为1个电源单独供电，电压5.2V，电流为2.8A（ICE）
动态de+dmac 拷贝286次没有问题；拷贝135M文件
2、  供电源的Uotg和SD拷贝分别299次和367次均正常（都为ICE）
3、  两个USB接同一个电源（一个emi一个ice）
启动方式：B用ICE启动，A用EMI启动，电压5.2V，电流为6.2A
A、 vc0882_rev0_01111003_02080900_USB2FPGA_UOTG_noCifGpuEncDec_tag20101026_1500_noNFC.ace
dmac 拷贝文件135M，12次崩溃
B、  vc0882_rev0_01111002_02080900_USB2FPGA_UOTG_noCifGpuEncDec_tag20101026_1500_noNFC_SDnoBUFG.ace
动态de ，拷贝文件135M，1次出现系统崩溃的问题；
4、  B 动态de+dmac直接更换为1个电源单独供电，电压5.2V，电流为2.8A（ICE）
动态de+dmac 拷贝80次没有问题；
5、  A的USB拷贝（dmac）   和    normal的2fpga lpddr 做SD（de+dmac）的拷贝，30次没有问题；（都用ICE，没有EMI子板）
6、   A的USB拷贝（dmac+de）   和    normal的2fpga lpddr 做SD（de+dmac）的拷贝，50次没有问题：（都用ICE，没有EMI子板）
7、  以前崩溃测试环境：padc（无USB的phy）和USB一起测试，接同电源，其中一个用EMI启动，一个用ICE启动，会出现崩溃；
晚上2情况设置拷贝500次，4情况设置拷贝500次
3), mengfandong邮件"答复: VC0882 uotg/sd加压问题讨论和对策"20101111_1003
从这些实验现象看，目前问题只出现在两个台子共同使用一个电源，同时其中一个台子使用emi的情况(emi使用时会增加0.5A左右的电流)
4), FengBeiZhan邮件"答复: VC0882 uotg/sd加压问题讨论和对策"20101111_1020
刚才大家开会讨论一下，分析是因为测试这个otg的电源以前做了6A的限流，在2个fpga使用负载大时，总电流超过了6A导致的问题。
今天会先复现一下这个问题，等复现后把电源限流调大，如果问题解决了，说明就是这个原因。

3, 总结这个问题分析的思路:
这个问题之前shuyu和我讨论过, 当时得到的信息是系统出错是花屏, shuyu check de寄存器正确, de buffer数据错误, 所以希望保护de区域不允许arm写入. 当时实验无进展.
昨天上午beizhan召集大家讨论, 我当时想的主要还是软件和IC逻辑错误, 当时也问了有没有出现过FPGA指示灯灭, 当时大家说没有出现. 后来昨天下午这个问题就出现了, 由此Zhijun和Mike Chen讨论, 分析可能是FPGA供电问题. 
其实还是自己有点局限, 想问题时第一反应还是先看软件有无问题. 而没有完整思考一下. 
总是提醒yangxing要总体思考一下, 自己其实也没有完全养成习惯. 
借此完善自己的文档见"20:06 2010-10-27".

4, 后续进展, 的确是限流的问题. 
1), HanZhiMin邮件"答复: VC0882 uotg/sd加压问题讨论和对策"20101111_1851
1、 电流的上限阈值为6.3 问题很快复现；
2、 阈值设置为7，跑300次，目前为56次，没有出现问题
2), HanZhiMin邮件"答复: VC0882 uotg/sd加压问题讨论和对策"20101112_1819
1、 vc0882_rev0_01102705_02080900_USB2FPGA_UOTG_noCifGpuEncDec_tag20101026_1500_CIF_noDE.ace
2、 vc0882_rev0_01102713_02080900_USB2FPGA_UOTG_noCifGpuEncDec_tag20101026_1500.ace
Uotg as host使用1，uotg as device 使用2
1、   uotg dma1，dma0，fifo hs和fs的bulk和interruput  connerlenth测试通过
2、   dma0，fifo hs和fs的ISO测试通过
3、   dma1 suspend和resume wakeup测试通过

11:08 2010-11-11
招聘, ICP, 应届生招聘
LiDongLiang邮件"本周六进行应届生的笔试和面试"20101110_1441
大家知道，我们部门要招聘几个应届生
这几天我搜集了一些简历，包括上次beizhan，caijin去清华搜集的三份简历
一共有16个人左右
本周六已经约了他们来公司参加笔试和面试
组织形式类似我们上次招聘实习生的方式
跟他们约得周六早上
9:00签到
9:05开始考试，
9:50考试结束，开始阅卷，aiguo 在这个时候介绍我们组的情况，提高我们公司职位的吸引力
10:00 左右开始面试，没有面试的同事继续阅卷
12:30 预计全部面试完
我会在周六早上8:30左右到公司接待他们
除了aiguo和我之外，届时阅卷和面试还需要至少3个人 （4个人面试+ 1人阅卷）
周六早上9:50前要到公司
大家踊跃报名一下哈

11:10 2010-11-11
VC0882, arm, Cortex-A8, debug, RVI
WanShuiMing邮件"答复: 4套 RealView ICE 3.4，和一台ICE＋Trace"20101110_1108
Yinong，那就按照下面的价格和数量了（亿道第4次的价格，11.2W）？ Aiguo 也帮检查一下数量对否。
报 价 单
产品采购编号	产品描述	数量	单价	合计
RI400-KT-0177ALF	RealView ICE 4.0	4	￥17,500.00 	￥70,000.00 
BUNRT-KT-00002	RVI 4.0 / RVT2 Bundle Kit	1	￥34,800.00 	￥34,800.00 
RT200-BD-00032	RVT Dual Mictor Probe	1	￥7,200.00 	￥7,200.00 
合计：￥112,000.00 

11:20 2010-11-11
VC0882, ddr, yangxing ddr training文档位置
自yangxing邮件: 
总结好了一个DDR training PPT 在D:\VC0882\document\ddr下，请大家帮忙看一下还有什么需要补充的。

11:24 2010-11-11
时间管理
0, 10:00

1, 本日
1), 2.5h: 看邮件, 整理本周未处理邮件. 以后每周都要抽时间做这个事情. 
2), 10' yangxing VC0718 EMI进展, 见"11:35 2010-11-11".
3), 14:27-17:00 看bootloader testplan: clkrst. 见"14:27 2010-11-11".
<17:00之后有个电话耽误了一点时间>
4), 10' 给fenghai发邮件, 改进pmu fast wakeup case, 见"14:27 2010-11-11"7. <DONE, 11月12日fenghai已回复邮件, 会增加case>
5), 总结: 今天效率还可以, 75%的时间都有记录. 后面要继续努力. 

11:33 2010-11-11
项目, VC0882, AE, android, AE issue system
1, issuetracking@vimicro.com"Your Redmine account activation"20101111_1129
Your account information:
Login: zhangjian 
Password: vimicro 
Sign in: http://10.0.12.160/login
2, bamvor: 这个账号是zhaoyuan向zhumeng申请的. 
3, 使用说明见ZhuMeng邮件"答复: Redmine 账号"20101111_1433
好的.  已经为诸位在 Redmine 注册了账号.  Redmine 是一款基于web的项目管理工具, 我们选用它来帮助 882 Android Mobile Platform 的开发管理.
1. 请收藏地址  http://10.0.12.160/, 点击Signin, 各位的账户名同 Email@ 前的名称, 初始密码为 vimicro 如下图所示. 
2. 使用前, 请确保将 10.0.12.160 加入IE局域网代理设置例外列表中. 并且在登陆后在 My account 中将语言设置为简体中文.
3. Redmine 刚刚上线, 使用中大家如果发现任何问题or有新的需要, 请不吝和我联系. 谢谢大家的使用和建议!
4, (15:51 2010-11-15)android pad redmine主页: 
http://10.0.12.160/login?back_url=http%3A%2F%2F10.0.12.160%2Fprojects%2Fandroid-pad

11:35 2010-11-11
VC0718, EMI, bootloader, yanxing
1, 目前进展
1), 718 emi bootloader设置tick=10ms, 多数也没法boot, 设为1s可以正常boot. 需要继续查为什么不行. 
2), 之前sd load没有正确boot的原因是PMU寄存器不同. 718和882 pmu寄存器有变化.  

14:27 2010-11-11
VC0882, bootloader, testplan, clkrst, pmu fast wakeup, sd boot, usb boot
1, 我自己的问题. usb时钟在512info中其实没有开放配置. 所以bypassctrl里面的17-19三个bit只能设为bypass, 这样做是希望strappin切频和512info切频的bypass bit完全一致, 便于代码复用. 但上次提出需要zhaoyan测试512info切频时usb切频这个case没法测试. 
2, 根据ChangYuBao仿真usb问题, 检查clkrst所有clock配置顺序. 未发现其它问题(已经经过huangwei确认).
3, 检查sd, usb boot中clock. 
1), 和ChangYuBao, YangLei确认了usb, sd boot配置有无问题.
usb 96M和48M都测试了. 
sd boot的xclk四个情况(对应4*2种sd时钟)没有测试.
还有nfc. 和dongliang讨论后发信, meiping已经测试了. 
4, 看zhaoyan testplan. 
1), CLK Configured By 512infor里面case是全的, 只是里面有很多X(表示非本case的测试项), 我感觉还是需要zhaoyan写出来, 不论是bypass还是什么都明确写出来.
2), ddr sync情况只测试了一种, 其余9中都是异步. 同步模式以后会不会用? 只测试一个cae少不少? 
5, pmu: fenghai新加入的case是zhaoyan老的case. zhaoyan新case没有加入. 例如ddr使用pll2的case. 
6, 最后看上次review提出的问题, 都已经加入.
7, 给dongliang邮件后, fenghai问题需要请fenghai仿真, 回复上次fenghai发的邮件:
pmu fast wakeup里面的case感觉没有zhaoyan 512info测试的case好. 希望能参考zhaoyan当前的512info case做测试. 例如需要增加ddr放在pll2上的case, ddr和bus异步模式的测试需要多测一些.

15:20 2010-11-11
VC0882, Linux, 加压测试, bash脚本, 整数比较
1, 为了加入成功和错误此时, xiaotao修改脚本, 遇到问题. 
xiaotao的写法是
declare -i err=0
diff a b  &>/dev/null ||    { err++; }
等于是把times++作为bash的语句执行, 但是结果不对. man bash, 可以看到bash支持"++". 
难道是不能当成bash的语句执行? 于是在if中实验, 发现果然如此(还是觉得有点奇怪, 安排说不应该这样). 
if语句中判断"$?"的写法参考了"11:46 2008-01-09"和"12:03 2008-9-18"两篇日志.

2, 最后确认是语法问题: 
#这时在pc Linux上调试通过的脚本, 在板子上if的写法可能需要微调: 
#第一次a,b相同, 第二次开始a,b不同
touch a
touch b
declare -i times=0 err=0
for (( times=0; times<5; times++ )); do
{
  diff a b  &> /dev/null
#  echo $? #如果echo, 就会造成"$?"结果变为0, 也就是正确. 
  if [ $? != 0 ]; then
    echo "diff"
    err=err+1
  else
    echo "same"
  fi
  echo "jpeg" ${times} ${err};
  sleep 1;
  rm a &> /dev/null;
}
done

3, 板子上的sh不支持declare, 改为"(())"形式
touch a
touch b
times=0
((err=0))
for (( times=0; times<5; times++ )); do
{
  diff a b  &> /dev/null # || err=err+1; echo diff
#  echo $?
  if [ $? != 0 ]; then
    echo "diff"
    ((err=err+1))
  else
    echo "same"
  fi
  echo "jpeg" ${times} ${err};
  sleep 1;
  rm a &> /dev/null;
}
done

4, xiaotao说应该用"应该用 let err+=1;".

10:46 2010-11-12
时间管理
0, 10:40

1, 本日
1), 10' 关注Linux压力测试. 
2), 30' 用户空间进程间通信机制. 见"10:57 2010-11-12". 这个虽然也需要看, 但是毕竟是用户空间, 只能是了解, 目前还是以kernel为主. 
3), 30' 邮件, 关注业内动态. 
4), Linux压力测试, 必要文件需要上传CVS, 这个我没有考虑到. 下午找fandong. 
5), 2h, 加油: arm SMP文档, Linux kernel同步机制. 见"12:44 2010-11-12", "15:04 2010-11-12".
被6)打断. 
6), 15' 支持zhaoyan bootloader 仿真. lpddr没有时钟. 见"16:18 2010-11-12".
7), 帮助wenlei调试gpu模块加载问题. 见"18:25 2010-11-12". 

10:57 2010-11-12
Linux, 用户空间, 进程间通信, 
1, Linux中进程间通信: 
1), 信号: 至少有32个信号, 每个进程都可以重载自己的信号处理函数. 
自: http://www.ibm.com/developerworks/cn/linux/l-ipc/part2/index1.html
非实时信号都不支持排队，都是不可靠信号；实时信号都支持排队，都是可靠信号。
随着时间的发展，实践证明了有必要对信号的原始机制加以改进和扩充。所以，后来出现的各种Unix版本分别在这方面进行了研究，力图实现"可靠信号"。由于原来定义的信号已有许多应用，不好再做改动，最终只好又新增加了一些信号，并在一开始就把它们定义为可靠信号，这些信号支持排队，不会丢失。同时，信号的发送和安装也出现了新版本：信号发送函数sigqueue()及信号安装函数sigaction()。POSIX.4对可靠信号机制做了标准化。但是，POSIX只对可靠信号机制应具有的功能以及信号机制的对外接口做了标准化，对信号机制的实现没有作具体的规定。
信号值位于SIGRTMIN和SIGRTMAX之间的信号都是可靠信号，可靠信号克服了信号可能丢失的问题。Linux在支持新版本的信号安装函数sigation（）以及信号发送函数sigqueue()的同时，仍然支持早期的signal（）信号安装函数，支持信号发送函数kill()。
注：不要有这样的误解：由sigqueue()发送、sigaction安装的信号就是可靠的。事实上，可靠信号是指后来添加的新信号（信号值位于SIGRTMIN及SIGRTMAX之间）；不可靠信号是信号值小于SIGRTMIN的信号。信号的可靠与不可靠只与信号值有关，与信号的发送及安装函数无关。目前linux中的signal()是通过sigation()函数实现的，因此，即使通过signal（）安装的信号，在信号处理函数的结尾也不必再调用一次信号安装函数。同时，由signal()安装的实时信号支持排队，同样不会丢失。
2), 管道和命名管道.
3), 消息队列; 
4), 共享内存;
5), 信号量;
6), 套接字;

12:44 2010-11-12
arm, SMP, Linux, sync, memory barrier
这次又完整的看了一下上次arm SMP ppt, 感觉扩展了知识. 发现自己原本对很多问题不清楚, 例如kernel中的同步机制. 这些需要长期积累. 
1, 产品
RIM BlackBerry PlayBook
Dual-core Cortex-A9 MPCore
SMP BlackBerry Tablet OS
QNX Neutrino ukernel
2, Cortex-A15
Implements:
•ARM Architecture v7
•Multiprocessing Extensions
•Security Extensions
•Virtualization Extensions
•Large Physical Address ExtentionsAvailable 4Q10

Out-of-order, multi-issue superscalar pipeline
3.5 DMIPS/MHz
Hardware support for virtualization
Large Physical Addressing
40-bit, 1 TB physical addressing
AMBA 4 system coherency
ECC and parity protection on L1/L2
Integrated L2 cache with SCU

3, SMP memory system
1, A memory system optimized for MP
In a MESI compliant SMP system, every cache line is marked with one of the four following states:
MODIFIED -Coherent cache line is not up to date with main memory
EXCLUSIVE -Up to date and no other copies exist
SHARED -Coherent cache line which is up to date with main memory
INVALID -This coherent cache line is not present in the cache

2), ARM MPCore processors implement optimizations to the MESI protocol
(1), DUPLICATED TAG RAMs
Stored in Snoop Control Unit for quicker access
Process of checking if requested data is in other CPU's caches is performed without accessing them
(2), DIRECT DATA INTERVENTION
(cache-2-cache transfer)
Copy clean data from one CPU cache to another
(3), MIGRATORY LINES
Move dirty data from one CPU to another and skip MESI shared state
Avoids writing to L2/L3 and reading the data back from external memory

4, Approaches in adapting a UP kernel to exploit a multi-core SMP system:
Master-Slave SMP kernel model
Giant-Lock SMP kernel model
Fine grained locking SMP kernel model

5, What is the best kernel version for SMP?
Latest version is not necessary the best fit
Today 2.6.28 is a very stable kernel on ARM (feedback from the lab)
(... but 2.6.33 includes full support for A9 MPCore...)
(... and 2.6.35 includes the performance monitoring profiling work...)
Future versions include Linaroefforts
A: It also depends on your specific requirements...
Integration in mainline of some ARM-related critical features:
2.6.34: Write for ownership for v6 DMA cache operations
2.6.31: Support for OMAP4 and PBX-A9
2.6.29: Support for A9/EB
2.6.25: NEON support, Group Scheduling
2.6.22: v7 support & CFS (from O(1)to O(log(n)))
2.6.18: SMPnice
2.6.15: SMP support for ARM11 MPCore

6, 设置中断在哪个中断: 
int irq_set_affinity(unsigned int irq, const struct cpumask *m);

7, Dynamic and static power are both importantSource
特征线宽越小, 静态功耗越大. 在65nm, 静态功耗已经超过动态功耗. 

8, Core Power Control and Power Domains
1), Quad-core Cortex-A9 MPCoreallows for up to 14 power domains:
  4 power domains for core logic cells
  4 power domains for Compute Engine Unit
  4 power domains for caches and TLB RAMs
  1 power domain for SCU duplicated TAG RAMs
  1 power domain for remaining logic: SCU logic cells, peripherals
Place holders for level-shifters and clamps are inserted around the Cortex-A9 processor to easethe implementation of different power domains
2), bamvor: 这里的clamp是啥意思? 
芯片IO上面的clamp是指ESD的反向二极管. 
Huangwei: 
从power down 的 domain到 power on的 domain都需要加 clamp,目的是防止漏电.

9, Linux power管理
1), Linux provides many mechanisms for managing power
(1), Clean interface for hot-plugging CPUs from SMP cluster
(2), Optimized scheduler for SMP: performs load-balancing, task prioritization, task consolidation (scheduler tunables), intelligent scheduling (limiting migration/cache trashing)
(3), CPU Frequency framework (to drive DVFS)
(4), cpuidle framework (to manage low-power states)
(5), Many user level apps are available to manage interrupts/tasks distribution
2), SMP Linux hotplugsupport allows to dynamically remove Cortex-A9 MPCoreCPUs from kernel scheduler
Support from Kernel v2.6.15
See ./arch/arm/mach-realview/hotplug.c

10, Android Power Management
1), The Android Framework exposes power management to services and applications through the PowerManagerclass
2), The PowerManagerclass gives control over the power state of the device
Use newWakeLock()to create a powerManager.WakeLock object
3), code examples:
From: android.com
PowerManagerpm = (PowerManager) mContext.getSystemService( Context.POWER_SERVICE);
PowerManager.WakeLockwl= pm.newWakeLock( PowerManager.SCREEN_BRIGHT_WAKE_LOCK| PowerManager.ACQUIRE_CAUSES_WAKEUP| PowerManager.ON_AFTER_RELEASE,“Example Tag”);
wl.acquire();
// The screen will stay on
// during this section
// (and come on if it is off)wl.release();
// The screen will stay on a little longer

11, Migrating UP applications and device driver software to SMP
Terminology
Multitasking: The ability to run several tasks at the same time
Thread:Portion of a program that can run independently of and concurrently with other portions of the program
Critical section: Section of code that can be executed by one CPU at the time
Mutual Exclusion: Mechanism used to protect a critical section
Race condition: Violation of Mutual Exclusion by two concurrent tasks
Thread-safe:A code sequence that functions correctly during simultaneous execution by multiple threads

12, Spinlocks (kernel)
Busy-wait mechanism to enforce mutual exclusion on multi-core systems
It is a binary mechanism (lock/unlock). It is very quick.
Not suitable when holding lock for long time –spinlocks do not sleep
Energy efficient implementation for ARM architecture, \todo 查, 跟了半天, 没看出个所以然. 
If the protected resource can be accessed from an ISR, use the *_irq* variants
Not recursive: acquiring the same lock twice causes dead-lock

13, Use semaphores for synchronization between processes
There's also APIs for killable/interruptable/timeout/try
Semaphores can sleep: Cannot be used in interrupt handlers
They are relatively slow
Not recursive: acquiring the same lock twice causes dead-lock
In reality should usedown_interruptible(), sincedown()will not return if a signal is received

14, Multiple-reader locking
1), Read/write semaphores
Same semantics as conventional semaphores, allow multiple readers
2), Read/write spinlocks
Same semantics as conventional spinlocks, allow multiple readers
3), Read-Copy-Update (RCU)
Specialist synchronization mechanism for when readers >> writers
Example: Shared access of networking routing tables: every outgoing packet (process) needs to read the routing table. Once the read is completed the entry can be removed. The removal can be deferred. The reading can be done without locking
4), Seqlocks
Fast, lockless, suitable when the critical region is very small
Example: A global variable is regularly updated with system time or event counters, and many threads regularly sample this information

15, Thread safety and re-entrancy
1), Re-entrant function
All data provided by the caller:
Function does not hold static (global) data over successive calls
Function does not return a pointer to static data
Does not call non-re-entrant functions
2), Thread safe function
Protects shared data with locks
3), strtok() andctime() are not re-entrant
strtok() holds the string to be broken into tokens
ctime()returns a pointer to static data that is overwritten by each call

16, Set scheduling policy for a process
1), Solution 1: Use task affinity
Setting task affinity to a specific CPU and specifying SCHED_FIFO for that process will ensure that implicit execution order of legacy code on SMP systems is maintained.
2), Solution 2: Use explicit synchronization
Which one is best? It depends.
(1), Completions
One-shot flag to say “things may now proceed”.
Allow the waiting task to sleep until it is signalled.
Originally created to address a subtle race condition internal to the semaphore implementation.
Completions are a lightweight mechanism.
(2), Semaphores
Counting locking mechanism (can handle multiplelockers) .
Designed for protection of critical sections (shared resources).
Good when there is no particular latency requirement(they aresleeping locks).
Semaphoresare optimized for the case where they are available. Significant contention on semaphores damages performance.
(3), Spinlocks
Binary locking mechanism designed for protection of critical sections. It implements a busy-wait loop (does not go to sleep).
Implementation on ARM is energy-efficient (clock gating).
It's binary therefore work only for two tasks.
Disables preemption. Option for disablinginterrupts.
(4), Others
It depends on the application. May be suitable/ideal in some cases.
Message passing, POSIX message queues, Real-time signals, Pipes, Sockets, Shared memory regions... In general, higher overhead.

17, Linux kernel device barriers
1), Compiler barrier: barrier() vs MMIO write barrier: mmiowb()

18, Linux kernel CPU Memory barriers: mb(), smp_mb()...
They also imply a compiler barrier

19, Summary of SMP considerations
PROBLEM SOLUTION
1), Avoid corruption of shared resources by concurrent writers
Use locking mechanism: kernel locks for OS/drivers, threading library API for apps
2), Synchronisation overhead
Increase/Decrease level of parallelisation granularity
3), Tasks migration
Use affinity manually (a good OS would intelligently schedule tasks)
4), Resources contention
Good S/W and OS scheduler design; use yield()
5), False sharing
Align data to cache line size (compiler can do this). Place volatile data in different cache lines
Affinitize data to specific core (if OS supported)
6), Routines used by more agents
Use/Implement thread/safe and re-entrant versions
7), Cache lines follow migrating tasks (Ping Pong effect)
Affinitize tasks to specific CPU
8), Unbalanced cache requirements: some tasks require larger cache than others
Affinitizethose tasks to a specific CPU

15:04 2010-11-12
Linux, 学习, kernel同步机制, \todo 查ELDD. 
1, spinlock
spinlock.h (include\linux)
2, 分析spinlock代码
1), irqsave
#define raw_local_irq_save(x)					\
	({							\
	__asm__ __volatile__(					\
	"mrs	%0, cpsr		@ local_irq_save\n"	\
	"cpsid	i"						\
	: "=r" (x) : : "memory", "cc");				\
	})
这里cps是: Change Processor State is available only in privileged modes. It changes one or more of the A, I, and F interrupt disable bits and the mode bits of the CPSR, without changing the other CPSR bits.
"id"表示interrupt disable, 还可以用ie表示interrupt enable; "i"表示irq, 还可以是"a"(async data abort), "f"(fiq).

15:18 2010-11-12
VC0882, VC0718, 人员安排, 
1, Aiguo邮件"718和882人员安排"20101112_1459
Hi，all
就目前的人力资源，我们有能力把718和882的人员分开，下面是我们上次882和718工程师分配：
882项目：
Fengbeizhan，lidongliang，zhangjian，liaozhicheng，shuyu，wangwenli，mengfandong，yangxing
总共是8个人    
718项目：
Lingming，caijin，yingxingjie，fenglijun，xiekeyang，bianyingfeng，qiaowei，xuxiang，qiqingchao，yangmin，lvboxue，fanxiaofan，liuxiaotao，yuyang
总共是14个人
718项目其他team参与：
Dukun，maguojun
Share：
Anzhiming，wangzhengwei，暂时还是以718为主，后期根据招人情况来调整吧。
目前718有三个模块缺人，
1）   一个是GE，就目前来看boxue可以去做GE；
2）   一个是bootloader，这个和882类似，但需要一个人lead，从目前人员来看，希望把xiaotao和zhicheng在项目中调换，这样zhicheng可以承担718 bootloader，xiaotao回到882项目，这样也便于管理
3）   PCI－E Endpoint，这个指望上海team可能有点问题，我们暂时空缺吧
从目前看来，人员还是紧张，看来还需要抓紧时间招到2－3个人，这样我们team的日子会好过一点。
大家先发表一下自己的建议和意见，如果有必要，我们再开会讨论。
2, Fengbeizhan: 
Zhicheng已经做过多个项目的bootloader 了，如果还让zhicheng再做bootloader，zhicheng会不会烦呢？ 不过除了zhicheng，目前好像也没有合适的人了。
3, lingming:
718的bootloader，功能不多（估计半个人就好了），但是要比较细，718上主要是clkrst，pmu。  应该可以兼顾Linux和bootloader。让zhicheng带着wangzhengwei, mengfandong,anzhiming做好了。
4, aiguo:
其他模块都不需要改什么，有可能不支持sd boot，这样主要是clk和pmu，ddr的东东，zhicheng还要负责现在xiaotao负责的事情，718 linux porting的事情和一些支持,usb qiaowei搞定就可以了。
5, Lingming:
对呀。反正现在liuxiaotao也一直在搞882的加压，还不如882linux他负责好了。不过他还要帮忙EMAC，以及PCI-E的linux。
718的linux环境和882的linux环境，互换一下人员就好，其它不变。
6, Aiguo
人员还是希望分开，Emac是一个短期支持，PCI-E的linux我们再说吧，882要把xiaotao的工作安排上去。
7, LiDongLiang
原本计划跟zhicheng 一起做android 
既然zhicheng 与 xiaotao 换了
那就我和xiaotao 做android ，希望2个月的时间能对android 有个比较深入的认识
这样也便于我管理

16:18 2010-11-12
VC0882, bootloader, clkrst, ddr switch, 512info
1, 支持zhaoyan bootloader 仿真. lpddr没有时钟. 
CFG7的512infor配置（这个已经boot起来，打印hello world）
clkBypassCtrl  == 32'h0fffffcb;      
clkBusClkCfg   == 32'H01010162;   //Pll2, aclk 333M
clkDdrcClkCfg  == 32'h00000102;   //Pll2, 333M, Async ddr2, phy_dll on
clkDdrcPllCfg  == 32'h02990019;
clkConfDelay   == 0;
CFG8的512infor配置（ddrc_mclk没有）
clkBypassCtrl  == 32'h0fffffcb;      
clkBusClkCfg   == 32'H01010162;   //Pll2, aclk 200M
clkDdrcClkCfg  == 32'h00010302;   //Pll2, 50M, Async lpddr, phy_dll bypass
clkDdrcPllCfg  == 32'h018f0019;
clkConfDelay   == 0;
请帮我看看，谢谢
2, bamvor: 开始看到pll配置"h018f0019", 以为里面的0x19+1=0x20, 实际是0x1a, 晕了. 

18:25 2010-11-12
VC0882, Linux, graphic, GPU, vivante
1, Wangwenlei邮件"答复: vdec, gpu加压测试进展如何?"20101112_1521
我在加载模块的时候总会报如下错误：
kernel35下：
galcore: relocation out of range, section 2 reloc 10 sym 'printk'
insmod: can't insert '/usr/nfs/galcore.ko': invalid module format
kernel29下：
galcore: unknown relocation: 43
insmod: can't insert '/tmp/galcore.ko': invalid module format
编译步骤：先编译内核，在编译vivante sdk。
文件系统都是10.0.13.198:/share/zhangjian/development/filesystem/root_fs/目录下的。
2, 本来以为是编译顺序问题, 后来发现顺序没有没有问题. 
1), 单步调试发现是init_module()->load_module()->apply_relocate()(arch/arm/kernel/module.c)里面出错. 
switch (ELF32_R_TYPE(rel->r_info)) {
走到了default分支:
default:
    printk(KERN_ERR "%s: unknown relocation: %u\n",
           module->name, ELF32_R_TYPE(rel->r_info));
    return -ENOEXEC;
2), 分析: 这次除了"invalid module format", 还多了"unknown relocation". 可以查一下后者可能是什么原因引起的. 
正常不会走到default分支, 因为都是同一个编译器编译的. 不可能写入错误的relocate. 
难道是编译器根本不是arm? 看linux_build.log和用file查看, 都没问题: 
[zhangjian@icp-desktop driver]$ file galcore.ko 
galcore.ko: ELF 32-bit LSB relocatable, ARM, version 1 (SYSV), not stripped
[zhangjian@icp-desktop driver]$ file ../../../../kernel/linux-2.6.29/crypto/ecb.ko 
../../../../kernel/linux-2.6.29/crypto/ecb.ko: ELF 32-bit LSB relocatable, ARM, version 1 (SYSV), not stripped

9:49 2010-11-15
VC0882, android, AE, u-boot
1, u-boot默认打开了debug信息, 在config.mk: 
DBGFLAGS= -g # -DDEBUG
CPPFLAGS := $(DBGFLAGS) $(OPTFLAGS) $(RELFLAGS)         \
        -D__KERNEL__
AFLAGS := $(AFLAGS_DEBUG) -D__ASSEMBLY__ $(CPPFLAGS)
2, u-boot默认是"-Os", 同样定义在config.mk. 
tips: 可以用如下命令搜索优化选项: 
grep "\-O[0-9a-z]" * 
gcc的优化选项有-O0, -O(-O1), -O2, -O3, -Os.
详见gcc手册: 3.10 Options That Control Optimization.
-O0 Reduce compilation time and make debugging produce the expected results.
This is the default.
-Os Optimize for size. ‘-Os’ enables all ‘-O2’ optimizations that do not typically increase code size. It also performs further optimizations designed to reduce code size.
armcc优化选项有: -O0, -O1, -O2, -O3, -Ospace, -Otime. 
文档没提到-Ospace和哪个-Onum有关. 

10:11 2010-11-15
时间管理
0, 9:40

1, 本日
1), 10' 支持fandong u-boot, 见"9:49 2010-11-15".
2), 10' 支持anzhiming VC0718 bootloader调试. 
3), 20' VC0882 bootloader nfc div配置问题. 见"10:17 2010-11-15"
4), 看邮件. 
5), 1h: VC0882 Linux例会, 见"15:20 2010-11-15".
6), 10' bootloader clkrst问题: emi clksrc没有mask, 所以没法返回正确的pll. 
7), 70' 改进日志脚本, 见"17:16 2010-11-15". 

10:17 2010-11-15
VC0882, bootloader, nfc div配置问题
1, GeMeiPing邮件"NFC bootloader fail"20101113_1920
在仿真nand bootloader的时候发现有一类case fail，nand 16bit，xclk输入不进行PLL切频，NFC采用12MHz时钟。
在这个条件下，nfc_mclk直接采用了xclk（可以是26M、13M、12M、24M），而nfc_out_clk采用xclk/2。这个时候nfc_mclk与nfc_out_clk的上升沿不能保证对齐，NFC读到的数据出错。
这个问题我以前跑NFC模块的case时就发现了，当时huangwei的意见是nfc_ndiv不能配置为0，否则nfc_mclk与nfc_out_clk的上升沿不能保证对齐。后来跑case都是把nfc_ndiv约束为大于0的值。
但在在bootloader中，如果采用xclk bypass的方案，并且NFC采用高时钟12M时，就会出现这个问题。
另外在实际应用中如果处理不当（比如PLL配成96MHz，nfc_mclk 96M, nfc_out_48M,此时nfc_ndiv配置成0），也会产生这个问题。不知道软件方面应该如何规避这个问题？

2, DongLiang邮件"答复: NFC bootloader fail"20101115_1009
谢谢meiping
这种case仅出现在nfc_mclk 使用xclk，nandflash 16bit 情况
目前软件上有两种选择
1．   不直接用xclk，nfc_mclk做1/2分频，nfc_out_clk 做1/4分频，这需要修改代码，重新验证
2．   在该情况下，使用strap pin选择低频方案，不用修改代码，只需在strap pin选择即可
跟meiping 讨论过了
我们决定在该case情况下，不使用xclk 做nfc_mclk
理由如下：
1．   如果我们的芯片切频没有问题，是不会使用xclk做nfc module 的，这是一个备用方案。当nfc mclk 使用从PLL 出来的时钟时没有该问题
2．   如果切频有问题，仍然可以使用2M 的nfc module 时钟方案，Nandflash boot 的获取512 infor阶段数据量很小(只有512 字节)，在得到512infor 后会重新配置nfc及其时钟，后续的读镜像过程会很快
现在时间有限，且修改的意义不大
所以，我们在nand 16bit，xclk输入情况下，不使用xclk 做nfc mclk
而是采用低频（2M）的时钟方案
我会把该项说明补充到bootloader spec 中

3, nfc_div不能是0, 这个没有在mas找到, 给huangwei发信:
Zhangjian2Huangwei邮件: 
“nfc_ndiv不能配置为0”, 在文档里面有写明么? 我在register table和software guideline都没有找到. 
除了nfc_ndiv, 还没有其他模块div存在取指范围的限制? 

4, LiDongLiang邮件"882 bootloader 中各模块时钟方案的检查与文档补充"20101115_1038
近期在模块时钟配置上发现了几个问题，usb 时钟，nandflash时钟
为了消除隐患，这里要求大家
1．对各自负责的模块的时钟方案做详细的检查，包括
a) 获取512 infor前时钟
b) 获取512infor 后，读image前 时钟变化
c) 读image 后时钟
d) 每个阶段可能的模块时钟配置
2．补充模块的时钟方案到bootloader spec V0.4 中。每个模块都要有单独一小节来描述模块的时钟方案，将自己的检查结果补充上去，务求详细
模块时钟负责人如下
Cpu/bus:          zhangjian
PADC：             zhangjian
UART：             zhangjian
ROM/SRAM：   zhangjian
PMU：               wangzhengwei
DDR：               wangzhengwei
SD：                  anzhiming
USB：                mengfandong
EFUSE：           yangxing
TIMER：            lidongliang
Nandflash：     lidongliang

12:33 2010-11-15
VC0882, Linux, 进展
1, 11月15日
yangmin周末测试, vdec和sd都死了. 

15:20 2010-11-15
VC0882, 例会, Linux, meeting minutes
1, meeting minutes
1), wenlei, 重点放在驱动. 
gpu压力测试, 目前gpu驱动加载出错. 
7882. 
peixin分配的gpu工作. 

2), fandong:
u-boot uotg host ethernet.
uotg 压力测试. 

3), shuyu:
framebuffer驱动改进 for 压力测试<DONE>
Android: opencore, surface finger.

4), xiaotao: 
中断分析尽快完成. 
压力测试debug, zhicheng和xiaotao一起做; 
android环境搭建. 
718: anzhiming的rtp需要支持. 
VC0882 Linux网卡连接hub不稳定. 

5), yangmin: 
vdec压力测试: vdec和sd有问题. 

6), dongliang: 
前段时间改进和调试sd驱动. 
发android sdk资料. 
bootloader收尾. 

7), zhangjian: 
压力测试. 
AE android.

2, 其它(未发邮件)
0), 感觉开会像梦游一样, 主持的不好. 下次一定提前做准备. 
1), 问zhaoyuan现在能否连接hub.
2), SV等芯片回来1个月之前准备, audio(新的codec), clock代码比较多. 

17:16 2010-11-15
工具, logAssistant
1, content内的keyword也区分大小写, 且默认不区分. 
2, 加入默认搜索vimc段内和vimc android(AE)段内的快捷键. 
3, 支持多个keyword搜索. 
4, (10:00 2010-11-16)
1), 加入-a参数, 作用时把-c的内容也在-k中搜索. 
其实这个问题没太想明白, 如果定义了-c, 还需要-k么? 感觉不太需要啊. 其实就没必要区分是否包含了. 但是现有架构没法把keyword line和content一起搜索. 
这个暂缓, 目前看不清应用. 
每次都是遇到问题才修改, 没有什么提前量:(
2), 输出到output.txt, 原有output.txt备份到output.baktime 
output.txt的路径需要使用与log相同的路径.
3), 实验在结果中搜索. 并加入快捷键. 
5, 一片混乱
看来需要重写了. 先认真想一想: 
in_section = 0
section_start = 0;
section_end = 0;
state = start
search each file
    read one line from file
    if match section start
        last_state = state
        state = section_start
        if ( state == last_state == section_start ) 
        skip all section start in the same section.
        section_start = 1
        in_section++
        if 0 == section_end 
            section_end = 1

    #output while the section end. 
    if section_end
        section_start = 1
        if ( @current_content not empty )
            print date line, keyword line and match content in screen.
            print file, @current_content 

    if section_start
        save each line in this section in var @current_content
        if ( 1 == in_section ) 
            search section key
            if section key
                if content_keywords != NULL 
                    search_content = 1
                else
                    match = 1
        if 1 == search_content
            if match content
                match = 1
        in_section++
6, (13:04 2010-11-16)没想清楚, 看来本周的基本功练习就是这个logAssistant了. 

10:00 2010-11-16
时间管理
0, 10:00

1, 本日
1), 20' 支持fandong u-boot, 见"9:49 2010-11-15"2
2), 70' logAssistant改进, 见"17:16 2010-11-15"4. 
3), bootloader 时钟方案. 见"14:03 2010-11-16".
被4), 5)打断. 
4), 给beizhan发jtag资料, 见"14:40 2010-11-16".
5), 20' 看yanglei ddrc与bus同步异步仿真邮件, 见"16:26 2010-11-16".
6), bootloader padc. 见"18:10 2010-11-16". 
7), 总结: 工作缺少规划, 不善于调动相关同事. 

14:03 2010-11-16
VC0882, bootloader, clkrst, review bootloader时钟方案
1, LiDongLiang邮件"882 bootloader 中各模块时钟方案的检查与文档补充"20101115_1038
近期在模块时钟配置上发现了几个问题，usb 时钟，nandflash时钟
为了消除隐患，这里要求大家
1．对各自负责的模块的时钟方案做详细的检查，包括
a) 获取512 infor前时钟
b) 获取512infor 后，读image前 时钟变化
c) 读image 后时钟
d) 每个阶段可能的模块时钟配置
2．   补充模块的时钟方案到bootloader spec V0.4 中。每个模块都要有单独一小节来描述模块的时钟方案，将自己的检查结果补充上去，务求详细
模块时钟负责人如下
Cpu/bus:  zhangjian
PADC:     zhangjian
UART:     zhangjian
ROM/SRAM: zhangjian
PMU:      wangzhengwei
DDR:      wangzhengwei
SD:       anzhiming
USB:      mengfandong
EFUSE:    yangxing
TIMER:    lidongliang
Nandflash: lidongliang
注: 本周二下班前完成

2, 分析我负责的各模块时钟, Cpu/bus, Padc, Uart, Rom/Sram
a) 获取512 infor前时钟
b) 获取512infor 后，读image前 时钟变化
c) 读image 后时钟
d) 每个阶段可能的模块时钟配置
见"D:\work\VC0882\bootloader\clkrst\bootloader_clkrst.xls".

14:40 2010-11-16
jtag资料
目录: \\10.0.2.36\sqmshare\Document\Jtag_Debugger\
1, ARM JTAG 调试原理.pdf
介绍arm jtag使用, 如果通过jtag访问arm寄存器, 一直到arm11, 基本都是如此. 到Cortex使用了完全不同的Corsight协议. 
2, asic_课件_test_jtag\Lecture_21.pdf
从asic角度介绍jtag. 
3, Jtag协议动画演示_需要去掉中文.rar, dos下的jtag协议演示程序, 可能和winXP兼容性不好. 

16:26 2010-11-16
VC0882, memory, ddrc与bus的同步异步模式, 续yanglei仿真结果; clkrst分析, VC0882 sv准备
1, yanglei邮件"答复: VC0882: 关于DDR 与总线的同步模式"20101116_1624
LPDDR Video conference Scenario :
要比较的3种情况:
同步模式 ddrc mclk 200MHz, bus aclk 200MHz
异步模式 ddrc mclk 200MHz, bus aclk 200MHz
异步模式 ddrc mclk 200MHz, bus aclk 166MHz
仿真结果如下，可以看出3种情况下数据的throughput基本相同，不会因为增加了异步桥而造成数据带宽的下降。
异步模式增加的异步桥会增加而外的latency, 增加值不是单纯数据过异步fifo处理的4cycle，而是比这个要高，主要原因是异步fifo有缓存request的能力，在压力大的时候这个fifo会使得在外界看ddrc能够缓存更多的request， 而我们的latency统计是在master端看已发起或者正在处理过程中的request 的等待时间，所以增加slave request缓冲能力，也就增加了统计latency.  下表给出了在仿真压力最大的32ms左右的1ms内各种参数的均值。可以看出在异步模式下确实缓存了更多的request,  average outstanding request 从8.2增加到10.5， 增加了2.3个， 一个request在ddrc内的处理时间大概是65ns， 所以R latency 增加了154ns （约30cycle），  而在bus进一步降频后latency会进一步多增加30ns（约5cycle），axi if 的时钟降低使得fifo和mclk交互有一些额外的cycle消耗, 而且此时bus上的效率接近于”满效率” （AXI读写数据通路是独立的，这个满效率只在很小的时间单位上几十cycle量级的读通道满效率或者写通道满效率）.
在master端看主要是Rlatency增加约30cycle  ， 在目前这种情况下增加的latency不会降低模块性能。GPU,VDEC等 工作fps没有变化。DE，CIF等模块也没有出现fifo溢出的错误。
仿真符合之前分析的系统性能瓶颈在ddr上，在维持性能基本不变的情况下，可以适当降低bus的频率，从而节约bus以及各个master上的axi interface上功耗。
MARB_DDRC   Sync mode   Asyncmode   Async mode
inferface               200_200     200_166
Bandwidth       1332    1336        1301
DDRC Efficiency	83%     83%         81%
Bus efficiency  83%     83%         98%
Ave outstanding 8.2     10.5        10.6
R_latency (ns)  528     682         721
W_last latency(ns) 167  230         240

2, bamvor: 从yanglei最后一个case仿真来看, bus比ddr频率低会提高bus的效率. 
考虑到bus切频比ddr切频时间短, 在场景内切频可以优先调整bus频率.
将来在SV实验时可以考虑实验如何组合axi bus, stor axi bus和ddr效率最高. 
sv回来以后, clkswtich和performance monitor可以联合在一起实验系统最适合的工作频点. 

3, yinong邮件"答复: VC0882: 关于DDR 与总线的同步模式"20101115_1639
GPU, VENC, VDEC这样的IP里，对latency是有一定的tolerance的。 他们本身就有一些类似于prefetching的功能，例如在处理macroblock n时，先fetch marco block n+1的data.
要看同步和异步的diference,  最好是跑一个CPU的case.    ARM里面现在没有做prefetching,  在data cache的hit rate比较低的application中， 所有Extra的delay都会直接转化为 performance loss.    读一个网页应该就属于这种情形。

17:12 2010-11-16
VC0882, clkrst, marb疑问
1, clkrst
1), 模块的aclk和mclk是否可以同时gate, 我理解是可以. 如果同时gate有没有需要特别注意的? 例如会不会模块和bus通信没有完成. 
2), 寄存器中有FABRIC_ACLK_CTRL, 如果gate下面的gate, PERI_SARB_ACLK_GT, STOR_SARB_ACLK_GT, VIDEO_SARB_ACLK_GT, MARB_ACLK_GT, 对应模块的寄存器还能配置么? 例如gate STOR_SARB_ACLK_GT, sd的寄存器能否配置? 特别是gate MARB_ACLK_GT后, 是否所有寄存器都没法配置了? 从"VC0882 AXI INTERCONNECT"可以看到访问寄存器也要通过marb仲裁. 
2, marb
1), 访问不存在地址的结果, 见"D:\VC1600WCVS\doc\mas\VC0882\DW_AXI\VC0882_MAS_INTERCONNECT_V0.31.doc"7.3 What Happens if Accessing Invalid Addresses
2), VC0882 marb和sarb框图, 从这里可以看出882模块连接到系统, 包括总线类型, 宽度等等. 可以作为"Visio-VC0882 Chip Block Diagram 1.0.pdf"的补充. 

位置: 
D:\VC1600WCVS\doc\mas\VC0882\DW_AXI\VC0882 AXI INTERCONNECT
"D:\VC1600WCVS\doc\arch\vc0882\Visio-VC0882 Chip Block Diagram 1.0.pdf"

18:10 2010-11-16
VC0882, bootloader, padc
1, 其实完全可以请测试同事提前帮我测试一下结果. 
2, (10:07 2010-11-17)
vc0882_rev0_01111600_02080900_USB2FPGA_UOTG_noDeCifGpuEncDec_tag20101026_1500_RAM256K_ROM256K_LPDDR_4SDIO_bootloaderbin1115Ver14_1.ace
zhangyunxia: 8446, zhangjianjun.

17:00 2010-11-17
VC0882, bootloader, padc
1, pmu wakeup, fast wakeup.
2, sd3 boot fail.
1), 烧写
\\10.0.13.101\share\zhangjian\projects\VC0882\code\20101116_bootloader\bootloader_padc_test\t1.pak
到sd.
2), 保证sd0-3都可以正常boot.
3), 用rvdebugger保存, 0x60051000..+0x1000.

17:10 2010-11-17
VC0882, 工作讨论, android, bootloader等
和dongliang讨论工作, dongliang希望最近把主要精力放在bootloader上. 
1, bootloader:
1), code review可能来不及. 
2), 重点review testplan.
2, zhaoyuan, 适当delay一些:
1), 周四上午开会. 
2), 下周要review我的arm, ddr文档. 
3, Linux加压测试: report请xiaotao帮忙做.

19:42 2010-11-17
时间管理
0, 10:00

1, 本日
1), 10:15-12:00 和测试同事一起实验bootloader strappin. 
2), 14:00-16:00 bootloader clk review.
3), 16:50-17:20 和dongliang讨论我的工作分配. 
4), 17:30-19:00 和bianrongguang讨论android linux kernel clk.
5), 总结: 对bootloader padc工作量不足, 过多时间放到logAssistant, 造成事情太紧. 
一个是工作量估计不准确, 一个是时间的安排. 

10:49 2010-11-18
VC0882, android, Linux, clk讨论
1, huanglei问: 如果模块切频时模块被gate, 此时如果模块正在给memory搬数, 会不会造成总线也被挂住? 和huangwei发邮件讨论, huangwei说如果模块对时钟不敏感, 其实没必要gate. 模块和总线之间是异步, 不会影响总线. 另外axi本身允许多通道, 即使一个模块发送慢一些, 也不影响其它模块.
2, 找zhaoyuan说明把我的文档review delay一周. 

14:38 2010-11-18
时间管理
0, 9:35

1, 本日
1), 10:00-11:40 AE android, bianrongguang介绍Linux clk管理. 见"10:49 2010-11-18".
同时android clkrst疑问发信. "18:25 2010-11-10".
2), 20' 和huangwei讨论clkswitch对模块和总线的影响. 见"10:49 2010-11-18"1.
3), 30' bootloader clkrst文档整理, 见bootloader v0.41.
4), bootloader padc. 未完成。
5), 总结: 还是效率问题，或者是自己休息的不好。本来计划下午完成bootloader padc，结果自己有一些其它事情，直接做padc的时间也就不到一小时。

16:22 2010-11-18
VC0882, bootloader, padc
1, sd0 boot
0x60051014: 0x2018f0f0->0x203cf0f0  #GPIO_A_INPUT_VALUE, input value忽略.
0x60051164: 0x00000000->0x0000001b  #SYS_HARD_SRC_VALUE
0x60051300: 0x0fffffff->0x0ffffff3  #GPIO_C_CFG
0x60051304: 0x0fffdd7c->0x0ffffffc  #GPIO_C_OUTPUT_VALUE
0x60051600: 0x00000000->0x1fffffff  #GPIO_F_CFG
0x60051620: 0x00000000->0x003fffff  #GPIO_G_CFG
0x60051914: 0x001c5000->0x00100000  #GPIO_H_INPUT_VALUE
0x60051934: 0x00000002->0x0000d06c  #GPIO_I_INPUT_VALUE
0x60051a00: 0x00000002->0x0000d06c  #STRAP_PIN
0x60051c20: 0xffffffc0->0xffffffff  #GPIO_K_CFG
0x60051c30: 0xeffeef2f->0xeffeef3f  #GPIO_K_DRAIN_MODE
0x60051ffc: 0x00000000->0x02030921  #CODE_VERSION1

17:29 2010-11-18
Linux, shell, lsof, 查看谁在访问文件
Lsof  revision 4.81 lists on its standard output file information about files opened by processes for the following UNIX dialects.

19:10 2010-11-22
时间管理
0, 9:36-19:25

1, 本日
1), arm年会.
2), 20' 和xiaotao讨论Linux. 发现中断处理原来有些地方理解不确切. 见"19:14 2010-11-22". 
3), 整理时间管理

19:14 2010-11-22
VC0882, VC0718, xiaotao讨论Linux, 发现中断处理原来有些地方理解不确切
其实进入irq_handler以后会用循环处理所有中断, 这和xiaotao的中断时间分析数据一致. 原来suxin代码里面"and "其实是为了给后面的几个xxxne处理. 详见xiaotao中断分析邮件. 
现在的问题是中断处理中从irq到svc状态是否中断打开了, 如果中断打开了, 什么时候关闭的中断? 从现在情况看, irq_hander里面中断是关闭的. 

19:19 2010-11-22
VC0882, bootloader, 测试问题; \todo 总结, 文档
1, Kongyingqi邮件"答复: 882bootloader的仿真与测试"20101119_1054
最近主要发现了3个bug：
1. changyubao发现的UOTG_MCLK GATE的问题，“只有先使能了MCLK_DIV，才可能取消UOTG_MCLK的gate”，寄存器配置是有顺序的。
2. zhaoyan发现的MEM_MCLK_CFG的判定问题，应该是取寄存器低2位，原代码直接对整个寄存器值进行了判定。
3.   zhaoyan发现的通过Uart打印时，在改变波特率前后有些log被打印成乱码，主要是由于软件在disable uart并改变了uart bcr时未检测status寄存器，不能确保数据发送完毕。
目前这3个问题在新的版本中都有解决，具体情况还在测试中。

19:22 2010-11-22
VC0882, android
1, aiguo邮件"答复: 如何构建android文件系统 -- 个人见解"20101119_1722
Xiaotao，
总结的不错，我接下来也研究一下，android kernel和普通的linux kernel有什么区别，我们单独运行android kernel，不起android系统，这样我们可以先看看android kernel和linux kernel的区别，单独测试android kernel下的bsp，一旦bsp搞定了，再加上android，这样再看android是怎么样调用我们driver的。
2, liuxiaotao邮件"答复: 如何构建android文件系统 -- 个人见解"20101119_1737
android kernel和普通的linux kernel   在调试bsp这一块是没有任何区别的。 
以前我做过android上的蓝牙usb设备驱，驱动开发流程，一样。
3, zhangjian回复liuxiaotao邮件. 
从我之前看的情况, android kernel和公版kernel相比kernel和bsp都是有差异的. 感觉分为以下三种情况: 
1), android和公版kernel使用相同的子系统, 需要确认实现细节或用法是否相同, 相关驱动是否相同. 例如android里面支持硬件overlay, 这个需要单独的driver. 在这种情况下, android framebuffer只需要实现一个framebuffer设备. 不像传统用法那样每个层一个framebuffer设备. 另外android framebuffer系统本身虽然和公版一样, 但是framebuffer支持android自定义的乒乓buffer(alloc 2xframebuffer, 通过pan display切换两个buffer).
2), android和公版kernel 架构不同. 也许相同功能但是和公版kernel不同. 这种情况我不了解, 感觉应该有. 
3), android kernel加入了为支持android机制的code. 
例如
Android IPC 系统: Binder (binder.c)
Android 日志系统: Logger (logger.c)
Android 电源管理: Power (power.c)
Android 闹钟管理: Alarm (alarm.c)
Android 内存控制台: Ram_console (ram_console.c)
Android 时钟控制的gpio: Timed_gpio (timed_gpio.c)

另外kernel方面, 之前我看到介绍说kernel主线不像原来会接受android代码, 而且结合android git信息, 发现android会单独维护一个kernel分支, 定期把公版kernel merge到android. 如果我们做android, 看来也需要像原来跟踪公版kernel那样跟踪android kernel的变化.

参考: 
1, "\\10.0.2.36\sqmshare\Document\Linux\android\overview\android_张健.ppt"
2, 分析android fb乒乓buffer机制.
"\\10.0.2.36\sqmshare\Document\Linux\android\kernel\driver\Patch Framebuffer Driver of PrimeCell Color LCD Controller with Double-Buffering to Support Android’s Page-Flipping.txt"

10:10 2010-11-23
时间管理
0, 9:45

1, 本日
1), 60' 邮件, 新闻. 
2), 2h' BianRongGuang讨论clkrst. 见"10:39 2010-11-23". 
3), 20' bootloader bcr微调, "14:48 2010-11-23".
4), 30' 整理昨日会议. 见"10:32 2010-11-23"

10:32 2010-11-23
会议, arm年会
这次参加arm年会感觉收获不小, 像Linaro提供优化的arm Linux, 将来可以考虑在Linaro上面做工作. 像DS-5提供的方便arm Linux调试. 
1, linaro: 强烈关注。
Linaro是arm联合TI, 三星等公司成立的非营利性公司. 目的是提供针对Cortex-A系列提供优化的嵌入式软件. 支持包括Samsung orion, OMAP4等硬件. 软件包括gcc, gdb, u-boot, kernel, android2.2等. 还有分支在做arm qemu, openocd, android ndk等工作. 以后会弱化arm linux org.
参考网址: 
1), 官网, wiki: 
http://www.linaro.org/downloads/
https://wiki.linaro.org/
https://wiki.linaro.org/Releases/1011/Final
https://wiki.linaro.org/Process/linaro1011ReleaseCycle
2), 其它: 
openocd
https://blueprints.launchpad.net/linaro/+spec/tr-toolchain-openocd
qemu 
https://launchpad.net/qemu-linaro/+download

2, ds-5, arm推出的针对Linux的开发环境. 
这个上次已经接触到了, 感觉DS-5是一系列arm Linux工具的集合, 比自己通过开源工具搭建调试环境会快很多. 
http://www.arm.com/products/tools/software-tools/ds-5/
1), 包括eclipse IDE;
2), gnu toolchain;
3), 可以调试, 支持gdb, kgdb, RVI, DStream等. 
4), 支持Cortex-A8 RTSM, 可以用这个模拟器调试Linux. 
5), 支持profiling: ARM Streamline™ Performance Analyzer equips software developers with an intuitive way to optimize Linux-based systems running on ARM powered platforms.

DStream: 
http://www.arm.com/products/tools/debug-adapters/dstream-high-performance-debug-and-trace.php
The DSTREAM™ high-performance debug and trace unit enables powerful software debug and optimization on any ARM processor-based hardware target. DSTREAM extends the functionality of RVI and RVT2 with faster memory download and trace capture, as well as wider support for physical debug and trace interfaces.
* Run control debug and trace unit supporting all ARM and Cortex processors
* USB 2.0 and Ethernet interface allows direct and remote connections from the host PC
* Support for JTAG and Serial-Wire Debug target interfaces
* Code download at speeds of up to 2500 KBytes per second
* JTAG clocks of up to 60 MHz provide fast software upload over the existing debug port 
* 16-bit wide trace capture at 300 MHz DDR (600 Mbit/s per pin)
* Flexible trace clock positioning (relative to trace data)
* Large 4 GB trace buffer enables long-time trace on fast targets
* Device bring-up and test utilities
* Support for Virtual Ethernet link over JTAG
* Third party IP and debugger support
bamvor: 支持了虚拟以太网就可以在系统早期使用NFS等基于网络的应用. 

还有VSTREAM, 相对于DSTREAM, VSTREAM针对RTL model进行调试: 
VSTREAM Virtual Debug Interface
VSTREAM Virtual Debug Interface Image (View Larger VSTREAM Virtual Debug Interface Image)
Get a Quote
VSTREAM is a fast and flexible virtual debug interface that connects software debuggers to hardware assisted verification systems such as Mentor Veloce and Cadence® Palladium®. VSTREAM enables more efficient software development in the early stages of system design, improving the utilization of hardware emulators and reducing project risk and time-to-market

3, web2.0
这次多次听到嵌入式设备上使用web2.0, 看来大家对于移动网络都越来越重视.
例如web2.0的工作包括JavaScript, HTML5 and ccs.
1), html5;
2), JavaScript
jit support
Google v8 JavaScript, in gingerbread even faster 50%.
3), css acceleration with neon and 3d(mali)
Mozilla electrolysis.

\todo 查: oesf? em3?

web2.0分为
JavaScript:
webkit可以分为webkit core and squirrel fish. Google把后者替换为v8.
cario and skia.
adobe flash and air available in Google market.
arm adobe: neon, smp and mali.

4, Mali
arm的3D处理器, 这次推出了mali T604.
arm mali T604: 除了原有的openVG1.1, openGL ES1.1, 2.0, 还支持Khronos OPENCL 1.1, 1.2和Directx. 
三种管线。
transaction elimination. 如果本部分crc不变，不写framebuffer.
总线: 支持AMBA4 ACE-lite.
支持1-4个core. 
相对应Cortex-A15是128bit AMBA4 -- Advanced Coherent Bus Interface.

5, arm physical ip
corelink: armba4, DDR, coresight, bist.
从28nm, 32nm往回40nm,65nm.使用。
multi-channel: 40nm工艺，有40nm, 50nm两种channel. 可以降低leakeage.
hvt, rvt, lvt.
不用hvt, 节省两层光照。可以使用更低电压。不同channel各做什么用？
dfm-aware layout
low voltage, 会首先导致memory无法使用？
memory compiler: mixed vt.
在L1 cache后端中, 部分是定制设计. 

6, 关注的公司:
1), amlogic, AML8726-M: A9, Mali400, 1080p
2), nufront
做的东西像是新岸线：就是新岸线！
nusmart 2816: dual a9 2.0g, 40nm.
查coromark, 处理器评测。得分越低越好。
3), ENEA, 软件提供商, 有自己的OS, 也提供Linux服务. 

7, 感想: 嵌入式不仅仅是arm+Linux, 也可能是arm+qnx, 或xxx+xxx. 千万别限制了自己的思路. 

10:39 2010-11-23
VC0882, android, 和bianrongguang讨论
1, huanglei: nfc, 切频. 需要等idle. 
如果切aclk是否需要等? xiaoming说读之前判断是否fifo full, 如果fifo full就不读了.
2, ATB
1), 忽略? 
2), 关. 
3), 和cpu固定比例. 

14:48 2010-11-23
VC0882, bootloader, uart波特率
原来26, 13, 12MHz三个频率, 计算是按照小数*256计算的, 这是830的算法, 882应该是小数*1024.
根据公式
a=频率/波特率/16
整数=取整(a)
小数=(a-取整(a))*1024
调整26, 13, 12MHz下bcr为:
26MHz: 0x006c000e
13MHz: 0x00360007
12MHz: 0x020a0006

18:03 2010-11-23
VC0718, arm, Cortex-A8, 获得L2 size
zhangjian回复bianyingfeng邮件
0, 原来panda_os里面有一个_cpu_dcache_getinfo可以获得arm9 dcache的信息. 和你目前做的函数功能类似. 不如重新写个_cpu_cache_getinfo, 得到L1 icache, dcache和L2 cache的信息. 得到这几部分的方法是完全一样的. 
1, 你觉得什么地方有问题? 可以先说明你的分析, 这样便于咱们进一步讨论. 
2, cache.s里面对应部分只使用了isb. 
是否一定要有dsb或isb可以看arm手册关于isb, dsb的说明. 
3, 用内嵌汇编需要看一下反汇编的结果, 有时会和预期不同. 

9:48 2010-11-24
时间管理
0, 9:20

1, 本日
1), 60' 计算迟到时间. 编写VBA处理logAssistant输出. 见"20:46 2010-7-12"3.
2), 20' 和xiaotao讨论Linux中断, 见"10:54 2010-11-24".
3), 计划bootloader事情. 见"11:57 2010-11-24". 
4), 2h: VC0882 bootloader speed sorting. 见"11:57 2010-11-24"3.
5), 30' bootloader padc交给yangxing做, 发信. 

10:54 2010-11-24
VC0882, Linux, 中断性能分析, 进度退出中断
1, 切换处理器模式
movs pc, xxx
subs pc, xxx, xxx
2, 从异常返回
ldm sp!, {register_with_pc}^

11:57 2010-11-24
VC0882, bootloader, bootloader最后检查
1, LiDongLiang邮件"zhangjian近两周的工作安排"20101123_0957
由于882 快要出去了
鉴于bootloader 时常有问题报出来
Zhangjian在bootloader 中的任务与其他人的工作关系都比较密切
为了稳妥起见
与beizhan，zhangjian 讨论了一下
Zhangjian近两周的工作重点将放在882 bootloader 的检查上
因此zhaoyuan 那边的事情要暂停两周
集中精力做好bootloader的检查
检查的内容我考虑了以下主要有以下方面
1．   ARM speed sorting 流程。这个工作以前是我做的，测试了几个简单的case，没有问题，但不确定是否会在真实应用时出错，由于zhangjian对A8 比较熟悉，这需要zhangjian与真实场景结合再全面检查，捋一下流程。
2．   Bootloader 整体流程
bamvor: clkrst, padc, 测试, ICV. 
3．   开机汇编初始化部分
4．   Icache，dcache，mmu 的打开关闭函数及其应用
bamvor: 3,4和zhicheng看. 
5．   O3的优化编译，可能会造成的与预期不一致的地方
bamvor: 参考arm手册看O3优化内容, 分析一下. 
6．   Memory 的使用分配管理
bamvor: usb, sd, nand共用buffer; 堆栈; speedsorting空间. 
7．   Clkrst 中与ddrc 相关联部分
bamvor: 和zhengwei过一下相关流程. 
8．   其它内容
bamvor: 宏定义. 
bamvor: ICV. case覆盖是否够? 
Dongliang: 512info, pmu fastwakeup的文档, bootloader代码, 打包工具是否对应: 主要是clk和ddr. 
检查的过程中我会参与
争取能细致的过一遍bootloader

2, padc的事情还没有做. 还是自己计划的不好, 早该完成的.
然后开始做speed sorting. 最多用一天的时间. 

3, check speed sorting
1), 看LDMIA时顺便看了系统指令: RFE, SRS.
如果只是保存pc和spsr, 这样很方便. 
RFE: Return From Exception loads the PC and the CPSR from the word at the specified address and the following
word respectively.
SRS: Store Return State stores the LR and SPSR of the current mode to the stack of a specified mode.
2), 特权模式下使用User模块读取数据. 
LDRBT, LDRHT, LDRSBT, LDRSHT, and LDRT
Even in privileged modes, loads from memory by these instructions are restricted in the same way as loads from memory in User mode.
3), 看了arm speed sorting文档和代码
(1), 目前bootloader只 考虑了icache. 要求speedsorting考虑了保存r-r14. 其余寄存器(例如cpsr和cp15)或dcache, L2 cache需要由speed sorting程序恢复. 
(2), 是通过机台的gpio通知么? 
(3), 为什么选择pmu 4-14寄存器? 
(4), 完善文档, 加入icache invalidate:
ptr = (func_t)g_SpeedBinStartAddr;	// g_SpeedBinStartAddr = 0x20000000
VIM_CACHE_icache_invalidate_range(g_SpeedBinStartAddr, g_SpeedBinAddr - g_SpeedBinStartAddr);//加入对icache的处理
(*ptr)();
4), fandong实验或查协议:
(1), 如果发了cbw, 等不到csw, 会不会发新的cbw? 
bamvor: cbw是host给slave的包, csw是slave回给host的包. 
(2), 如果重发, 且如果响应第一个cbw, 会不会有问题? 
(3), changyubao仿真. 
(4), MengFanDong邮件"882 bootloader usb speed sorting 仿真"20101124_1749
Bootloader 中的speed sorting 仿真一下下面这个case：
下载完一个speed sorting测试程序后，继续下载下一个speed sorting 测试程序，中间使其没有时间间隔(并且使 speed sorting测试程序运行时间长一点，确保超过两个测试程序之间的间隔)。这样连续做4个speed测试，看是否有问题。
(5), LiDongLiang邮件"答复: 882 bootloader usb speed sorting 仿真"20101124_1758
这个case 的特点在于下载运行多个pattern，这几个pattern 之间没有时间空隙
查看是否能够进一步缩短sorting的时间
5), 经过讨论后, 调整了bootloader spec, 并添加了4.2.4 ARM speed sorting 6). 

10:03 2010-11-26
时间管理
0, 9:43

1, 本日
1), 9:50-10:15 邮件, 业内动态. 
2), 10:20-10:40 yangxing bootloader padc分析. 需要看和我的excel是否匹配. 如果缺数据需要yangxing找测试同事做. 
3), 解决bootloader问题"11:57 2010-11-24"-1的2,3,4,7. 见"10:43 2010-11-26".
(1), 40' 完成bootloader __FPGA__宏定义检查. 

10:43 2010-11-26
VC0882, bootloader, review
1, 今天重点完成这几个
2．   Bootloader 整体流程
bamvor: clkrst, padc, 测试, ICV. 
3．   开机汇编初始化部分
4．   Icache，dcache，mmu 的打开关闭函数及其应用
bamvor: 3,4和zhicheng看. 
7．   Clkrst 中与ddrc 相关联部分
bamvor: 和zhengwei过一下相关流程. 

2, bootloader整体流程
1), 先看代码后看文档. 关注宏定义(__FPGA__等).
宏定义先看__FPGA__, 其余有时间用脚本搜索. 
2), __FPGA__
(1), 打开uart时钟方式不同, FPGA版本只需要修改CLKRST_PERI_MISC_CFG寄存器, ASIC版本通过VIM_CLKRST_ClkSwitchByStrappin实现. 
(2), ddr开时钟位置不同: 
FPGA版本在判断fast wakeup之前做. 这个在ASIC版本中由VIM_CLKRST_ClkSwitchBy512Info完成. 两个版本位置不同, 如果bootloader FPGA版本在fast wakeup之后, 512info切频之前访问了ddr, 测试没法发现问题. 但是ASIC里面可能有问题. ***
(3), efuse FPGA比ASIC多了一些代码. 因为FPGA上efuse没有写入过信息, 需要预先写入. ASIC是出厂写好的. 
(4), clkrst代码: 
a, VIM_CLKRST_ClkSwitchByStrappin()实现FPGA和ASIC不同, 因为时钟方案不同. 
b, VIM_CLKRST_GetTimerMclkCfg(), VIM_CLKRST_GetUartBcrCfg()在FPGA里面是固定返回一个配置. ASIC里面是根据strappin或512info配置得到. 
c, VIM_CLKRST_SetSdioClk()和_VIM_CLKRST_EnSdioClk() FPGA版本只修改sdio 0. 因为FPGA sd0-3都是用sd0的clock.
(5), _VIM_DDRC_Training: FPGA和ASIC实现不同. 
(6), nfc
a, clock divider: FPGA中nfc只使用clk1 reg, 而且时钟方案不同. 需要仿真覆盖nfc clk配置case. 
b, VIM_NFC_SetBitWidth(): 修改了时钟, 写了only for debug, \todo 按理说应该去掉. 

3, (13:35 2010-11-26)中午和zhicheng, lidongliang讨论. 
1), (1)和(6)b已经修改. 
2), fandong提出usb phy和usb module之间reset时间应该相差50us. 由于没有单独做reset逻辑, 模块按照第一次给clock做复位, 目前给二者clock时间没法保证大于50us, 于是在usb set mclk之前加入asm delay 3200次, 相当于100us@arm480MHz.


和jiajihua讨论. 
3), zhangjian2jiajihua
hi, jiajihua, huangwei

usb复位问题还有些疑问, 需要帮忙确认一下, 一个是复位流程, 一个是复位时间. 
这个关系到bootloader里面的usb boot能否使用, 非常重要. 谢谢. 
(1), 我理解的复位流程, 帮忙看看有没有问题: 
usb复位有两种方式, 一是硬件复位流程; 二是软件复位. 
我们现在用的实际是硬件复位流程. usb phy和controller的复位需要给出时钟后硬件复位才会有效. 从phy的复位到controller的复位需要间隔50us(时间来自fandong). 
所以实际的流程如下: 
usb phy por(power on reset), 此时usb controller也在复位状态
    --->打开usb phy时钟, 此时usb phy复位完成. 
            --->打开usb controller clock, 此时usb controller复位释放, 复位完成. 
步骤2和步骤3之间就是要求的50us. 
所以我们需要在usb set mclk之前加入50us的delay. 
phy的时钟是clkrst模块从CKD1_UPHY, CKD2_UPHY分出的clock. 
(2), 复位时间, 之前fandong讲需要50us, 我看了你建议我看的两个文档(名称路径附后)
"文档一p80"写明从phy por到phy时钟稳定需要805us或45us. 咱们是属于哪种情况?
Crystal:
• When T1 = T0 + 10 μs:
T3 < T1 + 805 μs = T0 + 815 μs
• When T1 = T0 + 30 μs:
T3 < T1 + 805 μs = T0 + 835 μs
External board clock or CLKCORE:
• When T1 = T0 + 10 μs:
T3 < T1 + 45 μs = T0 + 55 μs
• When T1 = T0 + 30 μs:
T3 < T1 + 45 μs = T0 + 75 μs

文档一: VC1600WCVS\doc\module\USB PHY\synopsys nanoPHY\tsmc_065lp_otg_nanoPHY_4.10a doc\a301_usb2.0_nanophy_1p_tsmc65lp25_databook.pdf
文档二: VC1600WCVS\doc\module\uhost\dw_iip_DWC_h20ahb_2.92a doc\DWC_h20ahb_db.pdf

4, bootloader流程. 
1), VIM_PMU_RemapAndJump(): remap and jump里面为什么要加memory barrier? 
这个是在iC做CDC检查时发现的, 见"10:03 2010-10-22". 设置remap寄存器后, 需要sync后才能再访问axi. 
原有代码: 
_VIM_PMU_jumpToPhyAddr(addr);
__PMU_SetBootSelSw(REMAP_DDR_TO_ZERO); // Software boot selection from ddr
__PMU_SetBootSelSel(BOOT_SEL_FROM_SW); // set boot selection from BOOT_SEL_SW
((void (*)(void))(goAddr))();
现有代码:
_VIM_PMU_jumpToPhyAddr(addr);
memory_barrier();
__PMU_SetDDRAMRemapZero();
memory_barrier();

2), \todo 
(1), 发信: 主要通路都需要仿真关闭打印仿真. 
(2), DEBUG_SELFCHECK是否打开? 

\todo

5, 
1), vector.s
; disable mmu
MRC     p15, 0, r0, c1, c0, 0       ; Read CP15 Control Register
;设r0=1
;r0&0x1=1
TST     r0, #0x1                    ; Is the MMU enabled?
BICNE   r0, r0, #0x1                ; Clear bit 0
MCRNE   p15, 0, r0, c1, c0, 0       ; Write value back
2), mmu.s
(1), cpsr_c
ARM_ARM_7AR p1570
c mask<0> = '1' to enable writing of bits<7:0> of the destination PSR
x mask<1> = '1' to enable writing of bits<15:8> of the destination PSR
s mask<2> = '1' to enable writing of bits<23:16> of the destination PSR
f mask<3> = '1' to enable writing of bits<31:24> of the destination PSR.
[7:0]包括, I F T M[4:0].
3), cache.S
(1), VIM_CACHE_icache_invalidate()里面只把icache从L1清到L2, 如果L2打开, 还是有可能从L2取到旧的指令. 但我们现在L2是关闭的, 所以不会有问题. 如果用户的speed sorting打开了L2或后面的用户程序打开了L2, 就需要清完整的cache. 
    EXPORT VIM_CACHE_icache_invalidate
VIM_CACHE_icache_invalidate
    push {r4, lr}
    mov r4, #0
    MCR p15, 0, r4, c7, c5, 0
    MCR p15, 0, r4, c8, c5, 0
    bl memory_barrier
    pop {r4, pc}
(2), VIM_CACHE_icache_invalidate_range里面对size的处理有问题. 清cache的范围是实际用户需要的0x40倍, 这个函数只在usb boot里面speed sorting调用, size最大是24k, 也就是最大清的范围是1.5M.

11:03 2010-11-26
VC0882, VC0718, clkrst, clock
1, 一个tree下模块之间相互影响. 
2, clock tree的综合频率. 
3, divider范围. 
4, 特殊要求: 有些场景模块频率不能停止: 例如usb; 有些要求精确频率, usb phy 12MHz, 1080p输出 152MHz. 

10:15 2010-11-29
VC0882, bootloader, clkrst和ddrc相关流程. 
上午, zhengwei, zhicheng和zhangjian review了bootloader中clkrst和ddr相关流程. 
没有发现问题, 1,2是两个疑问, 我们讨论后认为没问题. 3是dongliang提出的问题, 感觉还需要zhengwei帮忙确认. 
1, zhengwei: fast wakeup如果fail, 怎么办? 
arm, bus可以不切频直接用xclk, ddrc/dram可以用尽量保守的timing参数. 同时可以加入GateEnableDelayCount增加enable/disable, gate/ungate的延时. 
2, zhangjian, zhicheng: normal sleep to wakeup时, ddrc_cfg在ddrc寄存器配置后配置, 可以选择不配. ddrc_cfg1是WC, 是命令寄存器, 不需要单独配置. 
3, ddrc和ddr phy问题需要继续问. yunfei回复的邮件说明了dll reset timing, 这个在bootloader里面已经有考虑, 不清楚还没有有其它ddrc和ddr phy相关问题. 

14:59 2010-11-29
VC0882, bootloader
1．   ARM speed sorting 流程。这个工作以前是我做的，测试了几个简单的case，没有问题，但不确定是否会在真实应用时出错，由于zhangjian对A8 比较熟悉，这需要zhangjian与真实场景结合再全面检查，捋一下流程。
zhicheng: zhangjian已经看过, zhicheng再帮忙看一下. 
2．   Bootloader 整体流程
bamvor: clkrst, padc, 测试, ICV. 
3．   开机汇编初始化部分
zj: DONE
4．   Icache，dcache，mmu 的打开关闭函数及其应用
bamvor: \todo
5．   O3的优化编译，可能会造成的与预期不一致的地方
bamvor: 参考arm手册看O3优化内容, 分析一下. 
6．   Memory 的使用分配管理
bamvor: usb, sd, nand共用buffer; 堆栈; speedsorting空间. 
7．   Clkrst 中与ddrc 相关联部分
bamvor: zhicheng和zhengwei DONE.
8．   其它内容
bamvor: 宏定义. 
bamvor: ICV. case覆盖是否够? 
zhicheng: 512info/pmu fastwakeup的文档, bootloader代码, 打包工具是否对应: 主要是clk和ddr. 

15:08 2010-11-29
VC0882, bootloader, memory管理review
1, 前24k ram 用在speed sorting的代码下载，后8k用在bootloader的rw，zi，及栈空间
2, sd
1), g_DataShared: 前512作MBR,后512保存EMMC模式下多读的一次512INFO
2) 全局的512info
3, NFC
1) sram的12K-13K作FTL缓存区, sram的13K-24K作BBT表存储区域
2) 全局的512info
4,USB
1) g_DataShared: 使用前512字节接收host发送的数据
5, Encrypt
1) sram的0-12k: MMU表
6, speed sorting
1) sram的0-24k: speed sorting使用空间. 与MMU和NFC重合,但不同时用
7, 堆栈:　一共8k, 目前只使用了不到5k.
编译armBin_sv_icache_O3Otime
1), 全局变量: 900+3328.
** Section #1 'MEM_EXEC_ROM' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 56276 bytes (alignment 4)
    Address: 0x00000000
** Section #2 'MEM_EXEC_RW' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 900 bytes (alignment 8)
    Address: 0x20006000
** Section #3 'MEM_EXEC_ZI' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 3328 bytes (alignment 4)
    Address: 0x20006384
2), 栈:
Maximum Stack Usage = 592 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)
7, fandong会分析, usb中最长的调用链, 并计算栈的使用.

19:00 2010-11-29
VC0882, bootloader review
Liaozhicheng邮件"答复: 882 bootloader 的最后检查__11月30日下午进展"20101125_1859
下午主要和zhangjian  review了 882 bootloader memory管理
各个模块使用如下：（前24k ram 用在speed sorting的代码下载，后8k用在bootloader的rw，zi，及栈空间）
1, sd
1), g_DataShared: 前512作MBR,后512保存EMMC模式下多读的一次512INFO
2) 全局的512info
2, NFC
1) sram的12K-13K作FTL缓存区, sram的13K-24K作BBT表存储区域
2) 全局的512info
3,USB
1) g_DataShared: 使用前512字节接收host发送的数据
4, Encrypt
1) sram的0-12k: MMU表
5, speed sorting
1) sram的0-24k: speed sorting使用空间. 与MMU和NFC重合,但不同时用
6, 堆栈:　一共8k, 目前只使用了不到5k.
编译armBin_sv_icache_O3Otime
1), 全局变量: 900+3328.
** Section #1 'MEM_EXEC_ROM' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
Size   : 56276 bytes (alignment 4)
Address: 0x00000000
** Section #2 'MEM_EXEC_RW' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
Size   : 900 bytes (alignment 8)
Address: 0x20006000
** Section #3 'MEM_EXEC_ZI' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
Size   : 3328 bytes (alignment 4)
Address: 0x20006384
2), 栈:
Maximum Stack Usage = 592 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)
Sram空间使用图如下：
Sram的使用经过分析，暂时没发现问题，但有个问题需要注意的，其他的大小基本固定了，也没有冲突，但是栈有可能往下曾时会覆盖下面的全局变量区。其他模块用的普通调用为主，编译时能分析出，没有什么问题，USB模块用到较多的回调函数，工具无法分析，需要人工分析。
刚才fangdong分析后确认，USB最大调用路径所消耗的栈为1K，不会导致栈溢出。
